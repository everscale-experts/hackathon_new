/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/@tonclient/appkit/dist/account.js":
/*!********************************************************!*\
  !*** ./node_modules/@tonclient/appkit/dist/account.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DefaultGiverContract = exports.Account = exports.AccountType = exports.AccountError = void 0;\nconst core_1 = __webpack_require__(/*! @tonclient/core */ \"./node_modules/@tonclient/core/dist/index.js\");\nclass AccountError extends Error {\n    static missingTVC() {\n        return new AccountError(\"Can't calculate deploy params: missing required TVC.\");\n    }\n}\nexports.AccountError = AccountError;\n/**\n * Current type of the account.\n */\nvar AccountType;\n(function (AccountType) {\n    /**\n     * Account exists in the blockchain but without smart contract.\n     */\n    AccountType[AccountType[\"uninit\"] = 0] = \"uninit\";\n    /**\n     * Account exists in the blockchain with smart contract.\n     */\n    AccountType[AccountType[\"active\"] = 1] = \"active\";\n    /**\n     * Account exists in the blockchain but it had frozen.\n     */\n    AccountType[AccountType[\"frozen\"] = 2] = \"frozen\";\n    /**\n     * Account is missing in the blockchain.\n     */\n    AccountType[AccountType[\"nonExist\"] = 3] = \"nonExist\";\n})(AccountType = exports.AccountType || (exports.AccountType = {}));\n/**\n * Object to deal with specified account using specified signer (owner).\n *\n * Account instance can be bound to account address\n * or account deploy parameters that uniquely identifies\n * account address.\n */\nclass Account {\n    /**\n     * Constructs account instance.\n     *\n     * @param contract Contract package containing abi and optional tvc data.\n     * @param options Account instance options.\n     */\n    constructor(contract, options) {\n        var _a, _b, _c, _d, _e;\n        this.syncLastTransLt = null;\n        this.cachedBoc = null;\n        this.subscriptions = null;\n        this.contract = contract;\n        this.client = (_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : core_1.TonClient.default;\n        this.abi = (0, core_1.abiContract)(contract.abi);\n        this.signer = (_b = options === null || options === void 0 ? void 0 : options.signer) !== null && _b !== void 0 ? _b : (0, core_1.signerNone)();\n        this.address = (_c = options === null || options === void 0 ? void 0 : options.address) !== null && _c !== void 0 ? _c : null;\n        this.initData = (_d = options === null || options === void 0 ? void 0 : options.initData) !== null && _d !== void 0 ? _d : null;\n        this.useCachedState = (_e = options === null || options === void 0 ? void 0 : options.useCachedState) !== null && _e !== void 0 ? _e : false;\n    }\n    /**\n     * Returns the giver instance assigned for specified client instance.\n     * Or `null` if no giver is associated with this client yet.\n     *\n     * @param client Client instance looking for.\n     */\n    static findGiverForClient(client) {\n        var _a;\n        return (_a = this.giversByClient.find(x => x.client === client)) === null || _a === void 0 ? void 0 : _a.giver;\n    }\n    /**\n     * Assigns specified giver as a default for specified client instance.\n     * If client already has default giver it will be reassigned.\n     *\n     * @param client Client instance.\n     * @param giver New giver instance or `null` if the default giver for\n     * this client must be removed.\n     */\n    static setGiverForClient(client, giver) {\n        const i = this.giversByClient.findIndex(x => x.client === client);\n        if (i >= 0) {\n            if (giver) {\n                this.giversByClient[i].giver = giver;\n            }\n            else {\n                this.giversByClient.splice(i, 1);\n            }\n        }\n        else if (giver) {\n            this.giversByClient.push({\n                client,\n                giver,\n            });\n        }\n    }\n    static createGiver(client) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const giverKeys = yield getDefaultGiverKeys(client);\n            const giverAddress = yield getDefaultGiverAddress(client, giverKeys);\n            const giver = new Account(exports.DefaultGiverContract, {\n                client,\n                address: giverAddress,\n                signer: (0, core_1.signerKeys)(giverKeys),\n            });\n            return {\n                address: giverAddress,\n                sendTo: (address, value) => __awaiter(this, void 0, void 0, function* () {\n                    yield giver.run(\"sendTransaction\", {\n                        dest: address,\n                        value,\n                        bounce: false,\n                    });\n                }),\n            };\n        });\n    }\n    /**\n     * Returns the default giver for specified client instance.\n     * If no giver assigned yet then new one will be created,\n     * assigned and returned.\n     *\n     * @param client Client instance.\n     */\n    static getGiverForClient(client) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const existing = this.findGiverForClient(client);\n            if (existing) {\n                return existing;\n            }\n            const giver = yield this.createGiver(client);\n            this.giversByClient.push({\n                client,\n                giver,\n            });\n            return giver;\n        });\n    }\n    /**\n     * Returns address of the account.\n     *\n     * Uses address specified in constructor options\n     * or calculates it from deploy data provided in constructor.\n     */\n    getAddress() {\n        return __awaiter(this, void 0, void 0, function* () {\n            let address = this.address;\n            if (address === null) {\n                const deployParams = this.getParamsOfDeployMessage({\n                    initFunctionName: null,\n                });\n                address = (yield this.client.abi.encode_message(deployParams)).address;\n                this.address = address;\n            }\n            return address;\n        });\n    }\n    /**\n     * Returns params for encoding deploy message.\n     * @param options Message encoding options.\n     */\n    getParamsOfDeployMessage(options) {\n        var _a;\n        if (!this.contract.tvc) {\n            throw AccountError.missingTVC();\n        }\n        const params = {\n            abi: this.abi,\n            signer: this.signer,\n            deploy_set: {\n                tvc: this.contract.tvc,\n            },\n        };\n        if (this.initData) {\n            params.deploy_set.initial_data = this.initData;\n        }\n        if ((options === null || options === void 0 ? void 0 : options.initFunctionName) !== null) {\n            params.call_set = {\n                function_name: (_a = options === null || options === void 0 ? void 0 : options.initFunctionName) !== null && _a !== void 0 ? _a : \"constructor\",\n            };\n            if ((options === null || options === void 0 ? void 0 : options.initInput) !== undefined) {\n                params.call_set.input = options.initInput;\n            }\n        }\n        return params;\n    }\n    /**\n     * Calculates detailed deploy fees.\n     */\n    calcDeployFees(options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const deployParams = yield this.getParamsOfDeployMessage(options);\n            const message = yield this.client.abi.encode_message(deployParams);\n            const result = yield this.client.tvm.run_executor({\n                account: (0, core_1.accountForExecutorUninit)(),\n                abi: this.abi,\n                message: message.message,\n            });\n            return result.fees;\n        });\n    }\n    /**\n     * Deploys account into network\n     * @param options\n     */\n    deploy(options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const deployParams = this.getParamsOfDeployMessage(options);\n            const useGiver = options === null || options === void 0 ? void 0 : options.useGiver;\n            const giver = useGiver === true ? (yield Account.getGiverForClient(this.client)) : useGiver;\n            this.address = (yield this.client.abi.encode_message(deployParams)).address;\n            if (giver) {\n                yield giver.sendTo(this.address, 10000000000);\n            }\n            const result = yield this.client.processing.process_message({\n                message_encode_params: deployParams,\n                send_events: false,\n            });\n            this.needSyncWithTransaction(result.transaction);\n            return result;\n        });\n    }\n    /**\n     * Emulate deploy\n     * @param options\n     */\n    deployLocal(options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const deployParams = this.getParamsOfDeployMessage(options);\n            const { address, message, } = yield this.client.abi.encode_message(deployParams);\n            const result = yield this.client.tvm.run_executor({\n                account: (0, core_1.accountForExecutorUninit)(),\n                abi: this.abi,\n                message,\n                return_updated_account: true,\n            });\n            this.address = address;\n            this.cachedBoc = result.account;\n            return result;\n        });\n    }\n    /**\n     * Calculates detailed fees for specified run parameters.\n     *\n     * @param functionName Name of the function according to the ABI.\n     * @param input Object with function parameters (function parameters).\n     */\n    calcRunFees(functionName, input) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const message = yield this.client.abi.encode_message({\n                address: yield this.getAddress(),\n                abi: this.abi,\n                signer: this.signer,\n                call_set: {\n                    function_name: functionName,\n                    input,\n                },\n            });\n            let result;\n            result = yield this.client.tvm.run_executor({\n                account: (0, core_1.accountForExecutorAccount)(yield this.boc()),\n                abi: this.abi,\n                message: message.message,\n            });\n            return result.fees;\n        });\n    }\n    /**\n     * Process message on network and returns detailed information\n     * about results including produced transaction and messages.\n     *\n     * @param functionName Name of the function according to the ABI.\n     * @param input Object with function parameters (function parameters).\n     * @param options Run options.\n     */\n    run(functionName, input, options) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const result = (yield this.client.processing.process_message({\n                message_encode_params: {\n                    address: yield this.getAddress(),\n                    abi: this.abi,\n                    signer: (_a = options === null || options === void 0 ? void 0 : options.signer) !== null && _a !== void 0 ? _a : this.signer,\n                    call_set: {\n                        function_name: functionName,\n                        input,\n                    },\n                },\n                send_events: false,\n            }));\n            this.needSyncWithTransaction(result.transaction);\n            return result;\n        });\n    }\n    /**\n     * Evaluates message on local TVM and returns decoded output.\n     *\n     * @param functionName Name of the function according to the ABI.\n     * @param input Object with function parameters (function input).\n     * @param options Run options.\n     */\n    runLocal(functionName, input, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const message = yield this.client.abi.encode_message({\n                address: yield this.getAddress(),\n                abi: this.abi,\n                signer: this.signer,\n                call_set: {\n                    function_name: functionName,\n                    input,\n                },\n            });\n            let result;\n            if (options === null || options === void 0 ? void 0 : options.performAllChecks) {\n                result = yield this.client.tvm.run_executor({\n                    account: (0, core_1.accountForExecutorAccount)(yield this.boc()),\n                    abi: this.abi,\n                    message: message.message,\n                    return_updated_account: true,\n                });\n            }\n            else {\n                result = (yield this.client.tvm.run_tvm({\n                    account: yield this.boc(),\n                    abi: this.abi,\n                    message: message.message,\n                    return_updated_account: true,\n                }));\n            }\n            if (result.account) {\n                this.cachedBoc = result.account;\n            }\n            return result;\n        });\n    }\n    needSyncWithTransaction(transaction) {\n        if (!transaction.aborted && transaction.lt) {\n            this.syncLastTransLt = transaction.lt;\n            this.cachedBoc = null;\n        }\n    }\n    /**\n     * Returns raw data of the account in form of BOC.\n     * Fetches boc data from network and caches it in private field.\n     * `runLocal` updates cached boc.\n     * `run` drops cached boc.\n     * This function syncs fetching boc with last `run` or `deploy`\n     * so fetched boc\n     */\n    boc() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.cachedBoc && this.useCachedState) {\n                return this.cachedBoc;\n            }\n            const address = yield this.getAddress();\n            const net = this.client.net;\n            if (this.syncLastTransLt) {\n                const accounts = yield net.query_collection({\n                    collection: \"accounts\",\n                    filter: {\n                        id: { eq: address },\n                        last_trans_lt: { ge: this.syncLastTransLt },\n                    },\n                    result: \"boc\",\n                });\n                if (accounts.result.length > 0) {\n                    const boc = accounts.result[0].boc;\n                    this.syncLastTransLt = null;\n                    this.cachedBoc = boc;\n                    return boc;\n                }\n            }\n            const boc = (yield net.wait_for_collection({\n                collection: \"accounts\",\n                filter: { id: { eq: this.address } },\n                result: \"boc\",\n                timeout: 1000,\n            })).result.boc;\n            this.cachedBoc = boc;\n            return boc;\n        });\n    }\n    /**\n     * Drops all cached and local data.\n     */\n    refresh() {\n        this.cachedBoc = null;\n    }\n    /**\n     * Returns parsed data of the account.\n     */\n    getAccount() {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                return (yield this.client.boc.parse_account({\n                    boc: yield this.boc(),\n                })).parsed;\n            }\n            catch (error) {\n                if (error.code !== 603) {\n                    throw error;\n                }\n            }\n            return {\n                acc_type: AccountType.nonExist,\n            };\n        });\n    }\n    subscribeAccount(fields, listener) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.subscribe(\"accounts\", { id: { eq: yield this.getAddress() } }, fields, listener);\n        });\n    }\n    subscribeTransactions(fields, listener) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const address = yield this.getAddress();\n            yield this.subscribe(\"transactions\", {\n                account_addr: { eq: address },\n                status: { eq: 5 },\n            }, fields, listener);\n        });\n    }\n    subscribeMessages(fields, listener) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const address = yield this.getAddress();\n            yield this.subscribe(\"messages\", {\n                status: { eq: 5 },\n                src: { eq: address },\n                OR: {\n                    status: { eq: 5 },\n                    dst: { eq: address },\n                },\n            }, fields, listener);\n        });\n    }\n    decodeMessage(message) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield core_1.TonClient.default.abi.decode_message({\n                abi: this.abi,\n                message,\n            });\n        });\n    }\n    decodeMessageBody(body, isInternal) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield core_1.TonClient.default.abi.decode_message_body({\n                abi: this.abi,\n                body,\n                is_internal: isInternal,\n            });\n        });\n    }\n    getBalance() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return (yield this.getAccount()).balance;\n        });\n    }\n    subscribe(collection, filter, fields, listener) {\n        var _a, _b;\n        return __awaiter(this, void 0, void 0, function* () {\n            const prevSubscription = this.subscriptions && this.subscriptions.get(collection);\n            if (prevSubscription) {\n                (_a = this.subscriptions) === null || _a === void 0 ? void 0 : _a.delete(collection);\n                yield this.client.net.unsubscribe(prevSubscription);\n            }\n            else if (!this.subscriptions) {\n                this.subscriptions = new Map();\n            }\n            const subscription = yield this.client.net.subscribe_collection({\n                collection,\n                filter,\n                result: fields,\n            }, ((params, responseType) => {\n                if (responseType === 100) {\n                    listener(params.result);\n                }\n            }));\n            (_b = this.subscriptions) === null || _b === void 0 ? void 0 : _b.set(collection, subscription);\n        });\n    }\n    /**\n     * Free all internal resources related to this instance\n     * and allocated inside core.\n     *\n     * It is a good practice to call this method when you have finished\n     * with this Account object.\n     *\n     * Note that this instance still fully operable.\n     * So you can continue to work with this instance.\n     */\n    free() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.subscriptions) {\n                const subscriptions = this.subscriptions.values();\n                this.subscriptions = null;\n                for (const subscription of subscriptions) {\n                    yield this.client.net.unsubscribe(subscription);\n                }\n            }\n        });\n    }\n}\nexports.Account = Account;\nAccount.giversByClient = [];\nfunction getEnv(name) {\n    const globalEval = eval;\n    try {\n        return globalEval(`process.env.${name}`);\n    }\n    catch (_a) {\n        return undefined;\n    }\n}\nfunction getDefaultGiverKeys(client) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const definedSecret = getEnv(\"TON_GIVER_SECRET\");\n        if (definedSecret) {\n            const definedKeys = yield client.crypto.nacl_sign_keypair_from_secret_key({\n                secret: definedSecret,\n            });\n            definedKeys.secret = definedKeys.secret.substr(0, 64);\n            return definedKeys;\n        }\n        // noinspection SpellCheckingInspection\n        return {\n            \"public\": \"2ada2e65ab8eeab09490e3521415f45b6e42df9c760a639bcf53957550b25a16\",\n            \"secret\": \"172af540e43a524763dd53b26a066d472a97c4de37d5498170564510608250c3\",\n        };\n    });\n}\nfunction getDefaultGiverAddress(client, keys) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n        const definedAddress = getEnv(\"TON_GIVER_ADDRESS\");\n        if (definedAddress) {\n            return definedAddress;\n        }\n        return (yield client.abi.encode_message({\n            abi: (0, core_1.abiContract)(exports.DefaultGiverContract.abi),\n            deploy_set: {\n                tvc: (_a = exports.DefaultGiverContract.tvc) !== null && _a !== void 0 ? _a : \"\",\n            },\n            signer: (0, core_1.signerKeys)(keys),\n        })).address;\n    });\n}\n// noinspection SpellCheckingInspection\nexports.DefaultGiverContract = {\n    abi: {\n        \"ABI version\": 2,\n        header: [\"time\", \"expire\"],\n        functions: [\n            {\n                name: \"sendTransaction\",\n                inputs: [\n                    {\n                        \"name\": \"dest\",\n                        \"type\": \"address\",\n                    },\n                    {\n                        \"name\": \"value\",\n                        \"type\": \"uint128\",\n                    },\n                    {\n                        \"name\": \"bounce\",\n                        \"type\": \"bool\",\n                    },\n                ],\n                outputs: [],\n            },\n            {\n                name: \"getMessages\",\n                inputs: [],\n                outputs: [\n                    {\n                        components: [\n                            {\n                                name: \"hash\",\n                                type: \"uint256\",\n                            },\n                            {\n                                name: \"expireAt\",\n                                type: \"uint64\",\n                            },\n                        ],\n                        name: \"messages\",\n                        type: \"tuple[]\",\n                    },\n                ],\n            },\n            {\n                name: \"upgrade\",\n                inputs: [\n                    {\n                        name: \"newcode\",\n                        type: \"cell\",\n                    },\n                ],\n                outputs: [],\n            },\n            {\n                name: \"constructor\",\n                inputs: [],\n                outputs: [],\n            },\n        ],\n        data: [],\n        events: [],\n    },\n    tvc: \"te6ccgECGgEAA9sAAgE0BgEBAcACAgPPIAUDAQHeBAAD0CAAQdgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAIm/wD0pCAiwAGS9KDhiu1TWDD0oQkHAQr0pCD0oQgAAAIBIAwKAfz/fyHtRNAg10nCAZ/T/9MA9AX4an/4Yfhm+GKOG/QFbfhqcAGAQPQO8r3XC//4YnD4Y3D4Zn/4YeLTAAGOEoECANcYIPkBWPhCIPhl+RDyqN4j+EL4RSBukjBw3rry4GUh0z/THzQx+CMhAb7yuSH5ACD4SoEBAPQOIJEx3rMLAE7y4Gb4ACH4SiIBVQHIyz9ZgQEA9EP4aiMEXwTTHwHwAfhHbpLyPN4CASASDQIBWBEOAQm46Jj8UA8B/vhBbo4S7UTQ0//TAPQF+Gp/+GH4Zvhi3tFwbW8C+EqBAQD0hpUB1ws/f5NwcHDikSCONyMjI28CbyLIIs8L/yHPCz8xMQFvIiGkA1mAIPRDbwI0IvhKgQEA9HyVAdcLP3+TcHBw4gI1MzHoXwPIghB3RMfighCAAAAAsc8LHyEQAKJvIgLLH/QAyIJYYAAAAAAAAAAAAAAAAM8LZoEDmCLPMQG5lnHPQCHPF5Vxz0EhzeIgyXH7AFswwP+OEvhCyMv/+EbPCwD4SgH0AMntVN5/+GcAxbkWq+f/CC3Rxt2omgQa6ThAM/p/+mAegL8NT/8MPwzfDFHDfoCtvw1OADAIHoHeV7rhf/8MTh8Mbh8Mz/8MPFvfCNJeRnJuPwzcXwAaPwhZGX//CNnhYB8JQD6AGT2qj/8M8AIBIBUTAde7Fe+TX4QW6OEu1E0NP/0wD0Bfhqf/hh+Gb4Yt76QNcNf5XU0dDTf9/XDACV1NHQ0gDf0SIiInPIcc8LASLPCgBzz0AkzxYj+gKAac9Acs9AIMki+wBfBfhKgQEA9IaVAdcLP3+TcHBw4pEggUAJKOLfgjIgG7n/hKIwEhAYEBAPRbMDH4at4i+EqBAQD0fJUB1ws/f5NwcHDiAjUzMehfA18D+ELIy//4Rs8LAPhKAfQAye1Uf/hnAgEgFxYAx7jkYYdfCC3Rwl2omhp/+mAegL8NT/8MPwzfDFvamj8IXwikDdJGDhvXXlwMvwAfCFkZf/8I2eFgHwlAPoAZPaqfAeQfYIQaHaPdqn4ARh8IWRl//wjZ4WAfCUA+gBk9qo//DPACAtoZGAAtr4QsjL//hGzwsA+EoB9ADJ7VT4D/IAgAdacCHHAJ0i0HPXIdcLAMABkJDi4CHXDR+S8jzhUxHAAJDgwQMighD////9vLGS8jzgAfAB+EdukvI83o\",\n};\n//# sourceMappingURL=account.js.map\n\n//# sourceURL=webpack://simplepage/./node_modules/@tonclient/appkit/dist/account.js?");

/***/ }),

/***/ "./node_modules/@tonclient/appkit/dist/index.js":
/*!******************************************************!*\
  !*** ./node_modules/@tonclient/appkit/dist/index.js ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./account */ \"./node_modules/@tonclient/appkit/dist/account.js\"), exports);\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://simplepage/./node_modules/@tonclient/appkit/dist/index.js?");

/***/ }),

/***/ "./node_modules/@tonclient/core/dist/bin.js":
/*!**************************************************!*\
  !*** ./node_modules/@tonclient/core/dist/bin.js ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CommonBinaryBridge = exports.useLibrary = exports.getBridge = exports.ResponseType = void 0;\nconst errors_1 = __webpack_require__(/*! ./errors */ \"./node_modules/@tonclient/core/dist/errors.js\");\nvar ResponseType;\n(function (ResponseType) {\n    ResponseType[ResponseType[\"Success\"] = 0] = \"Success\";\n    ResponseType[ResponseType[\"Error\"] = 1] = \"Error\";\n    ResponseType[ResponseType[\"Nop\"] = 2] = \"Nop\";\n    ResponseType[ResponseType[\"AppRequest\"] = 3] = \"AppRequest\";\n    ResponseType[ResponseType[\"AppNotify\"] = 4] = \"AppNotify\";\n    ResponseType[ResponseType[\"Custom\"] = 100] = \"Custom\";\n})(ResponseType = exports.ResponseType || (exports.ResponseType = {}));\nlet bridge = undefined;\nfunction getBridge() {\n    if (!bridge) {\n        throw new errors_1.TonClientError(1, \"TON Client binary bridge isn't set.\");\n    }\n    return bridge;\n}\nexports.getBridge = getBridge;\nfunction useLibrary(loader) {\n    if (\"createContext\" in loader) {\n        bridge = loader;\n    }\n    else {\n        bridge = new CommonBinaryBridge(loader);\n    }\n}\nexports.useLibrary = useLibrary;\nclass BinaryLibraryAdapter {\n    constructor(library) {\n        this.library = library;\n    }\n    setResponseParamsHandler(handler) {\n        if (handler === undefined) {\n            this.library.setResponseHandler(undefined);\n        }\n        else {\n            this.library.setResponseHandler((requestId, paramsJson, responseType, finished) => handler(requestId, paramsJson !== \"\" ? JSON.parse(paramsJson) : undefined, responseType, finished));\n        }\n    }\n    sendRequestParams(context, requestId, functionName, functionParams) {\n        const paramsJson = (functionParams === undefined) || (functionParams === null)\n            ? \"\"\n            : JSON.stringify(functionParams, (_, value) => typeof value === \"bigint\"\n                ? (value < Number.MAX_SAFE_INTEGER && value > Number.MIN_SAFE_INTEGER\n                    ? Number(value)\n                    : value.toString())\n                : value);\n        this.library.sendRequest(context, requestId, functionName, paramsJson);\n    }\n    createContext(configJson) {\n        return this.library.createContext(configJson);\n    }\n    destroyContext(context) {\n        this.library.destroyContext(context);\n    }\n}\nclass CommonBinaryBridge {\n    constructor(loader) {\n        this.loading = undefined;\n        this.loadError = undefined;\n        this.library = undefined;\n        this.requests = new Map();\n        this.nextRequestId = 1;\n        this.contextCount = 0;\n        this.responseHandlerAssigned = false;\n        this.loading = [];\n        loader().then((library, error) => {\n            const saveLoading = this.loading;\n            this.loading = undefined;\n            if (library) {\n                let libraryWithParams = \"setResponseParamsHandler\" in library\n                    ? library\n                    : new BinaryLibraryAdapter(library);\n                this.library = libraryWithParams;\n                saveLoading === null || saveLoading === void 0 ? void 0 : saveLoading.forEach(x => x.resolve(libraryWithParams));\n            }\n            else {\n                this.loadError = error !== null && error !== void 0 ? error : undefined;\n                saveLoading === null || saveLoading === void 0 ? void 0 : saveLoading.forEach(x => x.reject(error));\n            }\n        });\n    }\n    checkResponseHandler() {\n        var _a, _b;\n        const mustBeAssigned = (this.contextCount > 0) || (this.requests.size > 0);\n        if (this.responseHandlerAssigned !== mustBeAssigned) {\n            if (mustBeAssigned) {\n                (_a = this.library) === null || _a === void 0 ? void 0 : _a.setResponseParamsHandler((requestId, params, responseType, finished) => this.handleLibraryResponse(requestId, params, responseType, finished));\n            }\n            else {\n                (_b = this.library) === null || _b === void 0 ? void 0 : _b.setResponseParamsHandler();\n            }\n            this.responseHandlerAssigned = mustBeAssigned;\n        }\n    }\n    createContext(config) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const lib = this.library || (yield this.loadRequired());\n            this.contextCount += 1;\n            return CommonBinaryBridge.parseResult(yield lib.createContext(JSON.stringify(config)));\n        });\n    }\n    destroyContext(context) {\n        var _a;\n        this.contextCount = Math.max(this.contextCount - 1, 0);\n        this.checkResponseHandler();\n        (_a = this.library) === null || _a === void 0 ? void 0 : _a.destroyContext(context);\n    }\n    request(context, functionName, functionParams, responseHandler) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const lib = (_a = this.library) !== null && _a !== void 0 ? _a : yield this.loadRequired();\n            return new Promise((resolve, reject) => {\n                const request = {\n                    resolve,\n                    reject,\n                    responseHandler,\n                };\n                const requestId = this.generateRequestId();\n                this.requests.set(requestId, request);\n                this.checkResponseHandler();\n                lib.sendRequestParams(context, requestId, functionName, functionParams);\n            });\n        });\n    }\n    loadRequired() {\n        if (this.library !== undefined) {\n            return Promise.resolve(this.library);\n        }\n        if (this.loadError !== undefined) {\n            return Promise.reject(this.loadError);\n        }\n        if (this.loading === undefined) {\n            return Promise.reject(new errors_1.TonClientError(1, \"TON Client binary library isn't set.\"));\n        }\n        return new Promise((resolve, reject) => {\n            var _a;\n            (_a = this.loading) === null || _a === void 0 ? void 0 : _a.push({\n                resolve,\n                reject,\n            });\n        });\n    }\n    generateRequestId() {\n        const id = this.nextRequestId;\n        do {\n            this.nextRequestId += 1;\n            if (this.nextRequestId >= Number.MAX_SAFE_INTEGER) {\n                this.nextRequestId = 1;\n            }\n        } while (this.requests.has(this.nextRequestId));\n        return id;\n    }\n    handleLibraryResponse(requestId, params, responseType, finished) {\n        const request = this.requests.get(requestId);\n        if (!request) {\n            return;\n        }\n        if (finished) {\n            this.requests.delete(requestId);\n            this.checkResponseHandler();\n        }\n        switch (responseType) {\n            case ResponseType.Success:\n                request.resolve(params);\n                break;\n            case ResponseType.Error:\n                request.reject(params);\n                break;\n            default:\n                const isAppObjectOrCustom = responseType === ResponseType.AppNotify\n                    || responseType === ResponseType.AppRequest\n                    || responseType >= ResponseType.Custom;\n                if (isAppObjectOrCustom && request.responseHandler) {\n                    request.responseHandler(params, responseType);\n                }\n        }\n    }\n    static parseResult(resultJson) {\n        const result = JSON.parse(resultJson);\n        if (\"error\" in result) {\n            throw new errors_1.TonClientError(result.error.code, result.error.message, result.error.data);\n        }\n        return result.result;\n    }\n}\nexports.CommonBinaryBridge = CommonBinaryBridge;\n//# sourceMappingURL=bin.js.map\n\n//# sourceURL=webpack://simplepage/./node_modules/@tonclient/core/dist/bin.js?");

/***/ }),

/***/ "./node_modules/@tonclient/core/dist/client.js":
/*!*****************************************************!*\
  !*** ./node_modules/@tonclient/core/dist/client.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright 2018-2020 TON Labs LTD.\n *\n * Licensed under the SOFTWARE EVALUATION License (the \"License\"); you may not use\n * this file except in compliance with the License.\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific TON DEV software governing permissions and\n * limitations under the License.\n *\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TonClient = void 0;\nconst modules_1 = __webpack_require__(/*! ./modules */ \"./node_modules/@tonclient/core/dist/modules.js\");\nconst bin_1 = __webpack_require__(/*! ./bin */ \"./node_modules/@tonclient/core/dist/bin.js\");\nclass TonClient {\n    constructor(config) {\n        this.context = null;\n        this.config = config !== null && config !== void 0 ? config : {};\n        this.client = new modules_1.ClientModule(this);\n        this.crypto = new modules_1.CryptoModule(this);\n        this.abi = new modules_1.AbiModule(this);\n        this.boc = new modules_1.BocModule(this);\n        this.processing = new modules_1.ProcessingModule(this);\n        this.utils = new modules_1.UtilsModule(this);\n        this.net = new modules_1.NetModule(this);\n        this.tvm = new modules_1.TvmModule(this);\n        this.proofs = new modules_1.ProofsModule(this);\n    }\n    static set default(client) {\n        this._default = client;\n    }\n    static get default() {\n        if (this._default === null) {\n            this._default = new TonClient(this._defaultConfig);\n        }\n        return this._default;\n    }\n    static set defaultConfig(config) {\n        this._defaultConfig = config;\n    }\n    static get defaultConfig() {\n        return this._defaultConfig;\n    }\n    static useBinaryLibrary(loader) {\n        (0, bin_1.useLibrary)(loader);\n    }\n    static toKey(d) {\n        return toHex(d, 256);\n    }\n    static toHash64(d) {\n        return toHex(d, 64);\n    }\n    static toHash128(d) {\n        return toHex(d, 128);\n    }\n    static toHash256(d) {\n        return toHex(d, 256);\n    }\n    static toHash512(d) {\n        return toHex(d, 512);\n    }\n    static toHex(dec, bits = 0) {\n        return toHex(dec, bits);\n    }\n    close() {\n        const context = this.context;\n        if (context !== null) {\n            this.context = null;\n            (0, bin_1.getBridge)().destroyContext(context);\n        }\n    }\n    resolveError(functionName, params, err) {\n        var _a, _b;\n        return __awaiter(this, void 0, void 0, function* () {\n            if (err.code !== 23 || !((_a = err.data) === null || _a === void 0 ? void 0 : _a.suggest_use_helper_for)) {\n                return err;\n            }\n            try {\n                const [modName, funcName] = functionName.split(\".\");\n                const api = (yield this.client.get_api_reference()).api;\n                const allTypesArray = api.modules.reduce((accumulator, element) => accumulator.concat(element.types), []);\n                const allTypesDict = {};\n                allTypesArray.forEach((element) => allTypesDict[element.name] = element);\n                const module = api.modules.find((x) => x.name === modName);\n                const func = module.functions.find((x) => x.name === funcName);\n                const param = func.params[1];\n                // If there is only context param (or AppObject second param), there is nothing to analyze\n                if (!param || param.generic_name == \"AppObject\") {\n                    return err;\n                }\n                const paramTypeInfo = allTypesDict[param.ref_name];\n                walkParameters(paramTypeInfo, params, \"\");\n                function walkParameters(valueTypeInfo, value, path) {\n                    switch (valueTypeInfo.type) {\n                        case \"Array\":\n                            if (Array.isArray(value)) {\n                                value.forEach(v => walkParameters(valueTypeInfo.array_item, v, `${path}[i]`));\n                            }\n                            break;\n                        case \"Struct\":\n                            valueTypeInfo.struct_fields.forEach((sf) => walkParameters(sf, value[sf.name], path ? `${path}.${sf.name}` : sf.name));\n                            break;\n                        case \"Optional\":\n                            if (value) {\n                                walkParameters(valueTypeInfo.optional_inner, value, path);\n                            }\n                            break;\n                        case \"Ref\":\n                            if (valueTypeInfo.ref_name != \"Value\" &&\n                                valueTypeInfo.ref_name != \"API\" &&\n                                valueTypeInfo.ref_name != \"AbiParam\") {\n                                walkParameters(allTypesDict[valueTypeInfo.ref_name], value, path);\n                            }\n                            break;\n                        case \"EnumOfTypes\":\n                            if (valueTypeInfo.enum_types.some((et) => et.name == value.type)) {\n                                return;\n                            }\n                            let parameterName = valueTypeInfo.name.toLowerCase();\n                            let helperFunctions = [];\n                            valueTypeInfo.enum_types.forEach((et) => helperFunctions.push(parameterName + et.name));\n                            err.message = `Consider using one of the helper methods (${helperFunctions.join(\", \")}) for the \\\"${path}\\\" parameter\\n` + err.message;\n                            break;\n                        default:\n                            break;\n                    }\n                }\n            }\n            catch (e) {\n                err.message = (_b = e.message) !== null && _b !== void 0 ? _b : `${e}`;\n            }\n            return err;\n        });\n    }\n    request(functionName, functionParams, responseHandler) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let context;\n            if (this.context !== null) {\n                context = this.context;\n            }\n            else {\n                context = yield (0, bin_1.getBridge)().createContext(this.config);\n                this.context = context;\n            }\n            return (0, bin_1.getBridge)()\n                .request(context, functionName, functionParams, responseHandler !== null && responseHandler !== void 0 ? responseHandler : (() => { }))\n                .catch((reason) => __awaiter(this, void 0, void 0, function* () {\n                throw yield this.resolveError(functionName, functionParams, reason);\n            }));\n        });\n    }\n    resolve_app_request(app_request_id, result) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (app_request_id) {\n                yield this.client.resolve_app_request({\n                    app_request_id,\n                    result: {\n                        type: \"Ok\",\n                        result,\n                    },\n                });\n            }\n        });\n    }\n    reject_app_request(app_request_id, error) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (app_request_id) {\n                yield this.client.resolve_app_request({\n                    app_request_id,\n                    result: {\n                        type: \"Error\",\n                        text: error.message,\n                    },\n                });\n            }\n        });\n    }\n}\nexports.TonClient = TonClient;\nTonClient._defaultConfig = {};\nTonClient._default = null;\n// Converts value to hex\nfunction toHex(value, bits) {\n    let hex;\n    if (typeof value === \"number\" || typeof value === \"bigint\") {\n        hex = value.toString(16);\n    }\n    else if (typeof value === \"string\") {\n        if (value.startsWith(\"0x\")) {\n            hex = value.substr(2);\n        }\n        else {\n            hex = decToHex(value);\n        }\n    }\n    else {\n        hex = value.toString();\n    }\n    let len = bits / 4;\n    while (hex.length > len && hex.startsWith(\"0\")) {\n        hex = hex.substr(1);\n    }\n    return hex.padStart(len, \"0\");\n}\nfunction decToHex(dec) {\n    var _a;\n    let bigNum = [];\n    for (let i = 0; i < dec.length; i += 1) {\n        const d = ((_a = dec.codePointAt(i)) !== null && _a !== void 0 ? _a : 0) - 48;\n        const mul8 = shl(bigNum, 3);\n        const mul2 = shl(bigNum, 1);\n        const mul10 = add(mul8, mul2);\n        bigNum = add(mul10, [d]);\n    }\n    let hex = \"\";\n    for (let i = bigNum.length - 1; i >= 0; i -= 1) {\n        hex += bigNum[i].toString(16).padStart(4, \"0\");\n    }\n    return hex;\n}\nfunction shl(bigNum, bits) {\n    let rest = 0;\n    const result = [];\n    for (let i = 0; i < bigNum.length; i += 1) {\n        let v = (bigNum[i] << bits) + rest;\n        result.push(v & 0xFFFF);\n        rest = (v >> 16) & 0xFFFF;\n    }\n    if (rest > 0) {\n        result.push(rest);\n    }\n    return result;\n}\nfunction add(a, b) {\n    let rest = 0;\n    const result = [];\n    const len = Math.max(a.length, b.length);\n    for (let i = 0; i < len; i += 1) {\n        let v = (i < a.length ? a[i] : 0) + (i < b.length ? b[i] : 0) + rest;\n        result.push(v & 0xFFFF);\n        rest = (v >> 16) & 0xFFFF;\n    }\n    if (rest > 0) {\n        result.push(rest);\n    }\n    return result;\n}\n//# sourceMappingURL=client.js.map\n\n//# sourceURL=webpack://simplepage/./node_modules/@tonclient/core/dist/client.js?");

/***/ }),

/***/ "./node_modules/@tonclient/core/dist/errors.js":
/*!*****************************************************!*\
  !*** ./node_modules/@tonclient/core/dist/errors.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TonClientError = void 0;\nclass TonClientError extends Error {\n    constructor(code, message, data) {\n        super(message);\n        this.code = code;\n        this.data = data;\n    }\n}\nexports.TonClientError = TonClientError;\n//# sourceMappingURL=errors.js.map\n\n//# sourceURL=webpack://simplepage/./node_modules/@tonclient/core/dist/errors.js?");

/***/ }),

/***/ "./node_modules/@tonclient/core/dist/index.js":
/*!****************************************************!*\
  !*** ./node_modules/@tonclient/core/dist/index.js ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./modules */ \"./node_modules/@tonclient/core/dist/modules.js\"), exports);\n__exportStar(__webpack_require__(/*! ./client */ \"./node_modules/@tonclient/core/dist/client.js\"), exports);\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://simplepage/./node_modules/@tonclient/core/dist/index.js?");

/***/ }),

/***/ "./node_modules/@tonclient/core/dist/modules.js":
/*!******************************************************!*\
  !*** ./node_modules/@tonclient/core/dist/modules.js ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";
eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.processingEventWillFetchNextBlock = exports.processingEventSendFailed = exports.processingEventDidSend = exports.processingEventWillSend = exports.processingEventFetchFirstBlockFailed = exports.processingEventWillFetchFirstBlock = exports.ProcessingErrorCode = exports.BocModule = exports.builderOpAddress = exports.builderOpCellBoc = exports.builderOpCell = exports.builderOpBitString = exports.builderOpInteger = exports.BocErrorCode = exports.bocCacheTypeUnpinned = exports.bocCacheTypePinned = exports.AbiModule = exports.messageSourceEncodingParams = exports.messageSourceEncoded = exports.stateInitSourceTvc = exports.stateInitSourceStateInit = exports.stateInitSourceMessage = exports.MessageBodyType = exports.signerSigningBox = exports.signerKeys = exports.signerExternal = exports.signerNone = exports.abiSerialized = exports.abiHandle = exports.abiJson = exports.abiContract = exports.AbiErrorCode = exports.CryptoModule = exports.resultOfAppEncryptionBoxDecrypt = exports.resultOfAppEncryptionBoxEncrypt = exports.resultOfAppEncryptionBoxGetInfo = exports.paramsOfAppEncryptionBoxDecrypt = exports.paramsOfAppEncryptionBoxEncrypt = exports.paramsOfAppEncryptionBoxGetInfo = exports.resultOfAppSigningBoxSign = exports.resultOfAppSigningBoxGetPublicKey = exports.paramsOfAppSigningBoxSign = exports.paramsOfAppSigningBoxGetPublicKey = exports.CipherMode = exports.encryptionAlgorithmAES = exports.CryptoErrorCode = exports.ClientModule = exports.appRequestResultOk = exports.appRequestResultError = exports.ClientErrorCode = void 0;\nexports.ProofsModule = exports.ProofsErrorCode = exports.DebotModule = exports.resultOfAppDebotBrowserApprove = exports.resultOfAppDebotBrowserInvokeDebot = exports.resultOfAppDebotBrowserGetSigningBox = exports.resultOfAppDebotBrowserInput = exports.paramsOfAppDebotBrowserApprove = exports.paramsOfAppDebotBrowserSend = exports.paramsOfAppDebotBrowserInvokeDebot = exports.paramsOfAppDebotBrowserGetSigningBox = exports.paramsOfAppDebotBrowserInput = exports.paramsOfAppDebotBrowserShowAction = exports.paramsOfAppDebotBrowserSwitchCompleted = exports.paramsOfAppDebotBrowserSwitch = exports.paramsOfAppDebotBrowserLog = exports.debotActivityTransaction = exports.DebotErrorCode = exports.NetModule = exports.AggregationFn = exports.paramsOfQueryOperationQueryCounterparties = exports.paramsOfQueryOperationAggregateCollection = exports.paramsOfQueryOperationWaitForCollection = exports.paramsOfQueryOperationQueryCollection = exports.SortDirection = exports.NetErrorCode = exports.TvmModule = exports.accountForExecutorAccount = exports.accountForExecutorUninit = exports.accountForExecutorNone = exports.TvmErrorCode = exports.UtilsModule = exports.AccountAddressType = exports.addressStringFormatBase64 = exports.addressStringFormatHex = exports.addressStringFormatAccountId = exports.ProcessingModule = exports.processingEventMessageExpired = exports.processingEventFetchNextBlockFailed = void 0;\n// client module\nvar ClientErrorCode;\n(function (ClientErrorCode) {\n    ClientErrorCode[ClientErrorCode[\"NotImplemented\"] = 1] = \"NotImplemented\";\n    ClientErrorCode[ClientErrorCode[\"InvalidHex\"] = 2] = \"InvalidHex\";\n    ClientErrorCode[ClientErrorCode[\"InvalidBase64\"] = 3] = \"InvalidBase64\";\n    ClientErrorCode[ClientErrorCode[\"InvalidAddress\"] = 4] = \"InvalidAddress\";\n    ClientErrorCode[ClientErrorCode[\"CallbackParamsCantBeConvertedToJson\"] = 5] = \"CallbackParamsCantBeConvertedToJson\";\n    ClientErrorCode[ClientErrorCode[\"WebsocketConnectError\"] = 6] = \"WebsocketConnectError\";\n    ClientErrorCode[ClientErrorCode[\"WebsocketReceiveError\"] = 7] = \"WebsocketReceiveError\";\n    ClientErrorCode[ClientErrorCode[\"WebsocketSendError\"] = 8] = \"WebsocketSendError\";\n    ClientErrorCode[ClientErrorCode[\"HttpClientCreateError\"] = 9] = \"HttpClientCreateError\";\n    ClientErrorCode[ClientErrorCode[\"HttpRequestCreateError\"] = 10] = \"HttpRequestCreateError\";\n    ClientErrorCode[ClientErrorCode[\"HttpRequestSendError\"] = 11] = \"HttpRequestSendError\";\n    ClientErrorCode[ClientErrorCode[\"HttpRequestParseError\"] = 12] = \"HttpRequestParseError\";\n    ClientErrorCode[ClientErrorCode[\"CallbackNotRegistered\"] = 13] = \"CallbackNotRegistered\";\n    ClientErrorCode[ClientErrorCode[\"NetModuleNotInit\"] = 14] = \"NetModuleNotInit\";\n    ClientErrorCode[ClientErrorCode[\"InvalidConfig\"] = 15] = \"InvalidConfig\";\n    ClientErrorCode[ClientErrorCode[\"CannotCreateRuntime\"] = 16] = \"CannotCreateRuntime\";\n    ClientErrorCode[ClientErrorCode[\"InvalidContextHandle\"] = 17] = \"InvalidContextHandle\";\n    ClientErrorCode[ClientErrorCode[\"CannotSerializeResult\"] = 18] = \"CannotSerializeResult\";\n    ClientErrorCode[ClientErrorCode[\"CannotSerializeError\"] = 19] = \"CannotSerializeError\";\n    ClientErrorCode[ClientErrorCode[\"CannotConvertJsValueToJson\"] = 20] = \"CannotConvertJsValueToJson\";\n    ClientErrorCode[ClientErrorCode[\"CannotReceiveSpawnedResult\"] = 21] = \"CannotReceiveSpawnedResult\";\n    ClientErrorCode[ClientErrorCode[\"SetTimerError\"] = 22] = \"SetTimerError\";\n    ClientErrorCode[ClientErrorCode[\"InvalidParams\"] = 23] = \"InvalidParams\";\n    ClientErrorCode[ClientErrorCode[\"ContractsAddressConversionFailed\"] = 24] = \"ContractsAddressConversionFailed\";\n    ClientErrorCode[ClientErrorCode[\"UnknownFunction\"] = 25] = \"UnknownFunction\";\n    ClientErrorCode[ClientErrorCode[\"AppRequestError\"] = 26] = \"AppRequestError\";\n    ClientErrorCode[ClientErrorCode[\"NoSuchRequest\"] = 27] = \"NoSuchRequest\";\n    ClientErrorCode[ClientErrorCode[\"CanNotSendRequestResult\"] = 28] = \"CanNotSendRequestResult\";\n    ClientErrorCode[ClientErrorCode[\"CanNotReceiveRequestResult\"] = 29] = \"CanNotReceiveRequestResult\";\n    ClientErrorCode[ClientErrorCode[\"CanNotParseRequestResult\"] = 30] = \"CanNotParseRequestResult\";\n    ClientErrorCode[ClientErrorCode[\"UnexpectedCallbackResponse\"] = 31] = \"UnexpectedCallbackResponse\";\n    ClientErrorCode[ClientErrorCode[\"CanNotParseNumber\"] = 32] = \"CanNotParseNumber\";\n    ClientErrorCode[ClientErrorCode[\"InternalError\"] = 33] = \"InternalError\";\n    ClientErrorCode[ClientErrorCode[\"InvalidHandle\"] = 34] = \"InvalidHandle\";\n    ClientErrorCode[ClientErrorCode[\"LocalStorageError\"] = 35] = \"LocalStorageError\";\n})(ClientErrorCode = exports.ClientErrorCode || (exports.ClientErrorCode = {}));\nfunction appRequestResultError(text) {\n    return {\n        type: 'Error',\n        text,\n    };\n}\nexports.appRequestResultError = appRequestResultError;\nfunction appRequestResultOk(result) {\n    return {\n        type: 'Ok',\n        result,\n    };\n}\nexports.appRequestResultOk = appRequestResultOk;\n/**\n * Provides information about library.\n */\nclass ClientModule {\n    constructor(client) {\n        this.client = client;\n    }\n    /**\n     * Returns Core Library API reference\n     * @returns ResultOfGetApiReference\n     */\n    get_api_reference() {\n        return this.client.request('client.get_api_reference');\n    }\n    /**\n     * Returns Core Library version\n     * @returns ResultOfVersion\n     */\n    version() {\n        return this.client.request('client.version');\n    }\n    /**\n     * Returns detailed information about this build.\n     * @returns ResultOfBuildInfo\n     */\n    build_info() {\n        return this.client.request('client.build_info');\n    }\n    /**\n     * Resolves application request processing result\n     *\n     * @param {ParamsOfResolveAppRequest} params\n     * @returns\n     */\n    resolve_app_request(params) {\n        return this.client.request('client.resolve_app_request', params);\n    }\n}\nexports.ClientModule = ClientModule;\n// crypto module\nvar CryptoErrorCode;\n(function (CryptoErrorCode) {\n    CryptoErrorCode[CryptoErrorCode[\"InvalidPublicKey\"] = 100] = \"InvalidPublicKey\";\n    CryptoErrorCode[CryptoErrorCode[\"InvalidSecretKey\"] = 101] = \"InvalidSecretKey\";\n    CryptoErrorCode[CryptoErrorCode[\"InvalidKey\"] = 102] = \"InvalidKey\";\n    CryptoErrorCode[CryptoErrorCode[\"InvalidFactorizeChallenge\"] = 106] = \"InvalidFactorizeChallenge\";\n    CryptoErrorCode[CryptoErrorCode[\"InvalidBigInt\"] = 107] = \"InvalidBigInt\";\n    CryptoErrorCode[CryptoErrorCode[\"ScryptFailed\"] = 108] = \"ScryptFailed\";\n    CryptoErrorCode[CryptoErrorCode[\"InvalidKeySize\"] = 109] = \"InvalidKeySize\";\n    CryptoErrorCode[CryptoErrorCode[\"NaclSecretBoxFailed\"] = 110] = \"NaclSecretBoxFailed\";\n    CryptoErrorCode[CryptoErrorCode[\"NaclBoxFailed\"] = 111] = \"NaclBoxFailed\";\n    CryptoErrorCode[CryptoErrorCode[\"NaclSignFailed\"] = 112] = \"NaclSignFailed\";\n    CryptoErrorCode[CryptoErrorCode[\"Bip39InvalidEntropy\"] = 113] = \"Bip39InvalidEntropy\";\n    CryptoErrorCode[CryptoErrorCode[\"Bip39InvalidPhrase\"] = 114] = \"Bip39InvalidPhrase\";\n    CryptoErrorCode[CryptoErrorCode[\"Bip32InvalidKey\"] = 115] = \"Bip32InvalidKey\";\n    CryptoErrorCode[CryptoErrorCode[\"Bip32InvalidDerivePath\"] = 116] = \"Bip32InvalidDerivePath\";\n    CryptoErrorCode[CryptoErrorCode[\"Bip39InvalidDictionary\"] = 117] = \"Bip39InvalidDictionary\";\n    CryptoErrorCode[CryptoErrorCode[\"Bip39InvalidWordCount\"] = 118] = \"Bip39InvalidWordCount\";\n    CryptoErrorCode[CryptoErrorCode[\"MnemonicGenerationFailed\"] = 119] = \"MnemonicGenerationFailed\";\n    CryptoErrorCode[CryptoErrorCode[\"MnemonicFromEntropyFailed\"] = 120] = \"MnemonicFromEntropyFailed\";\n    CryptoErrorCode[CryptoErrorCode[\"SigningBoxNotRegistered\"] = 121] = \"SigningBoxNotRegistered\";\n    CryptoErrorCode[CryptoErrorCode[\"InvalidSignature\"] = 122] = \"InvalidSignature\";\n    CryptoErrorCode[CryptoErrorCode[\"EncryptionBoxNotRegistered\"] = 123] = \"EncryptionBoxNotRegistered\";\n    CryptoErrorCode[CryptoErrorCode[\"InvalidIvSize\"] = 124] = \"InvalidIvSize\";\n    CryptoErrorCode[CryptoErrorCode[\"UnsupportedCipherMode\"] = 125] = \"UnsupportedCipherMode\";\n    CryptoErrorCode[CryptoErrorCode[\"CannotCreateCipher\"] = 126] = \"CannotCreateCipher\";\n    CryptoErrorCode[CryptoErrorCode[\"EncryptDataError\"] = 127] = \"EncryptDataError\";\n    CryptoErrorCode[CryptoErrorCode[\"DecryptDataError\"] = 128] = \"DecryptDataError\";\n    CryptoErrorCode[CryptoErrorCode[\"IvRequired\"] = 129] = \"IvRequired\";\n})(CryptoErrorCode = exports.CryptoErrorCode || (exports.CryptoErrorCode = {}));\nfunction encryptionAlgorithmAES(params) {\n    return Object.assign({ type: 'AES' }, params);\n}\nexports.encryptionAlgorithmAES = encryptionAlgorithmAES;\nvar CipherMode;\n(function (CipherMode) {\n    CipherMode[\"CBC\"] = \"CBC\";\n    CipherMode[\"CFB\"] = \"CFB\";\n    CipherMode[\"CTR\"] = \"CTR\";\n    CipherMode[\"ECB\"] = \"ECB\";\n    CipherMode[\"OFB\"] = \"OFB\";\n})(CipherMode = exports.CipherMode || (exports.CipherMode = {}));\nfunction paramsOfAppSigningBoxGetPublicKey() {\n    return {\n        type: 'GetPublicKey',\n    };\n}\nexports.paramsOfAppSigningBoxGetPublicKey = paramsOfAppSigningBoxGetPublicKey;\nfunction paramsOfAppSigningBoxSign(unsigned) {\n    return {\n        type: 'Sign',\n        unsigned,\n    };\n}\nexports.paramsOfAppSigningBoxSign = paramsOfAppSigningBoxSign;\nfunction resultOfAppSigningBoxGetPublicKey(public_key) {\n    return {\n        type: 'GetPublicKey',\n        public_key,\n    };\n}\nexports.resultOfAppSigningBoxGetPublicKey = resultOfAppSigningBoxGetPublicKey;\nfunction resultOfAppSigningBoxSign(signature) {\n    return {\n        type: 'Sign',\n        signature,\n    };\n}\nexports.resultOfAppSigningBoxSign = resultOfAppSigningBoxSign;\nfunction paramsOfAppEncryptionBoxGetInfo() {\n    return {\n        type: 'GetInfo',\n    };\n}\nexports.paramsOfAppEncryptionBoxGetInfo = paramsOfAppEncryptionBoxGetInfo;\nfunction paramsOfAppEncryptionBoxEncrypt(data) {\n    return {\n        type: 'Encrypt',\n        data,\n    };\n}\nexports.paramsOfAppEncryptionBoxEncrypt = paramsOfAppEncryptionBoxEncrypt;\nfunction paramsOfAppEncryptionBoxDecrypt(data) {\n    return {\n        type: 'Decrypt',\n        data,\n    };\n}\nexports.paramsOfAppEncryptionBoxDecrypt = paramsOfAppEncryptionBoxDecrypt;\nfunction resultOfAppEncryptionBoxGetInfo(info) {\n    return {\n        type: 'GetInfo',\n        info,\n    };\n}\nexports.resultOfAppEncryptionBoxGetInfo = resultOfAppEncryptionBoxGetInfo;\nfunction resultOfAppEncryptionBoxEncrypt(data) {\n    return {\n        type: 'Encrypt',\n        data,\n    };\n}\nexports.resultOfAppEncryptionBoxEncrypt = resultOfAppEncryptionBoxEncrypt;\nfunction resultOfAppEncryptionBoxDecrypt(data) {\n    return {\n        type: 'Decrypt',\n        data,\n    };\n}\nexports.resultOfAppEncryptionBoxDecrypt = resultOfAppEncryptionBoxDecrypt;\nfunction dispatchAppSigningBox(obj, params, app_request_id, client) {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            let result = {};\n            switch (params.type) {\n                case 'GetPublicKey':\n                    result = yield obj.get_public_key();\n                    break;\n                case 'Sign':\n                    result = yield obj.sign(params);\n                    break;\n            }\n            client.resolve_app_request(app_request_id, Object.assign({ type: params.type }, result));\n        }\n        catch (error) {\n            client.reject_app_request(app_request_id, error);\n        }\n    });\n}\nfunction dispatchAppEncryptionBox(obj, params, app_request_id, client) {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            let result = {};\n            switch (params.type) {\n                case 'GetInfo':\n                    result = yield obj.get_info();\n                    break;\n                case 'Encrypt':\n                    result = yield obj.encrypt(params);\n                    break;\n                case 'Decrypt':\n                    result = yield obj.decrypt(params);\n                    break;\n            }\n            client.resolve_app_request(app_request_id, Object.assign({ type: params.type }, result));\n        }\n        catch (error) {\n            client.reject_app_request(app_request_id, error);\n        }\n    });\n}\n/**\n * Crypto functions.\n */\nclass CryptoModule {\n    constructor(client) {\n        this.client = client;\n    }\n    /**\n     * Integer factorization\n     *\n     * @remarks\n     * Performs prime factorization – decomposition of a composite number\n     * into a product of smaller prime integers (factors).\n     * See [https://en.wikipedia.org/wiki/Integer_factorization]\n     *\n     * @param {ParamsOfFactorize} params\n     * @returns ResultOfFactorize\n     */\n    factorize(params) {\n        return this.client.request('crypto.factorize', params);\n    }\n    /**\n     * Modular exponentiation\n     *\n     * @remarks\n     * Performs modular exponentiation for big integers (`base`^`exponent` mod `modulus`).\n     * See [https://en.wikipedia.org/wiki/Modular_exponentiation]\n     *\n     * @param {ParamsOfModularPower} params\n     * @returns ResultOfModularPower\n     */\n    modular_power(params) {\n        return this.client.request('crypto.modular_power', params);\n    }\n    /**\n     * Calculates CRC16 using TON algorithm.\n     *\n     * @param {ParamsOfTonCrc16} params\n     * @returns ResultOfTonCrc16\n     */\n    ton_crc16(params) {\n        return this.client.request('crypto.ton_crc16', params);\n    }\n    /**\n     * Generates random byte array of the specified length and returns it in `base64` format\n     *\n     * @param {ParamsOfGenerateRandomBytes} params\n     * @returns ResultOfGenerateRandomBytes\n     */\n    generate_random_bytes(params) {\n        return this.client.request('crypto.generate_random_bytes', params);\n    }\n    /**\n     * Converts public key to ton safe_format\n     *\n     * @param {ParamsOfConvertPublicKeyToTonSafeFormat} params\n     * @returns ResultOfConvertPublicKeyToTonSafeFormat\n     */\n    convert_public_key_to_ton_safe_format(params) {\n        return this.client.request('crypto.convert_public_key_to_ton_safe_format', params);\n    }\n    /**\n     * Generates random ed25519 key pair.\n     * @returns KeyPair\n     */\n    generate_random_sign_keys() {\n        return this.client.request('crypto.generate_random_sign_keys');\n    }\n    /**\n     * Signs a data using the provided keys.\n     *\n     * @param {ParamsOfSign} params\n     * @returns ResultOfSign\n     */\n    sign(params) {\n        return this.client.request('crypto.sign', params);\n    }\n    /**\n     * Verifies signed data using the provided public key. Raises error if verification is failed.\n     *\n     * @param {ParamsOfVerifySignature} params\n     * @returns ResultOfVerifySignature\n     */\n    verify_signature(params) {\n        return this.client.request('crypto.verify_signature', params);\n    }\n    /**\n     * Calculates SHA256 hash of the specified data.\n     *\n     * @param {ParamsOfHash} params\n     * @returns ResultOfHash\n     */\n    sha256(params) {\n        return this.client.request('crypto.sha256', params);\n    }\n    /**\n     * Calculates SHA512 hash of the specified data.\n     *\n     * @param {ParamsOfHash} params\n     * @returns ResultOfHash\n     */\n    sha512(params) {\n        return this.client.request('crypto.sha512', params);\n    }\n    /**\n     * Perform `scrypt` encryption\n     *\n     * @remarks\n     * Derives key from `password` and `key` using `scrypt` algorithm.\n     * See [https://en.wikipedia.org/wiki/Scrypt].\n     *\n     * # Arguments\n     * - `log_n` - The log2 of the Scrypt parameter `N`\n     * - `r` - The Scrypt parameter `r`\n     * - `p` - The Scrypt parameter `p`\n     * # Conditions\n     * - `log_n` must be less than `64`\n     * - `r` must be greater than `0` and less than or equal to `4294967295`\n     * - `p` must be greater than `0` and less than `4294967295`\n     * # Recommended values sufficient for most use-cases\n     * - `log_n = 15` (`n = 32768`)\n     * - `r = 8`\n     * - `p = 1`\n     *\n     * @param {ParamsOfScrypt} params\n     * @returns ResultOfScrypt\n     */\n    scrypt(params) {\n        return this.client.request('crypto.scrypt', params);\n    }\n    /**\n     * Generates a key pair for signing from the secret key\n     *\n     * @remarks\n     * **NOTE:** In the result the secret key is actually the concatenation\n     * of secret and public keys (128 symbols hex string) by design of [NaCL](http://nacl.cr.yp.to/sign.html).\n     * See also [the stackexchange question](https://crypto.stackexchange.com/questions/54353/).\n     *\n     * @param {ParamsOfNaclSignKeyPairFromSecret} params\n     * @returns KeyPair\n     */\n    nacl_sign_keypair_from_secret_key(params) {\n        return this.client.request('crypto.nacl_sign_keypair_from_secret_key', params);\n    }\n    /**\n     * Signs data using the signer's secret key.\n     *\n     * @param {ParamsOfNaclSign} params\n     * @returns ResultOfNaclSign\n     */\n    nacl_sign(params) {\n        return this.client.request('crypto.nacl_sign', params);\n    }\n    /**\n     * Verifies the signature and returns the unsigned message\n     *\n     * @remarks\n     * Verifies the signature in `signed` using the signer's public key `public`\n     * and returns the message `unsigned`.\n     *\n     * If the signature fails verification, crypto_sign_open raises an exception.\n     *\n     * @param {ParamsOfNaclSignOpen} params\n     * @returns ResultOfNaclSignOpen\n     */\n    nacl_sign_open(params) {\n        return this.client.request('crypto.nacl_sign_open', params);\n    }\n    /**\n     * Signs the message using the secret key and returns a signature.\n     *\n     * @remarks\n     * Signs the message `unsigned` using the secret key `secret`\n     * and returns a signature `signature`.\n     *\n     * @param {ParamsOfNaclSign} params\n     * @returns ResultOfNaclSignDetached\n     */\n    nacl_sign_detached(params) {\n        return this.client.request('crypto.nacl_sign_detached', params);\n    }\n    /**\n     * Verifies the signature with public key and `unsigned` data.\n     *\n     * @param {ParamsOfNaclSignDetachedVerify} params\n     * @returns ResultOfNaclSignDetachedVerify\n     */\n    nacl_sign_detached_verify(params) {\n        return this.client.request('crypto.nacl_sign_detached_verify', params);\n    }\n    /**\n     * Generates a random NaCl key pair\n     * @returns KeyPair\n     */\n    nacl_box_keypair() {\n        return this.client.request('crypto.nacl_box_keypair');\n    }\n    /**\n     * Generates key pair from a secret key\n     *\n     * @param {ParamsOfNaclBoxKeyPairFromSecret} params\n     * @returns KeyPair\n     */\n    nacl_box_keypair_from_secret_key(params) {\n        return this.client.request('crypto.nacl_box_keypair_from_secret_key', params);\n    }\n    /**\n     * Public key authenticated encryption\n     *\n     * @remarks\n     * Encrypt and authenticate a message using the senders secret key, the receivers public\n     * key, and a nonce.\n     *\n     * @param {ParamsOfNaclBox} params\n     * @returns ResultOfNaclBox\n     */\n    nacl_box(params) {\n        return this.client.request('crypto.nacl_box', params);\n    }\n    /**\n     * Decrypt and verify the cipher text using the receivers secret key, the senders public key, and the nonce.\n     *\n     * @param {ParamsOfNaclBoxOpen} params\n     * @returns ResultOfNaclBoxOpen\n     */\n    nacl_box_open(params) {\n        return this.client.request('crypto.nacl_box_open', params);\n    }\n    /**\n     * Encrypt and authenticate message using nonce and secret key.\n     *\n     * @param {ParamsOfNaclSecretBox} params\n     * @returns ResultOfNaclBox\n     */\n    nacl_secret_box(params) {\n        return this.client.request('crypto.nacl_secret_box', params);\n    }\n    /**\n     * Decrypts and verifies cipher text using `nonce` and secret `key`.\n     *\n     * @param {ParamsOfNaclSecretBoxOpen} params\n     * @returns ResultOfNaclBoxOpen\n     */\n    nacl_secret_box_open(params) {\n        return this.client.request('crypto.nacl_secret_box_open', params);\n    }\n    /**\n     * Prints the list of words from the specified dictionary\n     *\n     * @param {ParamsOfMnemonicWords} params\n     * @returns ResultOfMnemonicWords\n     */\n    mnemonic_words(params) {\n        return this.client.request('crypto.mnemonic_words', params);\n    }\n    /**\n     * Generates a random mnemonic\n     *\n     * @remarks\n     * Generates a random mnemonic from the specified dictionary and word count\n     *\n     * @param {ParamsOfMnemonicFromRandom} params\n     * @returns ResultOfMnemonicFromRandom\n     */\n    mnemonic_from_random(params) {\n        return this.client.request('crypto.mnemonic_from_random', params);\n    }\n    /**\n     * Generates mnemonic from pre-generated entropy\n     *\n     * @param {ParamsOfMnemonicFromEntropy} params\n     * @returns ResultOfMnemonicFromEntropy\n     */\n    mnemonic_from_entropy(params) {\n        return this.client.request('crypto.mnemonic_from_entropy', params);\n    }\n    /**\n     * Validates a mnemonic phrase\n     *\n     * @remarks\n     * The phrase supplied will be checked for word length and validated according to the checksum\n     * specified in BIP0039.\n     *\n     * @param {ParamsOfMnemonicVerify} params\n     * @returns ResultOfMnemonicVerify\n     */\n    mnemonic_verify(params) {\n        return this.client.request('crypto.mnemonic_verify', params);\n    }\n    /**\n     * Derives a key pair for signing from the seed phrase\n     *\n     * @remarks\n     * Validates the seed phrase, generates master key and then derives\n     * the key pair from the master key and the specified path\n     *\n     * @param {ParamsOfMnemonicDeriveSignKeys} params\n     * @returns KeyPair\n     */\n    mnemonic_derive_sign_keys(params) {\n        return this.client.request('crypto.mnemonic_derive_sign_keys', params);\n    }\n    /**\n     * Generates an extended master private key that will be the root for all the derived keys\n     *\n     * @param {ParamsOfHDKeyXPrvFromMnemonic} params\n     * @returns ResultOfHDKeyXPrvFromMnemonic\n     */\n    hdkey_xprv_from_mnemonic(params) {\n        return this.client.request('crypto.hdkey_xprv_from_mnemonic', params);\n    }\n    /**\n     * Returns extended private key derived from the specified extended private key and child index\n     *\n     * @param {ParamsOfHDKeyDeriveFromXPrv} params\n     * @returns ResultOfHDKeyDeriveFromXPrv\n     */\n    hdkey_derive_from_xprv(params) {\n        return this.client.request('crypto.hdkey_derive_from_xprv', params);\n    }\n    /**\n     * Derives the extended private key from the specified key and path\n     *\n     * @param {ParamsOfHDKeyDeriveFromXPrvPath} params\n     * @returns ResultOfHDKeyDeriveFromXPrvPath\n     */\n    hdkey_derive_from_xprv_path(params) {\n        return this.client.request('crypto.hdkey_derive_from_xprv_path', params);\n    }\n    /**\n     * Extracts the private key from the serialized extended private key\n     *\n     * @param {ParamsOfHDKeySecretFromXPrv} params\n     * @returns ResultOfHDKeySecretFromXPrv\n     */\n    hdkey_secret_from_xprv(params) {\n        return this.client.request('crypto.hdkey_secret_from_xprv', params);\n    }\n    /**\n     * Extracts the public key from the serialized extended private key\n     *\n     * @param {ParamsOfHDKeyPublicFromXPrv} params\n     * @returns ResultOfHDKeyPublicFromXPrv\n     */\n    hdkey_public_from_xprv(params) {\n        return this.client.request('crypto.hdkey_public_from_xprv', params);\n    }\n    /**\n     * Performs symmetric `chacha20` encryption.\n     *\n     * @param {ParamsOfChaCha20} params\n     * @returns ResultOfChaCha20\n     */\n    chacha20(params) {\n        return this.client.request('crypto.chacha20', params);\n    }\n    /**\n     * Register an application implemented signing box.\n     * @returns RegisteredSigningBox\n     */\n    register_signing_box(obj) {\n        return this.client.request('crypto.register_signing_box', undefined, (params, responseType) => {\n            if (responseType === 3) {\n                dispatchAppSigningBox(obj, params.request_data, params.app_request_id, this.client);\n            }\n            else if (responseType === 4) {\n                dispatchAppSigningBox(obj, params, null, this.client);\n            }\n        });\n    }\n    /**\n     * Creates a default signing box implementation.\n     *\n     * @param {KeyPair} params\n     * @returns RegisteredSigningBox\n     */\n    get_signing_box(params) {\n        return this.client.request('crypto.get_signing_box', params);\n    }\n    /**\n     * Returns public key of signing key pair.\n     *\n     * @param {RegisteredSigningBox} params\n     * @returns ResultOfSigningBoxGetPublicKey\n     */\n    signing_box_get_public_key(params) {\n        return this.client.request('crypto.signing_box_get_public_key', params);\n    }\n    /**\n     * Returns signed user data.\n     *\n     * @param {ParamsOfSigningBoxSign} params\n     * @returns ResultOfSigningBoxSign\n     */\n    signing_box_sign(params) {\n        return this.client.request('crypto.signing_box_sign', params);\n    }\n    /**\n     * Removes signing box from SDK.\n     *\n     * @param {RegisteredSigningBox} params\n     * @returns\n     */\n    remove_signing_box(params) {\n        return this.client.request('crypto.remove_signing_box', params);\n    }\n    /**\n     * Register an application implemented encryption box.\n     * @returns RegisteredEncryptionBox\n     */\n    register_encryption_box(obj) {\n        return this.client.request('crypto.register_encryption_box', undefined, (params, responseType) => {\n            if (responseType === 3) {\n                dispatchAppEncryptionBox(obj, params.request_data, params.app_request_id, this.client);\n            }\n            else if (responseType === 4) {\n                dispatchAppEncryptionBox(obj, params, null, this.client);\n            }\n        });\n    }\n    /**\n     * Removes encryption box from SDK\n     *\n     * @param {RegisteredEncryptionBox} params\n     * @returns\n     */\n    remove_encryption_box(params) {\n        return this.client.request('crypto.remove_encryption_box', params);\n    }\n    /**\n     * Queries info from the given encryption box\n     *\n     * @param {ParamsOfEncryptionBoxGetInfo} params\n     * @returns ResultOfEncryptionBoxGetInfo\n     */\n    encryption_box_get_info(params) {\n        return this.client.request('crypto.encryption_box_get_info', params);\n    }\n    /**\n     * Encrypts data using given encryption box Note.\n     *\n     * @remarks\n     * Block cipher algorithms pad data to cipher block size so encrypted data can be longer then original data. Client should store the original data size after encryption and use it after\n     * decryption to retrieve the original data from decrypted data.\n     *\n     * @param {ParamsOfEncryptionBoxEncrypt} params\n     * @returns ResultOfEncryptionBoxEncrypt\n     */\n    encryption_box_encrypt(params) {\n        return this.client.request('crypto.encryption_box_encrypt', params);\n    }\n    /**\n     * Decrypts data using given encryption box Note.\n     *\n     * @remarks\n     * Block cipher algorithms pad data to cipher block size so encrypted data can be longer then original data. Client should store the original data size after encryption and use it after\n     * decryption to retrieve the original data from decrypted data.\n     *\n     * @param {ParamsOfEncryptionBoxDecrypt} params\n     * @returns ResultOfEncryptionBoxDecrypt\n     */\n    encryption_box_decrypt(params) {\n        return this.client.request('crypto.encryption_box_decrypt', params);\n    }\n    /**\n     * Creates encryption box with specified algorithm\n     *\n     * @param {ParamsOfCreateEncryptionBox} params\n     * @returns RegisteredEncryptionBox\n     */\n    create_encryption_box(params) {\n        return this.client.request('crypto.create_encryption_box', params);\n    }\n}\nexports.CryptoModule = CryptoModule;\n// abi module\nvar AbiErrorCode;\n(function (AbiErrorCode) {\n    AbiErrorCode[AbiErrorCode[\"RequiredAddressMissingForEncodeMessage\"] = 301] = \"RequiredAddressMissingForEncodeMessage\";\n    AbiErrorCode[AbiErrorCode[\"RequiredCallSetMissingForEncodeMessage\"] = 302] = \"RequiredCallSetMissingForEncodeMessage\";\n    AbiErrorCode[AbiErrorCode[\"InvalidJson\"] = 303] = \"InvalidJson\";\n    AbiErrorCode[AbiErrorCode[\"InvalidMessage\"] = 304] = \"InvalidMessage\";\n    AbiErrorCode[AbiErrorCode[\"EncodeDeployMessageFailed\"] = 305] = \"EncodeDeployMessageFailed\";\n    AbiErrorCode[AbiErrorCode[\"EncodeRunMessageFailed\"] = 306] = \"EncodeRunMessageFailed\";\n    AbiErrorCode[AbiErrorCode[\"AttachSignatureFailed\"] = 307] = \"AttachSignatureFailed\";\n    AbiErrorCode[AbiErrorCode[\"InvalidTvcImage\"] = 308] = \"InvalidTvcImage\";\n    AbiErrorCode[AbiErrorCode[\"RequiredPublicKeyMissingForFunctionHeader\"] = 309] = \"RequiredPublicKeyMissingForFunctionHeader\";\n    AbiErrorCode[AbiErrorCode[\"InvalidSigner\"] = 310] = \"InvalidSigner\";\n    AbiErrorCode[AbiErrorCode[\"InvalidAbi\"] = 311] = \"InvalidAbi\";\n    AbiErrorCode[AbiErrorCode[\"InvalidFunctionId\"] = 312] = \"InvalidFunctionId\";\n    AbiErrorCode[AbiErrorCode[\"InvalidData\"] = 313] = \"InvalidData\";\n    AbiErrorCode[AbiErrorCode[\"EncodeInitialDataFailed\"] = 314] = \"EncodeInitialDataFailed\";\n})(AbiErrorCode = exports.AbiErrorCode || (exports.AbiErrorCode = {}));\nfunction abiContract(value) {\n    return {\n        type: 'Contract',\n        value,\n    };\n}\nexports.abiContract = abiContract;\nfunction abiJson(value) {\n    return {\n        type: 'Json',\n        value,\n    };\n}\nexports.abiJson = abiJson;\nfunction abiHandle(value) {\n    return {\n        type: 'Handle',\n        value,\n    };\n}\nexports.abiHandle = abiHandle;\nfunction abiSerialized(value) {\n    return {\n        type: 'Serialized',\n        value,\n    };\n}\nexports.abiSerialized = abiSerialized;\nfunction signerNone() {\n    return {\n        type: 'None',\n    };\n}\nexports.signerNone = signerNone;\nfunction signerExternal(public_key) {\n    return {\n        type: 'External',\n        public_key,\n    };\n}\nexports.signerExternal = signerExternal;\nfunction signerKeys(keys) {\n    return {\n        type: 'Keys',\n        keys,\n    };\n}\nexports.signerKeys = signerKeys;\nfunction signerSigningBox(handle) {\n    return {\n        type: 'SigningBox',\n        handle,\n    };\n}\nexports.signerSigningBox = signerSigningBox;\nvar MessageBodyType;\n(function (MessageBodyType) {\n    MessageBodyType[\"Input\"] = \"Input\";\n    MessageBodyType[\"Output\"] = \"Output\";\n    MessageBodyType[\"InternalOutput\"] = \"InternalOutput\";\n    MessageBodyType[\"Event\"] = \"Event\";\n})(MessageBodyType = exports.MessageBodyType || (exports.MessageBodyType = {}));\nfunction stateInitSourceMessage(source) {\n    return {\n        type: 'Message',\n        source,\n    };\n}\nexports.stateInitSourceMessage = stateInitSourceMessage;\nfunction stateInitSourceStateInit(code, data, library) {\n    return {\n        type: 'StateInit',\n        code,\n        data,\n        library,\n    };\n}\nexports.stateInitSourceStateInit = stateInitSourceStateInit;\nfunction stateInitSourceTvc(tvc, public_key, init_params) {\n    return {\n        type: 'Tvc',\n        tvc,\n        public_key,\n        init_params,\n    };\n}\nexports.stateInitSourceTvc = stateInitSourceTvc;\nfunction messageSourceEncoded(message, abi) {\n    return {\n        type: 'Encoded',\n        message,\n        abi,\n    };\n}\nexports.messageSourceEncoded = messageSourceEncoded;\nfunction messageSourceEncodingParams(params) {\n    return Object.assign({ type: 'EncodingParams' }, params);\n}\nexports.messageSourceEncodingParams = messageSourceEncodingParams;\n/**\n * Provides message encoding and decoding according to the ABI specification.\n */\nclass AbiModule {\n    constructor(client) {\n        this.client = client;\n    }\n    /**\n     * Encodes message body according to ABI function call.\n     *\n     * @param {ParamsOfEncodeMessageBody} params\n     * @returns ResultOfEncodeMessageBody\n     */\n    encode_message_body(params) {\n        return this.client.request('abi.encode_message_body', params);\n    }\n    /**\n     *\n     * @param {ParamsOfAttachSignatureToMessageBody} params\n     * @returns ResultOfAttachSignatureToMessageBody\n     */\n    attach_signature_to_message_body(params) {\n        return this.client.request('abi.attach_signature_to_message_body', params);\n    }\n    /**\n     * Encodes an ABI-compatible message\n     *\n     * @remarks\n     * Allows to encode deploy and function call messages,\n     * both signed and unsigned.\n     *\n     * Use cases include messages of any possible type:\n     * - deploy with initial function call (i.e. `constructor` or any other function that is used for some kind\n     * of initialization);\n     * - deploy without initial function call;\n     * - signed/unsigned + data for signing.\n     *\n     * `Signer` defines how the message should or shouldn't be signed:\n     *\n     * `Signer::None` creates an unsigned message. This may be needed in case of some public methods,\n     * that do not require authorization by pubkey.\n     *\n     * `Signer::External` takes public key and returns `data_to_sign` for later signing.\n     * Use `attach_signature` method with the result signature to get the signed message.\n     *\n     * `Signer::Keys` creates a signed message with provided key pair.\n     *\n     * [SOON] `Signer::SigningBox` Allows using a special interface to implement signing\n     * without private key disclosure to SDK. For instance, in case of using a cold wallet or HSM,\n     * when application calls some API to sign data.\n     *\n     * There is an optional public key can be provided in deploy set in order to substitute one\n     * in TVM file.\n     *\n     * Public key resolving priority:\n     * 1. Public key from deploy set.\n     * 2. Public key, specified in TVM file.\n     * 3. Public key, provided by signer.\n     *\n     * @param {ParamsOfEncodeMessage} params\n     * @returns ResultOfEncodeMessage\n     */\n    encode_message(params) {\n        return this.client.request('abi.encode_message', params);\n    }\n    /**\n     * Encodes an internal ABI-compatible message\n     *\n     * @remarks\n     * Allows to encode deploy and function call messages.\n     *\n     * Use cases include messages of any possible type:\n     * - deploy with initial function call (i.e. `constructor` or any other function that is used for some kind\n     * of initialization);\n     * - deploy without initial function call;\n     * - simple function call\n     *\n     * There is an optional public key can be provided in deploy set in order to substitute one\n     * in TVM file.\n     *\n     * Public key resolving priority:\n     * 1. Public key from deploy set.\n     * 2. Public key, specified in TVM file.\n     *\n     * @param {ParamsOfEncodeInternalMessage} params\n     * @returns ResultOfEncodeInternalMessage\n     */\n    encode_internal_message(params) {\n        return this.client.request('abi.encode_internal_message', params);\n    }\n    /**\n     * Combines `hex`-encoded `signature` with `base64`-encoded `unsigned_message`. Returns signed message encoded in `base64`.\n     *\n     * @param {ParamsOfAttachSignature} params\n     * @returns ResultOfAttachSignature\n     */\n    attach_signature(params) {\n        return this.client.request('abi.attach_signature', params);\n    }\n    /**\n     * Decodes message body using provided message BOC and ABI.\n     *\n     * @param {ParamsOfDecodeMessage} params\n     * @returns DecodedMessageBody\n     */\n    decode_message(params) {\n        return this.client.request('abi.decode_message', params);\n    }\n    /**\n     * Decodes message body using provided body BOC and ABI.\n     *\n     * @param {ParamsOfDecodeMessageBody} params\n     * @returns DecodedMessageBody\n     */\n    decode_message_body(params) {\n        return this.client.request('abi.decode_message_body', params);\n    }\n    /**\n     * Creates account state BOC\n     *\n     * @remarks\n     * Creates account state provided with one of these sets of data :\n     * 1. BOC of code, BOC of data, BOC of library\n     * 2. TVC (string in `base64`), keys, init params\n     *\n     * @param {ParamsOfEncodeAccount} params\n     * @returns ResultOfEncodeAccount\n     */\n    encode_account(params) {\n        return this.client.request('abi.encode_account', params);\n    }\n    /**\n     * Decodes account data using provided data BOC and ABI.\n     *\n     * @remarks\n     * Note: this feature requires ABI 2.1 or higher.\n     *\n     * @param {ParamsOfDecodeAccountData} params\n     * @returns ResultOfDecodeAccountData\n     */\n    decode_account_data(params) {\n        return this.client.request('abi.decode_account_data', params);\n    }\n    /**\n     * Updates initial account data with initial values for the contract's static variables and owner's public key. This operation is applicable only for initial account data (before deploy). If the contract is already deployed, its data doesn't contain this data section any more.\n     *\n     * @param {ParamsOfUpdateInitialData} params\n     * @returns ResultOfUpdateInitialData\n     */\n    update_initial_data(params) {\n        return this.client.request('abi.update_initial_data', params);\n    }\n    /**\n     * Encodes initial account data with initial values for the contract's static variables and owner's public key into a data BOC that can be passed to `encode_tvc` function afterwards.\n     *\n     * @remarks\n     * This function is analogue of `tvm.buildDataInit` function in Solidity.\n     *\n     * @param {ParamsOfEncodeInitialData} params\n     * @returns ResultOfEncodeInitialData\n     */\n    encode_initial_data(params) {\n        return this.client.request('abi.encode_initial_data', params);\n    }\n    /**\n     * Decodes initial values of a contract's static variables and owner's public key from account initial data This operation is applicable only for initial account data (before deploy). If the contract is already deployed, its data doesn't contain this data section any more.\n     *\n     * @param {ParamsOfDecodeInitialData} params\n     * @returns ResultOfDecodeInitialData\n     */\n    decode_initial_data(params) {\n        return this.client.request('abi.decode_initial_data', params);\n    }\n    /**\n     * Decodes BOC into JSON as a set of provided parameters.\n     *\n     * @remarks\n     * Solidity functions use ABI types for [builder encoding](https://github.com/tonlabs/TON-Solidity-Compiler/blob/master/API.md#tvmbuilderstore).\n     * The simplest way to decode such a BOC is to use ABI decoding.\n     * ABI has it own rules for fields layout in cells so manually encoded\n     * BOC can not be described in terms of ABI rules.\n     *\n     * To solve this problem we introduce a new ABI type `Ref(<ParamType>)`\n     * which allows to store `ParamType` ABI parameter in cell reference and, thus,\n     * decode manually encoded BOCs. This type is available only in `decode_boc` function\n     * and will not be available in ABI messages encoding until it is included into some ABI revision.\n     *\n     * Such BOC descriptions covers most users needs. If someone wants to decode some BOC which\n     * can not be described by these rules (i.e. BOC with TLB containing constructors of flags\n     * defining some parsing conditions) then they can decode the fields up to fork condition,\n     * check the parsed data manually, expand the parsing schema and then decode the whole BOC\n     * with the full schema.\n     *\n     * @param {ParamsOfDecodeBoc} params\n     * @returns ResultOfDecodeBoc\n     */\n    decode_boc(params) {\n        return this.client.request('abi.decode_boc', params);\n    }\n    /**\n     * Encodes given parameters in JSON into a BOC using param types from ABI.\n     *\n     * @param {ParamsOfAbiEncodeBoc} params\n     * @returns ResultOfAbiEncodeBoc\n     */\n    encode_boc(params) {\n        return this.client.request('abi.encode_boc', params);\n    }\n}\nexports.AbiModule = AbiModule;\nfunction bocCacheTypePinned(pin) {\n    return {\n        type: 'Pinned',\n        pin,\n    };\n}\nexports.bocCacheTypePinned = bocCacheTypePinned;\nfunction bocCacheTypeUnpinned() {\n    return {\n        type: 'Unpinned',\n    };\n}\nexports.bocCacheTypeUnpinned = bocCacheTypeUnpinned;\nvar BocErrorCode;\n(function (BocErrorCode) {\n    BocErrorCode[BocErrorCode[\"InvalidBoc\"] = 201] = \"InvalidBoc\";\n    BocErrorCode[BocErrorCode[\"SerializationError\"] = 202] = \"SerializationError\";\n    BocErrorCode[BocErrorCode[\"InappropriateBlock\"] = 203] = \"InappropriateBlock\";\n    BocErrorCode[BocErrorCode[\"MissingSourceBoc\"] = 204] = \"MissingSourceBoc\";\n    BocErrorCode[BocErrorCode[\"InsufficientCacheSize\"] = 205] = \"InsufficientCacheSize\";\n    BocErrorCode[BocErrorCode[\"BocRefNotFound\"] = 206] = \"BocRefNotFound\";\n    BocErrorCode[BocErrorCode[\"InvalidBocRef\"] = 207] = \"InvalidBocRef\";\n})(BocErrorCode = exports.BocErrorCode || (exports.BocErrorCode = {}));\nfunction builderOpInteger(size, value) {\n    return {\n        type: 'Integer',\n        size,\n        value,\n    };\n}\nexports.builderOpInteger = builderOpInteger;\nfunction builderOpBitString(value) {\n    return {\n        type: 'BitString',\n        value,\n    };\n}\nexports.builderOpBitString = builderOpBitString;\nfunction builderOpCell(builder) {\n    return {\n        type: 'Cell',\n        builder,\n    };\n}\nexports.builderOpCell = builderOpCell;\nfunction builderOpCellBoc(boc) {\n    return {\n        type: 'CellBoc',\n        boc,\n    };\n}\nexports.builderOpCellBoc = builderOpCellBoc;\nfunction builderOpAddress(address) {\n    return {\n        type: 'Address',\n        address,\n    };\n}\nexports.builderOpAddress = builderOpAddress;\n/**\n * BOC manipulation module.\n */\nclass BocModule {\n    constructor(client) {\n        this.client = client;\n    }\n    /**\n     * Parses message boc into a JSON\n     *\n     * @remarks\n     * JSON structure is compatible with GraphQL API message object\n     *\n     * @param {ParamsOfParse} params\n     * @returns ResultOfParse\n     */\n    parse_message(params) {\n        return this.client.request('boc.parse_message', params);\n    }\n    /**\n     * Parses transaction boc into a JSON\n     *\n     * @remarks\n     * JSON structure is compatible with GraphQL API transaction object\n     *\n     * @param {ParamsOfParse} params\n     * @returns ResultOfParse\n     */\n    parse_transaction(params) {\n        return this.client.request('boc.parse_transaction', params);\n    }\n    /**\n     * Parses account boc into a JSON\n     *\n     * @remarks\n     * JSON structure is compatible with GraphQL API account object\n     *\n     * @param {ParamsOfParse} params\n     * @returns ResultOfParse\n     */\n    parse_account(params) {\n        return this.client.request('boc.parse_account', params);\n    }\n    /**\n     * Parses block boc into a JSON\n     *\n     * @remarks\n     * JSON structure is compatible with GraphQL API block object\n     *\n     * @param {ParamsOfParse} params\n     * @returns ResultOfParse\n     */\n    parse_block(params) {\n        return this.client.request('boc.parse_block', params);\n    }\n    /**\n     * Parses shardstate boc into a JSON\n     *\n     * @remarks\n     * JSON structure is compatible with GraphQL API shardstate object\n     *\n     * @param {ParamsOfParseShardstate} params\n     * @returns ResultOfParse\n     */\n    parse_shardstate(params) {\n        return this.client.request('boc.parse_shardstate', params);\n    }\n    /**\n     * Extract blockchain configuration from key block and also from zerostate.\n     *\n     * @param {ParamsOfGetBlockchainConfig} params\n     * @returns ResultOfGetBlockchainConfig\n     */\n    get_blockchain_config(params) {\n        return this.client.request('boc.get_blockchain_config', params);\n    }\n    /**\n     * Calculates BOC root hash\n     *\n     * @param {ParamsOfGetBocHash} params\n     * @returns ResultOfGetBocHash\n     */\n    get_boc_hash(params) {\n        return this.client.request('boc.get_boc_hash', params);\n    }\n    /**\n     * Calculates BOC depth\n     *\n     * @param {ParamsOfGetBocDepth} params\n     * @returns ResultOfGetBocDepth\n     */\n    get_boc_depth(params) {\n        return this.client.request('boc.get_boc_depth', params);\n    }\n    /**\n     * Extracts code from TVC contract image\n     *\n     * @param {ParamsOfGetCodeFromTvc} params\n     * @returns ResultOfGetCodeFromTvc\n     */\n    get_code_from_tvc(params) {\n        return this.client.request('boc.get_code_from_tvc', params);\n    }\n    /**\n     * Get BOC from cache\n     *\n     * @param {ParamsOfBocCacheGet} params\n     * @returns ResultOfBocCacheGet\n     */\n    cache_get(params) {\n        return this.client.request('boc.cache_get', params);\n    }\n    /**\n     * Save BOC into cache\n     *\n     * @param {ParamsOfBocCacheSet} params\n     * @returns ResultOfBocCacheSet\n     */\n    cache_set(params) {\n        return this.client.request('boc.cache_set', params);\n    }\n    /**\n     * Unpin BOCs with specified pin.\n     *\n     * @remarks\n     * BOCs which don't have another pins will be removed from cache\n     *\n     * @param {ParamsOfBocCacheUnpin} params\n     * @returns\n     */\n    cache_unpin(params) {\n        return this.client.request('boc.cache_unpin', params);\n    }\n    /**\n     * Encodes bag of cells (BOC) with builder operations. This method provides the same functionality as Solidity TvmBuilder. Resulting BOC of this method can be passed into Solidity and C++ contracts as TvmCell type.\n     *\n     * @param {ParamsOfEncodeBoc} params\n     * @returns ResultOfEncodeBoc\n     */\n    encode_boc(params) {\n        return this.client.request('boc.encode_boc', params);\n    }\n    /**\n     * Returns the contract code's salt if it is present.\n     *\n     * @param {ParamsOfGetCodeSalt} params\n     * @returns ResultOfGetCodeSalt\n     */\n    get_code_salt(params) {\n        return this.client.request('boc.get_code_salt', params);\n    }\n    /**\n     * Sets new salt to contract code.\n     *\n     * @remarks\n     * Returns the new contract code with salt.\n     *\n     * @param {ParamsOfSetCodeSalt} params\n     * @returns ResultOfSetCodeSalt\n     */\n    set_code_salt(params) {\n        return this.client.request('boc.set_code_salt', params);\n    }\n    /**\n     * Decodes tvc into code, data, libraries and special options.\n     *\n     * @param {ParamsOfDecodeTvc} params\n     * @returns ResultOfDecodeTvc\n     */\n    decode_tvc(params) {\n        return this.client.request('boc.decode_tvc', params);\n    }\n    /**\n     * Encodes tvc from code, data, libraries ans special options (see input params)\n     *\n     * @param {ParamsOfEncodeTvc} params\n     * @returns ResultOfEncodeTvc\n     */\n    encode_tvc(params) {\n        return this.client.request('boc.encode_tvc', params);\n    }\n    /**\n     * Encodes a message\n     *\n     * @remarks\n     * Allows to encode any external inbound message.\n     *\n     * @param {ParamsOfEncodeExternalInMessage} params\n     * @returns ResultOfEncodeExternalInMessage\n     */\n    encode_external_in_message(params) {\n        return this.client.request('boc.encode_external_in_message', params);\n    }\n    /**\n     * Returns the compiler version used to compile the code.\n     *\n     * @param {ParamsOfGetCompilerVersion} params\n     * @returns ResultOfGetCompilerVersion\n     */\n    get_compiler_version(params) {\n        return this.client.request('boc.get_compiler_version', params);\n    }\n}\nexports.BocModule = BocModule;\n// processing module\nvar ProcessingErrorCode;\n(function (ProcessingErrorCode) {\n    ProcessingErrorCode[ProcessingErrorCode[\"MessageAlreadyExpired\"] = 501] = \"MessageAlreadyExpired\";\n    ProcessingErrorCode[ProcessingErrorCode[\"MessageHasNotDestinationAddress\"] = 502] = \"MessageHasNotDestinationAddress\";\n    ProcessingErrorCode[ProcessingErrorCode[\"CanNotBuildMessageCell\"] = 503] = \"CanNotBuildMessageCell\";\n    ProcessingErrorCode[ProcessingErrorCode[\"FetchBlockFailed\"] = 504] = \"FetchBlockFailed\";\n    ProcessingErrorCode[ProcessingErrorCode[\"SendMessageFailed\"] = 505] = \"SendMessageFailed\";\n    ProcessingErrorCode[ProcessingErrorCode[\"InvalidMessageBoc\"] = 506] = \"InvalidMessageBoc\";\n    ProcessingErrorCode[ProcessingErrorCode[\"MessageExpired\"] = 507] = \"MessageExpired\";\n    ProcessingErrorCode[ProcessingErrorCode[\"TransactionWaitTimeout\"] = 508] = \"TransactionWaitTimeout\";\n    ProcessingErrorCode[ProcessingErrorCode[\"InvalidBlockReceived\"] = 509] = \"InvalidBlockReceived\";\n    ProcessingErrorCode[ProcessingErrorCode[\"CanNotCheckBlockShard\"] = 510] = \"CanNotCheckBlockShard\";\n    ProcessingErrorCode[ProcessingErrorCode[\"BlockNotFound\"] = 511] = \"BlockNotFound\";\n    ProcessingErrorCode[ProcessingErrorCode[\"InvalidData\"] = 512] = \"InvalidData\";\n    ProcessingErrorCode[ProcessingErrorCode[\"ExternalSignerMustNotBeUsed\"] = 513] = \"ExternalSignerMustNotBeUsed\";\n})(ProcessingErrorCode = exports.ProcessingErrorCode || (exports.ProcessingErrorCode = {}));\nfunction processingEventWillFetchFirstBlock() {\n    return {\n        type: 'WillFetchFirstBlock',\n    };\n}\nexports.processingEventWillFetchFirstBlock = processingEventWillFetchFirstBlock;\nfunction processingEventFetchFirstBlockFailed(error) {\n    return {\n        type: 'FetchFirstBlockFailed',\n        error,\n    };\n}\nexports.processingEventFetchFirstBlockFailed = processingEventFetchFirstBlockFailed;\nfunction processingEventWillSend(shard_block_id, message_id, message) {\n    return {\n        type: 'WillSend',\n        shard_block_id,\n        message_id,\n        message,\n    };\n}\nexports.processingEventWillSend = processingEventWillSend;\nfunction processingEventDidSend(shard_block_id, message_id, message) {\n    return {\n        type: 'DidSend',\n        shard_block_id,\n        message_id,\n        message,\n    };\n}\nexports.processingEventDidSend = processingEventDidSend;\nfunction processingEventSendFailed(shard_block_id, message_id, message, error) {\n    return {\n        type: 'SendFailed',\n        shard_block_id,\n        message_id,\n        message,\n        error,\n    };\n}\nexports.processingEventSendFailed = processingEventSendFailed;\nfunction processingEventWillFetchNextBlock(shard_block_id, message_id, message) {\n    return {\n        type: 'WillFetchNextBlock',\n        shard_block_id,\n        message_id,\n        message,\n    };\n}\nexports.processingEventWillFetchNextBlock = processingEventWillFetchNextBlock;\nfunction processingEventFetchNextBlockFailed(shard_block_id, message_id, message, error) {\n    return {\n        type: 'FetchNextBlockFailed',\n        shard_block_id,\n        message_id,\n        message,\n        error,\n    };\n}\nexports.processingEventFetchNextBlockFailed = processingEventFetchNextBlockFailed;\nfunction processingEventMessageExpired(message_id, message, error) {\n    return {\n        type: 'MessageExpired',\n        message_id,\n        message,\n        error,\n    };\n}\nexports.processingEventMessageExpired = processingEventMessageExpired;\n/**\n * Message processing module.\n *\n * @remarks\n * This module incorporates functions related to complex message\n * processing scenarios.\n */\nclass ProcessingModule {\n    constructor(client) {\n        this.client = client;\n    }\n    /**\n     * Sends message to the network\n     *\n     * @remarks\n     * Sends message to the network and returns the last generated shard block of the destination account\n     * before the message was sent. It will be required later for message processing.\n     *\n     * @param {ParamsOfSendMessage} params\n     * @returns ResultOfSendMessage\n     */\n    send_message(params, responseHandler) {\n        return this.client.request('processing.send_message', params, responseHandler);\n    }\n    /**\n     * Performs monitoring of the network for the result transaction of the external inbound message processing.\n     *\n     * @remarks\n     * `send_events` enables intermediate events, such as `WillFetchNextBlock`,\n     * `FetchNextBlockFailed` that may be useful for logging of new shard blocks creation\n     * during message processing.\n     *\n     * Note, that presence of the `abi` parameter is critical for ABI\n     * compliant contracts. Message processing uses drastically\n     * different strategy for processing message for contracts which\n     * ABI includes \"expire\" header.\n     *\n     * When the ABI header `expire` is present, the processing uses\n     * `message expiration` strategy:\n     * - The maximum block gen time is set to\n     *   `message_expiration_timeout + transaction_wait_timeout`.\n     * - When maximum block gen time is reached, the processing will\n     *   be finished with `MessageExpired` error.\n     *\n     * When the ABI header `expire` isn't present or `abi` parameter\n     * isn't specified, the processing uses `transaction waiting`\n     * strategy:\n     * - The maximum block gen time is set to\n     *   `now() + transaction_wait_timeout`.\n     *\n     * - If maximum block gen time is reached and no result transaction is found,\n     * the processing will exit with an error.\n     *\n     * @param {ParamsOfWaitForTransaction} params\n     * @returns ResultOfProcessMessage\n     */\n    wait_for_transaction(params, responseHandler) {\n        return this.client.request('processing.wait_for_transaction', params, responseHandler);\n    }\n    /**\n     * Creates message, sends it to the network and monitors its processing.\n     *\n     * @remarks\n     * Creates ABI-compatible message,\n     * sends it to the network and monitors for the result transaction.\n     * Decodes the output messages' bodies.\n     *\n     * If contract's ABI includes \"expire\" header, then\n     * SDK implements retries in case of unsuccessful message delivery within the expiration\n     * timeout: SDK recreates the message, sends it and processes it again.\n     *\n     * The intermediate events, such as `WillFetchFirstBlock`, `WillSend`, `DidSend`,\n     * `WillFetchNextBlock`, etc - are switched on/off by `send_events` flag\n     * and logged into the supplied callback function.\n     *\n     * The retry configuration parameters are defined in the client's `NetworkConfig` and `AbiConfig`.\n     *\n     * If contract's ABI does not include \"expire\" header\n     * then, if no transaction is found within the network timeout (see config parameter ), exits with error.\n     *\n     * @param {ParamsOfProcessMessage} params\n     * @returns ResultOfProcessMessage\n     */\n    process_message(params, responseHandler) {\n        return this.client.request('processing.process_message', params, responseHandler);\n    }\n}\nexports.ProcessingModule = ProcessingModule;\nfunction addressStringFormatAccountId() {\n    return {\n        type: 'AccountId',\n    };\n}\nexports.addressStringFormatAccountId = addressStringFormatAccountId;\nfunction addressStringFormatHex() {\n    return {\n        type: 'Hex',\n    };\n}\nexports.addressStringFormatHex = addressStringFormatHex;\nfunction addressStringFormatBase64(url, test, bounce) {\n    return {\n        type: 'Base64',\n        url,\n        test,\n        bounce,\n    };\n}\nexports.addressStringFormatBase64 = addressStringFormatBase64;\nvar AccountAddressType;\n(function (AccountAddressType) {\n    AccountAddressType[\"AccountId\"] = \"AccountId\";\n    AccountAddressType[\"Hex\"] = \"Hex\";\n    AccountAddressType[\"Base64\"] = \"Base64\";\n})(AccountAddressType = exports.AccountAddressType || (exports.AccountAddressType = {}));\n/**\n * Misc utility Functions.\n */\nclass UtilsModule {\n    constructor(client) {\n        this.client = client;\n    }\n    /**\n     * Converts address from any TON format to any TON format\n     *\n     * @param {ParamsOfConvertAddress} params\n     * @returns ResultOfConvertAddress\n     */\n    convert_address(params) {\n        return this.client.request('utils.convert_address', params);\n    }\n    /**\n     * Validates and returns the type of any TON address.\n     *\n     * @remarks\n     * Address types are the following\n     *\n     * `0:919db8e740d50bf349df2eea03fa30c385d846b991ff5542e67098ee833fc7f7` - standard TON address most\n     * commonly used in all cases. Also called as hex address\n     * `919db8e740d50bf349df2eea03fa30c385d846b991ff5542e67098ee833fc7f7` - account ID. A part of full\n     * address. Identifies account inside particular workchain\n     * `EQCRnbjnQNUL80nfLuoD+jDDhdhGuZH/VULmcJjugz/H9wam` - base64 address. Also called \"user-friendly\".\n     * Was used at the beginning of TON. Now it is supported for compatibility\n     *\n     * @param {ParamsOfGetAddressType} params\n     * @returns ResultOfGetAddressType\n     */\n    get_address_type(params) {\n        return this.client.request('utils.get_address_type', params);\n    }\n    /**\n     * Calculates storage fee for an account over a specified time period\n     *\n     * @param {ParamsOfCalcStorageFee} params\n     * @returns ResultOfCalcStorageFee\n     */\n    calc_storage_fee(params) {\n        return this.client.request('utils.calc_storage_fee', params);\n    }\n    /**\n     * Compresses data using Zstandard algorithm\n     *\n     * @param {ParamsOfCompressZstd} params\n     * @returns ResultOfCompressZstd\n     */\n    compress_zstd(params) {\n        return this.client.request('utils.compress_zstd', params);\n    }\n    /**\n     * Decompresses data using Zstandard algorithm\n     *\n     * @param {ParamsOfDecompressZstd} params\n     * @returns ResultOfDecompressZstd\n     */\n    decompress_zstd(params) {\n        return this.client.request('utils.decompress_zstd', params);\n    }\n}\nexports.UtilsModule = UtilsModule;\n// tvm module\nvar TvmErrorCode;\n(function (TvmErrorCode) {\n    TvmErrorCode[TvmErrorCode[\"CanNotReadTransaction\"] = 401] = \"CanNotReadTransaction\";\n    TvmErrorCode[TvmErrorCode[\"CanNotReadBlockchainConfig\"] = 402] = \"CanNotReadBlockchainConfig\";\n    TvmErrorCode[TvmErrorCode[\"TransactionAborted\"] = 403] = \"TransactionAborted\";\n    TvmErrorCode[TvmErrorCode[\"InternalError\"] = 404] = \"InternalError\";\n    TvmErrorCode[TvmErrorCode[\"ActionPhaseFailed\"] = 405] = \"ActionPhaseFailed\";\n    TvmErrorCode[TvmErrorCode[\"AccountCodeMissing\"] = 406] = \"AccountCodeMissing\";\n    TvmErrorCode[TvmErrorCode[\"LowBalance\"] = 407] = \"LowBalance\";\n    TvmErrorCode[TvmErrorCode[\"AccountFrozenOrDeleted\"] = 408] = \"AccountFrozenOrDeleted\";\n    TvmErrorCode[TvmErrorCode[\"AccountMissing\"] = 409] = \"AccountMissing\";\n    TvmErrorCode[TvmErrorCode[\"UnknownExecutionError\"] = 410] = \"UnknownExecutionError\";\n    TvmErrorCode[TvmErrorCode[\"InvalidInputStack\"] = 411] = \"InvalidInputStack\";\n    TvmErrorCode[TvmErrorCode[\"InvalidAccountBoc\"] = 412] = \"InvalidAccountBoc\";\n    TvmErrorCode[TvmErrorCode[\"InvalidMessageType\"] = 413] = \"InvalidMessageType\";\n    TvmErrorCode[TvmErrorCode[\"ContractExecutionError\"] = 414] = \"ContractExecutionError\";\n})(TvmErrorCode = exports.TvmErrorCode || (exports.TvmErrorCode = {}));\nfunction accountForExecutorNone() {\n    return {\n        type: 'None',\n    };\n}\nexports.accountForExecutorNone = accountForExecutorNone;\nfunction accountForExecutorUninit() {\n    return {\n        type: 'Uninit',\n    };\n}\nexports.accountForExecutorUninit = accountForExecutorUninit;\nfunction accountForExecutorAccount(boc, unlimited_balance) {\n    return {\n        type: 'Account',\n        boc,\n        unlimited_balance,\n    };\n}\nexports.accountForExecutorAccount = accountForExecutorAccount;\n/**\n */\nclass TvmModule {\n    constructor(client) {\n        this.client = client;\n    }\n    /**\n     * Emulates all the phases of contract execution locally\n     *\n     * @remarks\n     * Performs all the phases of contract execution on Transaction Executor -\n     * the same component that is used on Validator Nodes.\n     *\n     * Can be used for contract debugging, to find out the reason why a message was not delivered successfully.\n     * Validators throw away the failed external inbound messages (if they failed bedore `ACCEPT`) in the real network.\n     * This is why these messages are impossible to debug in the real network.\n     * With the help of run_executor you can do that. In fact, `process_message` function\n     * performs local check with `run_executor` if there was no transaction as a result of processing\n     * and returns the error, if there is one.\n     *\n     * Another use case to use `run_executor` is to estimate fees for message execution.\n     * Set  `AccountForExecutor::Account.unlimited_balance`\n     * to `true` so that emulation will not depend on the actual balance.\n     * This may be needed to calculate deploy fees for an account that does not exist yet.\n     * JSON with fees is in `fees` field of the result.\n     *\n     * One more use case - you can produce the sequence of operations,\n     * thus emulating the sequential contract calls locally.\n     * And so on.\n     *\n     * Transaction executor requires account BOC (bag of cells) as a parameter.\n     * To get the account BOC - use `net.query` method to download it from GraphQL API\n     * (field `boc` of `account`) or generate it with `abi.encode_account` method.\n     *\n     * Also it requires message BOC. To get the message BOC - use `abi.encode_message` or `abi.encode_internal_message`.\n     *\n     * If you need this emulation to be as precise as possible (for instance - emulate transaction\n     * with particular lt in particular block or use particular blockchain config,\n     * downloaded from a particular key block - then specify `execution_options` parameter.\n     *\n     * If you need to see the aborted transaction as a result, not as an error, set `skip_transaction_check` to `true`.\n     *\n     * @param {ParamsOfRunExecutor} params\n     * @returns ResultOfRunExecutor\n     */\n    run_executor(params) {\n        return this.client.request('tvm.run_executor', params);\n    }\n    /**\n     * Executes get-methods of ABI-compatible contracts\n     *\n     * @remarks\n     * Performs only a part of compute phase of transaction execution\n     * that is used to run get-methods of ABI-compatible contracts.\n     *\n     * If you try to run get-methods with `run_executor` you will get an error, because it checks ACCEPT and exits\n     * if there is none, which is actually true for get-methods.\n     *\n     *  To get the account BOC (bag of cells) - use `net.query` method to download it from GraphQL API\n     * (field `boc` of `account`) or generate it with `abi.encode_account method`.\n     * To get the message BOC - use `abi.encode_message` or prepare it any other way, for instance, with FIFT script.\n     *\n     * Attention! Updated account state is produces as well, but only\n     * `account_state.storage.state.data`  part of the BOC is updated.\n     *\n     * @param {ParamsOfRunTvm} params\n     * @returns ResultOfRunTvm\n     */\n    run_tvm(params) {\n        return this.client.request('tvm.run_tvm', params);\n    }\n    /**\n     * Executes a get-method of FIFT contract\n     *\n     * @remarks\n     * Executes a get-method of FIFT contract that fulfills the smc-guidelines https://test.ton.org/smc-guidelines.txt\n     * and returns the result data from TVM's stack\n     *\n     * @param {ParamsOfRunGet} params\n     * @returns ResultOfRunGet\n     */\n    run_get(params) {\n        return this.client.request('tvm.run_get', params);\n    }\n}\nexports.TvmModule = TvmModule;\n// net module\nvar NetErrorCode;\n(function (NetErrorCode) {\n    NetErrorCode[NetErrorCode[\"QueryFailed\"] = 601] = \"QueryFailed\";\n    NetErrorCode[NetErrorCode[\"SubscribeFailed\"] = 602] = \"SubscribeFailed\";\n    NetErrorCode[NetErrorCode[\"WaitForFailed\"] = 603] = \"WaitForFailed\";\n    NetErrorCode[NetErrorCode[\"GetSubscriptionResultFailed\"] = 604] = \"GetSubscriptionResultFailed\";\n    NetErrorCode[NetErrorCode[\"InvalidServerResponse\"] = 605] = \"InvalidServerResponse\";\n    NetErrorCode[NetErrorCode[\"ClockOutOfSync\"] = 606] = \"ClockOutOfSync\";\n    NetErrorCode[NetErrorCode[\"WaitForTimeout\"] = 607] = \"WaitForTimeout\";\n    NetErrorCode[NetErrorCode[\"GraphqlError\"] = 608] = \"GraphqlError\";\n    NetErrorCode[NetErrorCode[\"NetworkModuleSuspended\"] = 609] = \"NetworkModuleSuspended\";\n    NetErrorCode[NetErrorCode[\"WebsocketDisconnected\"] = 610] = \"WebsocketDisconnected\";\n    NetErrorCode[NetErrorCode[\"NotSupported\"] = 611] = \"NotSupported\";\n    NetErrorCode[NetErrorCode[\"NoEndpointsProvided\"] = 612] = \"NoEndpointsProvided\";\n    NetErrorCode[NetErrorCode[\"GraphqlWebsocketInitError\"] = 613] = \"GraphqlWebsocketInitError\";\n    NetErrorCode[NetErrorCode[\"NetworkModuleResumed\"] = 614] = \"NetworkModuleResumed\";\n})(NetErrorCode = exports.NetErrorCode || (exports.NetErrorCode = {}));\nvar SortDirection;\n(function (SortDirection) {\n    SortDirection[\"ASC\"] = \"ASC\";\n    SortDirection[\"DESC\"] = \"DESC\";\n})(SortDirection = exports.SortDirection || (exports.SortDirection = {}));\nfunction paramsOfQueryOperationQueryCollection(params) {\n    return Object.assign({ type: 'QueryCollection' }, params);\n}\nexports.paramsOfQueryOperationQueryCollection = paramsOfQueryOperationQueryCollection;\nfunction paramsOfQueryOperationWaitForCollection(params) {\n    return Object.assign({ type: 'WaitForCollection' }, params);\n}\nexports.paramsOfQueryOperationWaitForCollection = paramsOfQueryOperationWaitForCollection;\nfunction paramsOfQueryOperationAggregateCollection(params) {\n    return Object.assign({ type: 'AggregateCollection' }, params);\n}\nexports.paramsOfQueryOperationAggregateCollection = paramsOfQueryOperationAggregateCollection;\nfunction paramsOfQueryOperationQueryCounterparties(params) {\n    return Object.assign({ type: 'QueryCounterparties' }, params);\n}\nexports.paramsOfQueryOperationQueryCounterparties = paramsOfQueryOperationQueryCounterparties;\nvar AggregationFn;\n(function (AggregationFn) {\n    AggregationFn[\"COUNT\"] = \"COUNT\";\n    AggregationFn[\"MIN\"] = \"MIN\";\n    AggregationFn[\"MAX\"] = \"MAX\";\n    AggregationFn[\"SUM\"] = \"SUM\";\n    AggregationFn[\"AVERAGE\"] = \"AVERAGE\";\n})(AggregationFn = exports.AggregationFn || (exports.AggregationFn = {}));\n/**\n * Network access.\n */\nclass NetModule {\n    constructor(client) {\n        this.client = client;\n    }\n    /**\n     * Performs DAppServer GraphQL query.\n     *\n     * @param {ParamsOfQuery} params\n     * @returns ResultOfQuery\n     */\n    query(params) {\n        return this.client.request('net.query', params);\n    }\n    /**\n     * Performs multiple queries per single fetch.\n     *\n     * @param {ParamsOfBatchQuery} params\n     * @returns ResultOfBatchQuery\n     */\n    batch_query(params) {\n        return this.client.request('net.batch_query', params);\n    }\n    /**\n     * Queries collection data\n     *\n     * @remarks\n     * Queries data that satisfies the `filter` conditions,\n     * limits the number of returned records and orders them.\n     * The projection fields are limited to `result` fields\n     *\n     * @param {ParamsOfQueryCollection} params\n     * @returns ResultOfQueryCollection\n     */\n    query_collection(params) {\n        return this.client.request('net.query_collection', params);\n    }\n    /**\n     * Aggregates collection data.\n     *\n     * @remarks\n     * Aggregates values from the specified `fields` for records\n     * that satisfies the `filter` conditions,\n     *\n     * @param {ParamsOfAggregateCollection} params\n     * @returns ResultOfAggregateCollection\n     */\n    aggregate_collection(params) {\n        return this.client.request('net.aggregate_collection', params);\n    }\n    /**\n     * Returns an object that fulfills the conditions or waits for its appearance\n     *\n     * @remarks\n     * Triggers only once.\n     * If object that satisfies the `filter` conditions\n     * already exists - returns it immediately.\n     * If not - waits for insert/update of data within the specified `timeout`,\n     * and returns it.\n     * The projection fields are limited to `result` fields\n     *\n     * @param {ParamsOfWaitForCollection} params\n     * @returns ResultOfWaitForCollection\n     */\n    wait_for_collection(params) {\n        return this.client.request('net.wait_for_collection', params);\n    }\n    /**\n     * Cancels a subscription\n     *\n     * @remarks\n     * Cancels a subscription specified by its handle.\n     *\n     * @param {ResultOfSubscribeCollection} params\n     * @returns\n     */\n    unsubscribe(params) {\n        return this.client.request('net.unsubscribe', params);\n    }\n    /**\n     * Creates a collection subscription\n     *\n     * @remarks\n     * Triggers for each insert/update of data that satisfies\n     * the `filter` conditions.\n     * The projection fields are limited to `result` fields.\n     *\n     * The subscription is a persistent communication channel between\n     * client and Free TON Network.\n     * All changes in the blockchain will be reflected in realtime.\n     * Changes means inserts and updates of the blockchain entities.\n     *\n     * ### Important Notes on Subscriptions\n     *\n     * Unfortunately sometimes the connection with the network brakes down.\n     * In this situation the library attempts to reconnect to the network.\n     * This reconnection sequence can take significant time.\n     * All of this time the client is disconnected from the network.\n     *\n     * Bad news is that all blockchain changes that happened while\n     * the client was disconnected are lost.\n     *\n     * Good news is that the client report errors to the callback when\n     * it loses and resumes connection.\n     *\n     * So, if the lost changes are important to the application then\n     * the application must handle these error reports.\n     *\n     * Library reports errors with `responseType` == 101\n     * and the error object passed via `params`.\n     *\n     * When the library has successfully reconnected\n     * the application receives callback with\n     * `responseType` == 101 and `params.code` == 614 (NetworkModuleResumed).\n     *\n     * Application can use several ways to handle this situation:\n     * - If application monitors changes for the single blockchain\n     * object (for example specific account):  application\n     * can perform a query for this object and handle actual data as a\n     * regular data from the subscription.\n     * - If application monitors sequence of some blockchain objects\n     * (for example transactions of the specific account): application must\n     * refresh all cached (or visible to user) lists where this sequences presents.\n     *\n     * @param {ParamsOfSubscribeCollection} params\n     * @returns ResultOfSubscribeCollection\n     */\n    subscribe_collection(params, responseHandler) {\n        return this.client.request('net.subscribe_collection', params, responseHandler);\n    }\n    /**\n     * Creates a subscription\n     *\n     * @remarks\n     * The subscription is a persistent communication channel between\n     * client and Everscale Network.\n     *\n     * ### Important Notes on Subscriptions\n     *\n     * Unfortunately sometimes the connection with the network brakes down.\n     * In this situation the library attempts to reconnect to the network.\n     * This reconnection sequence can take significant time.\n     * All of this time the client is disconnected from the network.\n     *\n     * Bad news is that all changes that happened while\n     * the client was disconnected are lost.\n     *\n     * Good news is that the client report errors to the callback when\n     * it loses and resumes connection.\n     *\n     * So, if the lost changes are important to the application then\n     * the application must handle these error reports.\n     *\n     * Library reports errors with `responseType` == 101\n     * and the error object passed via `params`.\n     *\n     * When the library has successfully reconnected\n     * the application receives callback with\n     * `responseType` == 101 and `params.code` == 614 (NetworkModuleResumed).\n     *\n     * Application can use several ways to handle this situation:\n     * - If application monitors changes for the single\n     * object (for example specific account):  application\n     * can perform a query for this object and handle actual data as a\n     * regular data from the subscription.\n     * - If application monitors sequence of some objects\n     * (for example transactions of the specific account): application must\n     * refresh all cached (or visible to user) lists where this sequences presents.\n     *\n     * @param {ParamsOfSubscribe} params\n     * @returns ResultOfSubscribeCollection\n     */\n    subscribe(params, responseHandler) {\n        return this.client.request('net.subscribe', params, responseHandler);\n    }\n    /**\n     * Suspends network module to stop any network activity\n     * @returns\n     */\n    suspend() {\n        return this.client.request('net.suspend');\n    }\n    /**\n     * Resumes network module to enable network activity\n     * @returns\n     */\n    resume() {\n        return this.client.request('net.resume');\n    }\n    /**\n     * Returns ID of the last block in a specified account shard\n     *\n     * @param {ParamsOfFindLastShardBlock} params\n     * @returns ResultOfFindLastShardBlock\n     */\n    find_last_shard_block(params) {\n        return this.client.request('net.find_last_shard_block', params);\n    }\n    /**\n     * Requests the list of alternative endpoints from server\n     * @returns EndpointsSet\n     */\n    fetch_endpoints() {\n        return this.client.request('net.fetch_endpoints');\n    }\n    /**\n     * Sets the list of endpoints to use on reinit\n     *\n     * @param {EndpointsSet} params\n     * @returns\n     */\n    set_endpoints(params) {\n        return this.client.request('net.set_endpoints', params);\n    }\n    /**\n     * Requests the list of alternative endpoints from server\n     * @returns ResultOfGetEndpoints\n     */\n    get_endpoints() {\n        return this.client.request('net.get_endpoints');\n    }\n    /**\n     * Allows to query and paginate through the list of accounts that the specified account has interacted with, sorted by the time of the last internal message between accounts\n     *\n     * @remarks\n     * *Attention* this query retrieves data from 'Counterparties' service which is not supported in\n     * the opensource version of DApp Server (and will not be supported) as well as in TON OS SE (will be supported in SE in future),\n     * but is always accessible via [TON OS Devnet/Mainnet Clouds](https://docs.ton.dev/86757ecb2/p/85c869-networks)\n     *\n     * @param {ParamsOfQueryCounterparties} params\n     * @returns ResultOfQueryCollection\n     */\n    query_counterparties(params) {\n        return this.client.request('net.query_counterparties', params);\n    }\n    /**\n     * Returns a tree of transactions triggered by a specific message.\n     *\n     * @remarks\n     * Performs recursive retrieval of a transactions tree produced by a specific message:\n     * in_msg -> dst_transaction -> out_messages -> dst_transaction -> ...\n     * If the chain of transactions execution is in progress while the function is running,\n     * it will wait for the next transactions to appear until the full tree or more than 50 transactions\n     * are received.\n     *\n     * All the retrieved messages and transactions are included\n     * into `result.messages` and `result.transactions` respectively.\n     *\n     * Function reads transactions layer by layer, by pages of 20 transactions.\n     *\n     * The retrieval prosess goes like this:\n     * Let's assume we have an infinite chain of transactions and each transaction generates 5 messages.\n     * 1. Retrieve 1st message (input parameter) and corresponding transaction - put it into result.\n     * It is the first level of the tree of transactions - its root.\n     * Retrieve 5 out message ids from the transaction for next steps.\n     * 2. Retrieve 5 messages and corresponding transactions on the 2nd layer. Put them into result.\n     * Retrieve 5*5 out message ids from these transactions for next steps\n     * 3. Retrieve 20 (size of the page) messages and transactions (3rd layer) and 20*5=100 message ids (4th layer).\n     * 4. Retrieve the last 5 messages and 5 transactions on the 3rd layer + 15 messages and transactions (of 100) from the 4th layer\n     * + 25 message ids of the 4th layer + 75 message ids of the 5th layer.\n     * 5. Retrieve 20 more messages and 20 more transactions of the 4th layer + 100 more message ids of the 5th layer.\n     * 6. Now we have 1+5+20+20+20 = 66 transactions, which is more than 50. Function exits with the tree of\n     * 1m->1t->5m->5t->25m->25t->35m->35t. If we see any message ids in the last transactions out_msgs, which don't have\n     * corresponding messages in the function result, it means that the full tree was not received and we need to continue iteration.\n     *\n     * To summarize, it is guaranteed that each message in `result.messages` has the corresponding transaction\n     * in the `result.transactions`.\n     * But there is no guarantee that all messages from transactions `out_msgs` are\n     * presented in `result.messages`.\n     * So the application has to continue retrieval for missing messages if it requires.\n     *\n     * @param {ParamsOfQueryTransactionTree} params\n     * @returns ResultOfQueryTransactionTree\n     */\n    query_transaction_tree(params) {\n        return this.client.request('net.query_transaction_tree', params);\n    }\n    /**\n     * Creates block iterator.\n     *\n     * @remarks\n     * Block iterator uses robust iteration methods that guaranties that every\n     * block in the specified range isn't missed or iterated twice.\n     *\n     * Iterated range can be reduced with some filters:\n     * - `start_time` – the bottom time range. Only blocks with `gen_utime`\n     * more or equal to this value is iterated. If this parameter is omitted then there is\n     * no bottom time edge, so all blocks since zero state is iterated.\n     * - `end_time` – the upper time range. Only blocks with `gen_utime`\n     * less then this value is iterated. If this parameter is omitted then there is\n     * no upper time edge, so iterator never finishes.\n     * - `shard_filter` – workchains and shard prefixes that reduce the set of interesting\n     * blocks. Block conforms to the shard filter if it belongs to the filter workchain\n     * and the first bits of block's `shard` fields matches to the shard prefix.\n     * Only blocks with suitable shard are iterated.\n     *\n     * Items iterated is a JSON objects with block data. The minimal set of returned\n     * fields is:\n     * ```text\n     * id\n     * gen_utime\n     * workchain_id\n     * shard\n     * after_split\n     * after_merge\n     * prev_ref {\n     *     root_hash\n     * }\n     * prev_alt_ref {\n     *     root_hash\n     * }\n     * ```\n     * Application can request additional fields in the `result` parameter.\n     *\n     * Application should call the `remove_iterator` when iterator is no longer required.\n     *\n     * @param {ParamsOfCreateBlockIterator} params\n     * @returns RegisteredIterator\n     */\n    create_block_iterator(params) {\n        return this.client.request('net.create_block_iterator', params);\n    }\n    /**\n     * Resumes block iterator.\n     *\n     * @remarks\n     * The iterator stays exactly at the same position where the `resume_state` was catched.\n     *\n     * Application should call the `remove_iterator` when iterator is no longer required.\n     *\n     * @param {ParamsOfResumeBlockIterator} params\n     * @returns RegisteredIterator\n     */\n    resume_block_iterator(params) {\n        return this.client.request('net.resume_block_iterator', params);\n    }\n    /**\n     * Creates transaction iterator.\n     *\n     * @remarks\n     * Transaction iterator uses robust iteration methods that guaranty that every\n     * transaction in the specified range isn't missed or iterated twice.\n     *\n     * Iterated range can be reduced with some filters:\n     * - `start_time` – the bottom time range. Only transactions with `now`\n     * more or equal to this value are iterated. If this parameter is omitted then there is\n     * no bottom time edge, so all the transactions since zero state are iterated.\n     * - `end_time` – the upper time range. Only transactions with `now`\n     * less then this value are iterated. If this parameter is omitted then there is\n     * no upper time edge, so iterator never finishes.\n     * - `shard_filter` – workchains and shard prefixes that reduce the set of interesting\n     * accounts. Account address conforms to the shard filter if\n     * it belongs to the filter workchain and the first bits of address match to\n     * the shard prefix. Only transactions with suitable account addresses are iterated.\n     * - `accounts_filter` – set of account addresses whose transactions must be iterated.\n     * Note that accounts filter can conflict with shard filter so application must combine\n     * these filters carefully.\n     *\n     * Iterated item is a JSON objects with transaction data. The minimal set of returned\n     * fields is:\n     * ```text\n     * id\n     * account_addr\n     * now\n     * balance_delta(format:DEC)\n     * bounce { bounce_type }\n     * in_message {\n     *     id\n     *     value(format:DEC)\n     *     msg_type\n     *     src\n     * }\n     * out_messages {\n     *     id\n     *     value(format:DEC)\n     *     msg_type\n     *     dst\n     * }\n     * ```\n     * Application can request an additional fields in the `result` parameter.\n     *\n     * Another parameter that affects on the returned fields is the `include_transfers`.\n     * When this parameter is `true` the iterator computes and adds `transfer` field containing\n     * list of the useful `TransactionTransfer` objects.\n     * Each transfer is calculated from the particular message related to the transaction\n     * and has the following structure:\n     * - message – source message identifier.\n     * - isBounced – indicates that the transaction is bounced, which means the value will be returned back to the sender.\n     * - isDeposit – indicates that this transfer is the deposit (true) or withdraw (false).\n     * - counterparty – account address of the transfer source or destination depending on `isDeposit`.\n     * - value – amount of nano tokens transferred. The value is represented as a decimal string\n     * because the actual value can be more precise than the JSON number can represent. Application\n     * must use this string carefully – conversion to number can follow to loose of precision.\n     *\n     * Application should call the `remove_iterator` when iterator is no longer required.\n     *\n     * @param {ParamsOfCreateTransactionIterator} params\n     * @returns RegisteredIterator\n     */\n    create_transaction_iterator(params) {\n        return this.client.request('net.create_transaction_iterator', params);\n    }\n    /**\n     * Resumes transaction iterator.\n     *\n     * @remarks\n     * The iterator stays exactly at the same position where the `resume_state` was caught.\n     * Note that `resume_state` doesn't store the account filter. If the application requires\n     * to use the same account filter as it was when the iterator was created then the application\n     * must pass the account filter again in `accounts_filter` parameter.\n     *\n     * Application should call the `remove_iterator` when iterator is no longer required.\n     *\n     * @param {ParamsOfResumeTransactionIterator} params\n     * @returns RegisteredIterator\n     */\n    resume_transaction_iterator(params) {\n        return this.client.request('net.resume_transaction_iterator', params);\n    }\n    /**\n     * Returns next available items.\n     *\n     * @remarks\n     * In addition to available items this function returns the `has_more` flag\n     * indicating that the iterator isn't reach the end of the iterated range yet.\n     *\n     * This function can return the empty list of available items but\n     * indicates that there are more items is available.\n     * This situation appears when the iterator doesn't reach iterated range\n     * but database doesn't contains available items yet.\n     *\n     * If application requests resume state in `return_resume_state` parameter\n     * then this function returns `resume_state` that can be used later to\n     * resume the iteration from the position after returned items.\n     *\n     * The structure of the items returned depends on the iterator used.\n     * See the description to the appropriated iterator creation function.\n     *\n     * @param {ParamsOfIteratorNext} params\n     * @returns ResultOfIteratorNext\n     */\n    iterator_next(params) {\n        return this.client.request('net.iterator_next', params);\n    }\n    /**\n     * Removes an iterator\n     *\n     * @remarks\n     * Frees all resources allocated in library to serve iterator.\n     *\n     * Application always should call the `remove_iterator` when iterator\n     * is no longer required.\n     *\n     * @param {RegisteredIterator} params\n     * @returns\n     */\n    remove_iterator(params) {\n        return this.client.request('net.remove_iterator', params);\n    }\n}\nexports.NetModule = NetModule;\n// debot module\nvar DebotErrorCode;\n(function (DebotErrorCode) {\n    DebotErrorCode[DebotErrorCode[\"DebotStartFailed\"] = 801] = \"DebotStartFailed\";\n    DebotErrorCode[DebotErrorCode[\"DebotFetchFailed\"] = 802] = \"DebotFetchFailed\";\n    DebotErrorCode[DebotErrorCode[\"DebotExecutionFailed\"] = 803] = \"DebotExecutionFailed\";\n    DebotErrorCode[DebotErrorCode[\"DebotInvalidHandle\"] = 804] = \"DebotInvalidHandle\";\n    DebotErrorCode[DebotErrorCode[\"DebotInvalidJsonParams\"] = 805] = \"DebotInvalidJsonParams\";\n    DebotErrorCode[DebotErrorCode[\"DebotInvalidFunctionId\"] = 806] = \"DebotInvalidFunctionId\";\n    DebotErrorCode[DebotErrorCode[\"DebotInvalidAbi\"] = 807] = \"DebotInvalidAbi\";\n    DebotErrorCode[DebotErrorCode[\"DebotGetMethodFailed\"] = 808] = \"DebotGetMethodFailed\";\n    DebotErrorCode[DebotErrorCode[\"DebotInvalidMsg\"] = 809] = \"DebotInvalidMsg\";\n    DebotErrorCode[DebotErrorCode[\"DebotExternalCallFailed\"] = 810] = \"DebotExternalCallFailed\";\n    DebotErrorCode[DebotErrorCode[\"DebotBrowserCallbackFailed\"] = 811] = \"DebotBrowserCallbackFailed\";\n    DebotErrorCode[DebotErrorCode[\"DebotOperationRejected\"] = 812] = \"DebotOperationRejected\";\n    DebotErrorCode[DebotErrorCode[\"DebotNoCode\"] = 813] = \"DebotNoCode\";\n})(DebotErrorCode = exports.DebotErrorCode || (exports.DebotErrorCode = {}));\nfunction debotActivityTransaction(msg, dst, out, fee, setcode, signkey, signing_box_handle) {\n    return {\n        type: 'Transaction',\n        msg,\n        dst,\n        out,\n        fee,\n        setcode,\n        signkey,\n        signing_box_handle,\n    };\n}\nexports.debotActivityTransaction = debotActivityTransaction;\nfunction paramsOfAppDebotBrowserLog(msg) {\n    return {\n        type: 'Log',\n        msg,\n    };\n}\nexports.paramsOfAppDebotBrowserLog = paramsOfAppDebotBrowserLog;\nfunction paramsOfAppDebotBrowserSwitch(context_id) {\n    return {\n        type: 'Switch',\n        context_id,\n    };\n}\nexports.paramsOfAppDebotBrowserSwitch = paramsOfAppDebotBrowserSwitch;\nfunction paramsOfAppDebotBrowserSwitchCompleted() {\n    return {\n        type: 'SwitchCompleted',\n    };\n}\nexports.paramsOfAppDebotBrowserSwitchCompleted = paramsOfAppDebotBrowserSwitchCompleted;\nfunction paramsOfAppDebotBrowserShowAction(action) {\n    return {\n        type: 'ShowAction',\n        action,\n    };\n}\nexports.paramsOfAppDebotBrowserShowAction = paramsOfAppDebotBrowserShowAction;\nfunction paramsOfAppDebotBrowserInput(prompt) {\n    return {\n        type: 'Input',\n        prompt,\n    };\n}\nexports.paramsOfAppDebotBrowserInput = paramsOfAppDebotBrowserInput;\nfunction paramsOfAppDebotBrowserGetSigningBox() {\n    return {\n        type: 'GetSigningBox',\n    };\n}\nexports.paramsOfAppDebotBrowserGetSigningBox = paramsOfAppDebotBrowserGetSigningBox;\nfunction paramsOfAppDebotBrowserInvokeDebot(debot_addr, action) {\n    return {\n        type: 'InvokeDebot',\n        debot_addr,\n        action,\n    };\n}\nexports.paramsOfAppDebotBrowserInvokeDebot = paramsOfAppDebotBrowserInvokeDebot;\nfunction paramsOfAppDebotBrowserSend(message) {\n    return {\n        type: 'Send',\n        message,\n    };\n}\nexports.paramsOfAppDebotBrowserSend = paramsOfAppDebotBrowserSend;\nfunction paramsOfAppDebotBrowserApprove(activity) {\n    return {\n        type: 'Approve',\n        activity,\n    };\n}\nexports.paramsOfAppDebotBrowserApprove = paramsOfAppDebotBrowserApprove;\nfunction resultOfAppDebotBrowserInput(value) {\n    return {\n        type: 'Input',\n        value,\n    };\n}\nexports.resultOfAppDebotBrowserInput = resultOfAppDebotBrowserInput;\nfunction resultOfAppDebotBrowserGetSigningBox(signing_box) {\n    return {\n        type: 'GetSigningBox',\n        signing_box,\n    };\n}\nexports.resultOfAppDebotBrowserGetSigningBox = resultOfAppDebotBrowserGetSigningBox;\nfunction resultOfAppDebotBrowserInvokeDebot() {\n    return {\n        type: 'InvokeDebot',\n    };\n}\nexports.resultOfAppDebotBrowserInvokeDebot = resultOfAppDebotBrowserInvokeDebot;\nfunction resultOfAppDebotBrowserApprove(approved) {\n    return {\n        type: 'Approve',\n        approved,\n    };\n}\nexports.resultOfAppDebotBrowserApprove = resultOfAppDebotBrowserApprove;\nfunction dispatchAppDebotBrowser(obj, params, app_request_id, client) {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            let result = {};\n            switch (params.type) {\n                case 'Log':\n                    obj.log(params);\n                    break;\n                case 'Switch':\n                    obj.switch(params);\n                    break;\n                case 'SwitchCompleted':\n                    obj.switch_completed();\n                    break;\n                case 'ShowAction':\n                    obj.show_action(params);\n                    break;\n                case 'Input':\n                    result = yield obj.input(params);\n                    break;\n                case 'GetSigningBox':\n                    result = yield obj.get_signing_box();\n                    break;\n                case 'InvokeDebot':\n                    yield obj.invoke_debot(params);\n                    break;\n                case 'Send':\n                    obj.send(params);\n                    break;\n                case 'Approve':\n                    result = yield obj.approve(params);\n                    break;\n            }\n            client.resolve_app_request(app_request_id, Object.assign({ type: params.type }, result));\n        }\n        catch (error) {\n            client.reject_app_request(app_request_id, error);\n        }\n    });\n}\n/**\n * [UNSTABLE](UNSTABLE.md) Module for working with debot.\n */\nclass DebotModule {\n    constructor(client) {\n        this.client = client;\n    }\n    /**\n     * [UNSTABLE](UNSTABLE.md) Creates and instance of DeBot.\n     *\n     * @remarks\n     * Downloads debot smart contract (code and data) from blockchain and creates\n     * an instance of Debot Engine for it.\n     *\n     * # Remarks\n     * It does not switch debot to context 0. Browser Callbacks are not called.\n     *\n     * @param {ParamsOfInit} params\n     * @returns RegisteredDebot\n     */\n    init(params, obj) {\n        return this.client.request('debot.init', params, (params, responseType) => {\n            if (responseType === 3) {\n                dispatchAppDebotBrowser(obj, params.request_data, params.app_request_id, this.client);\n            }\n            else if (responseType === 4) {\n                dispatchAppDebotBrowser(obj, params, null, this.client);\n            }\n        });\n    }\n    /**\n     * [UNSTABLE](UNSTABLE.md) Starts the DeBot.\n     *\n     * @remarks\n     * Downloads debot smart contract from blockchain and switches it to\n     * context zero.\n     *\n     * This function must be used by Debot Browser to start a dialog with debot.\n     * While the function is executing, several Browser Callbacks can be called,\n     * since the debot tries to display all actions from the context 0 to the user.\n     *\n     * When the debot starts SDK registers `BrowserCallbacks` AppObject.\n     * Therefore when `debote.remove` is called the debot is being deleted and the callback is called\n     * with `finish`=`true` which indicates that it will never be used again.\n     *\n     * @param {ParamsOfStart} params\n     * @returns\n     */\n    start(params) {\n        return this.client.request('debot.start', params);\n    }\n    /**\n     * [UNSTABLE](UNSTABLE.md) Fetches DeBot metadata from blockchain.\n     *\n     * @remarks\n     * Downloads DeBot from blockchain and creates and fetches its metadata.\n     *\n     * @param {ParamsOfFetch} params\n     * @returns ResultOfFetch\n     */\n    fetch(params) {\n        return this.client.request('debot.fetch', params);\n    }\n    /**\n     * [UNSTABLE](UNSTABLE.md) Executes debot action.\n     *\n     * @remarks\n     * Calls debot engine referenced by debot handle to execute input action.\n     * Calls Debot Browser Callbacks if needed.\n     *\n     * # Remarks\n     * Chain of actions can be executed if input action generates a list of subactions.\n     *\n     * @param {ParamsOfExecute} params\n     * @returns\n     */\n    execute(params) {\n        return this.client.request('debot.execute', params);\n    }\n    /**\n     * [UNSTABLE](UNSTABLE.md) Sends message to Debot.\n     *\n     * @remarks\n     * Used by Debot Browser to send response on Dinterface call or from other Debots.\n     *\n     * @param {ParamsOfSend} params\n     * @returns\n     */\n    send(params) {\n        return this.client.request('debot.send', params);\n    }\n    /**\n     * [UNSTABLE](UNSTABLE.md) Destroys debot handle.\n     *\n     * @remarks\n     * Removes handle from Client Context and drops debot engine referenced by that handle.\n     *\n     * @param {ParamsOfRemove} params\n     * @returns\n     */\n    remove(params) {\n        return this.client.request('debot.remove', params);\n    }\n}\nexports.DebotModule = DebotModule;\n// proofs module\nvar ProofsErrorCode;\n(function (ProofsErrorCode) {\n    ProofsErrorCode[ProofsErrorCode[\"InvalidData\"] = 901] = \"InvalidData\";\n    ProofsErrorCode[ProofsErrorCode[\"ProofCheckFailed\"] = 902] = \"ProofCheckFailed\";\n    ProofsErrorCode[ProofsErrorCode[\"InternalError\"] = 903] = \"InternalError\";\n    ProofsErrorCode[ProofsErrorCode[\"DataDiffersFromProven\"] = 904] = \"DataDiffersFromProven\";\n})(ProofsErrorCode = exports.ProofsErrorCode || (exports.ProofsErrorCode = {}));\n/**\n * [UNSTABLE](UNSTABLE.md) Module for proving data, retrieved from TONOS API.\n */\nclass ProofsModule {\n    constructor(client) {\n        this.client = client;\n    }\n    /**\n     * Proves that a given block's data, which is queried from TONOS API, can be trusted.\n     *\n     * @remarks\n     * This function checks block proofs and compares given data with the proven.\n     * If the given data differs from the proven, the exception will be thrown.\n     * The input param is a single block's JSON object, which was queried from DApp server using\n     * functions such as `net.query`, `net.query_collection` or `net.wait_for_collection`.\n     * If block's BOC is not provided in the JSON, it will be queried from DApp server\n     * (in this case it is required to provide at least `id` of block).\n     *\n     * Please note, that joins (like `signatures` in `Block`) are separated entities and not supported,\n     * so function will throw an exception in a case if JSON being checked has such entities in it.\n     *\n     * If `cache_in_local_storage` in config is set to `true` (default), downloaded proofs and\n     * master-chain BOCs are saved into the persistent local storage (e.g. file system for native\n     * environments or browser's IndexedDB for the web); otherwise all the data is cached only in\n     * memory in current client's context and will be lost after destruction of the client.\n     *\n     * **Why Proofs are needed**\n     *\n     * Proofs are needed to ensure that the data downloaded from a DApp server is real blockchain\n     * data. Checking proofs can protect from the malicious DApp server which can potentially provide\n     * fake data, or also from \"Man in the Middle\" attacks class.\n     *\n     * **What Proofs are**\n     *\n     * Simply, proof is a list of signatures of validators', which have signed this particular master-\n     * block.\n     *\n     * The very first validator set's public keys are included in the zero-state. Whe know a root hash\n     * of the zero-state, because it is stored in the network configuration file, it is our authority\n     * root. For proving zero-state it is enough to calculate and compare its root hash.\n     *\n     * In each new validator cycle the validator set is changed. The new one is stored in a key-block,\n     * which is signed by the validator set, which we already trust, the next validator set will be\n     * stored to the new key-block and signed by the current validator set, and so on.\n     *\n     * In order to prove any block in the master-chain we need to check, that it has been signed by\n     * a trusted validator set. So we need to check all key-blocks' proofs, started from the zero-state\n     * and until the block, which we want to prove. But it can take a lot of time and traffic to\n     * download and prove all key-blocks on a client. For solving this, special trusted blocks are used\n     * in TON-SDK.\n     *\n     * The trusted block is the authority root, as well, as the zero-state. Each trusted block is the\n     * `id` (e.g. `root_hash`) of the already proven key-block. There can be plenty of trusted\n     * blocks, so there can be a lot of authority roots. The hashes of trusted blocks for MainNet\n     * and DevNet are hardcoded in SDK in a separated binary file (trusted_key_blocks.bin) and can\n     * be updated for each release.\n     * In future SDK releases, one will also be able to provide their hashes of trusted blocks for\n     * other networks, besides for MainNet and DevNet.\n     * By using trusted key-blocks, in order to prove any block, we can prove chain of key-blocks to\n     * the closest previous trusted key-block, not only to the zero-state.\n     *\n     * But shard-blocks don't have proofs on DApp server. In this case, in order to prove any shard-\n     * block data, we search for a corresponding master-block, which contains the root hash of this\n     * shard-block, or some shard block which is linked to that block in shard-chain. After proving\n     * this master-block, we traverse through each link and calculate and compare hashes with links,\n     * one-by-one. After that we can ensure that this shard-block has also been proven.\n     *\n     * @param {ParamsOfProofBlockData} params\n     * @returns\n     */\n    proof_block_data(params) {\n        return this.client.request('proofs.proof_block_data', params);\n    }\n    /**\n     * Proves that a given transaction's data, which is queried from TONOS API, can be trusted.\n     *\n     * @remarks\n     * This function requests the corresponding block, checks block proofs, ensures that given\n     * transaction exists in the proven block and compares given data with the proven.\n     * If the given data differs from the proven, the exception will be thrown.\n     * The input parameter is a single transaction's JSON object (see params description),\n     * which was queried from TONOS API using functions such as `net.query`, `net.query_collection`\n     * or `net.wait_for_collection`.\n     *\n     * If transaction's BOC and/or `block_id` are not provided in the JSON, they will be queried from\n     * TONOS API.\n     *\n     * Please note, that joins (like `account`, `in_message`, `out_messages`, etc. in `Transaction`\n     * entity) are separated entities and not supported, so function will throw an exception in a case\n     * if JSON being checked has such entities in it.\n     *\n     * For more information about proofs checking, see description of `proof_block_data` function.\n     *\n     * @param {ParamsOfProofTransactionData} params\n     * @returns\n     */\n    proof_transaction_data(params) {\n        return this.client.request('proofs.proof_transaction_data', params);\n    }\n    /**\n     * Proves that a given message's data, which is queried from TONOS API, can be trusted.\n     *\n     * @remarks\n     * This function first proves the corresponding transaction, ensures that the proven transaction\n     * refers to the given message and compares given data with the proven.\n     * If the given data differs from the proven, the exception will be thrown.\n     * The input parameter is a single message's JSON object (see params description),\n     * which was queried from TONOS API using functions such as `net.query`, `net.query_collection`\n     * or `net.wait_for_collection`.\n     *\n     * If message's BOC and/or non-null `src_transaction.id` or `dst_transaction.id` are not provided\n     * in the JSON, they will be queried from TONOS API.\n     *\n     * Please note, that joins (like `block`, `dst_account`, `dst_transaction`, `src_account`,\n     * `src_transaction`, etc. in `Message` entity) are separated entities and not supported,\n     * so function will throw an exception in a case if JSON being checked has such entities in it.\n     *\n     * For more information about proofs checking, see description of `proof_block_data` function.\n     *\n     * @param {ParamsOfProofMessageData} params\n     * @returns\n     */\n    proof_message_data(params) {\n        return this.client.request('proofs.proof_message_data', params);\n    }\n}\nexports.ProofsModule = ProofsModule;\n//# sourceMappingURL=modules.js.map\n\n//# sourceURL=webpack://simplepage/./node_modules/@tonclient/core/dist/modules.js?");

/***/ }),

/***/ "./node_modules/@tonclient/lib-web/index.js":
/*!**************************************************!*\
  !*** ./node_modules/@tonclient/lib-web/index.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"libWebSetup\": () => (/* binding */ libWebSetup),\n/* harmony export */   \"libWeb\": () => (/* binding */ libWeb)\n/* harmony export */ });\nconst workerScript = `let wasm;\n\nlet cachedTextDecoder = new TextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nlet cachegetUint8Memory0 = null;\nfunction getUint8Memory0() {\n    if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n\nconst heap = new Array(32).fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nlet heap_next = heap.length;\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nfunction getObject(idx) { return heap[idx]; }\n\nfunction dropObject(idx) {\n    if (idx < 36) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nlet cachedTextEncoder = new TextEncoder('utf-8');\n\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n}\n    : function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n});\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length);\n        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len);\n\n    const mem = getUint8Memory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3);\n        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nfunction isLikeNone(x) {\n    return x === undefined || x === null;\n}\n\nlet cachegetInt32Memory0 = null;\nfunction getInt32Memory0() {\n    if (cachegetInt32Memory0 === null || cachegetInt32Memory0.buffer !== wasm.memory.buffer) {\n        cachegetInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachegetInt32Memory0;\n}\n\nlet cachegetFloat64Memory0 = null;\nfunction getFloat64Memory0() {\n    if (cachegetFloat64Memory0 === null || cachegetFloat64Memory0.buffer !== wasm.memory.buffer) {\n        cachegetFloat64Memory0 = new Float64Array(wasm.memory.buffer);\n    }\n    return cachegetFloat64Memory0;\n}\n\nfunction debugString(val) {\n    // primitive types\n    const type = typeof val;\n    if (type == 'number' || type == 'boolean' || val == null) {\n        return  \\`\\${val}\\`;\n    }\n    if (type == 'string') {\n        return \\`\"\\${val}\"\\`;\n    }\n    if (type == 'symbol') {\n        const description = val.description;\n        if (description == null) {\n            return 'Symbol';\n        } else {\n            return \\`Symbol(\\${description})\\`;\n        }\n    }\n    if (type == 'function') {\n        const name = val.name;\n        if (typeof name == 'string' && name.length > 0) {\n            return \\`Function(\\${name})\\`;\n        } else {\n            return 'Function';\n        }\n    }\n    // objects\n    if (Array.isArray(val)) {\n        const length = val.length;\n        let debug = '[';\n        if (length > 0) {\n            debug += debugString(val[0]);\n        }\n        for(let i = 1; i < length; i++) {\n            debug += ', ' + debugString(val[i]);\n        }\n        debug += ']';\n        return debug;\n    }\n    // Test for built-in\n    const builtInMatches = /\\\\[object ([^\\\\]]+)\\\\]/.exec(toString.call(val));\n    let className;\n    if (builtInMatches.length > 1) {\n        className = builtInMatches[1];\n    } else {\n        // Failed to match the standard '[object ClassName]'\n        return toString.call(val);\n    }\n    if (className == 'Object') {\n        // we're a user defined class or Object\n        // JSON.stringify avoids problems with cycles, and is generally much\n        // easier than looping through ownProperties of \\`val\\`.\n        try {\n            return 'Object(' + JSON.stringify(val) + ')';\n        } catch (_) {\n            return 'Object';\n        }\n    }\n    // errors\n    if (val instanceof Error) {\n        return \\`\\${val.name}: \\${val.message}\\\\n\\${val.stack}\\`;\n    }\n    // TODO we could test for more things here, like \\`Set\\`s and \\`Map\\`s.\n    return className;\n}\n\nfunction makeClosure(arg0, arg1, dtor, f) {\n    const state = { a: arg0, b: arg1, cnt: 1, dtor };\n    const real = (...args) => {\n        // First up with a closure we increment the internal reference\n        // count. This ensures that the Rust closure environment won't\n        // be deallocated while we're invoking it.\n        state.cnt++;\n        try {\n            return f(state.a, state.b, ...args);\n        } finally {\n            if (--state.cnt === 0) {\n                wasm.__wbindgen_export_2.get(state.dtor)(state.a, state.b);\n                state.a = 0;\n\n            }\n        }\n    };\n    real.original = state;\n\n    return real;\n}\nfunction __wbg_adapter_34(arg0, arg1, arg2) {\n    wasm._dyn_core__ops__function__Fn__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__hcc36eeb2923364c4(arg0, arg1, addHeapObject(arg2));\n}\n\nfunction __wbg_adapter_37(arg0, arg1) {\n    wasm._dyn_core__ops__function__Fn_____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h892c4dc7ce305ad5(arg0, arg1);\n}\n\nfunction makeMutClosure(arg0, arg1, dtor, f) {\n    const state = { a: arg0, b: arg1, cnt: 1, dtor };\n    const real = (...args) => {\n        // First up with a closure we increment the internal reference\n        // count. This ensures that the Rust closure environment won't\n        // be deallocated while we're invoking it.\n        state.cnt++;\n        const a = state.a;\n        state.a = 0;\n        try {\n            return f(a, state.b, ...args);\n        } finally {\n            if (--state.cnt === 0) {\n                wasm.__wbindgen_export_2.get(state.dtor)(a, state.b);\n\n            } else {\n                state.a = a;\n            }\n        }\n    };\n    real.original = state;\n\n    return real;\n}\nfunction __wbg_adapter_40(arg0, arg1) {\n    wasm._dyn_core__ops__function__FnMut_____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__hc113d39459b34f9c(arg0, arg1);\n}\n\nfunction __wbg_adapter_43(arg0, arg1, arg2) {\n    wasm._dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h79e83afe69de0121(arg0, arg1, addHeapObject(arg2));\n}\n\nfunction __wbg_adapter_46(arg0, arg1, arg2) {\n    wasm._dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h9f93ee6097c5dc24(arg0, arg1, addHeapObject(arg2));\n}\n\nfunction __wbg_adapter_49(arg0, arg1, arg2) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        wasm._dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__he7aa7c833402b58f(retptr, arg0, arg1, addHeapObject(arg2));\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        if (r1) {\n            throw takeObject(r0);\n        }\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\nfunction __wbg_adapter_52(arg0, arg1, arg2) {\n    wasm._dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h0e06c7255976fae1(arg0, arg1, addHeapObject(arg2));\n}\n\nfunction handleError(f, args) {\n    try {\n        return f.apply(this, args);\n    } catch (e) {\n        wasm.__wbindgen_exn_store(addHeapObject(e));\n    }\n}\n\nfunction getArrayU8FromWasm0(ptr, len) {\n    return getUint8Memory0().subarray(ptr / 1, ptr / 1 + len);\n}\n/**\n* @param {string} config_json\n* @returns {string}\n*/\nfunction core_create_context(config_json) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        var ptr0 = passStringToWasm0(config_json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.core_create_context(retptr, ptr0, len0);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        wasm.__wbindgen_free(r0, r1);\n    }\n}\n\n/**\n* @param {number} context\n*/\nfunction core_destroy_context(context) {\n    wasm.core_destroy_context(context);\n}\n\n/**\n* @param {number} context\n* @param {string} function_name\n* @param {any} params\n* @param {number} request_id\n*/\nfunction core_request(context, function_name, params, request_id) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        var ptr0 = passStringToWasm0(function_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.core_request(retptr, context, ptr0, len0, addHeapObject(params), request_id);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        if (r1) {\n            throw takeObject(r0);\n        }\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\nasync function load(module, imports) {\n    if (typeof Response === 'function' && module instanceof Response) {\n        if (typeof WebAssembly.instantiateStreaming === 'function') {\n            try {\n                return await WebAssembly.instantiateStreaming(module, imports);\n\n            } catch (e) {\n                if (module.headers.get('Content-Type') != 'application/wasm') {\n                    console.warn(\"\\`WebAssembly.instantiateStreaming\\` failed because your server does not serve wasm with \\`application/wasm\\` MIME type. Falling back to \\`WebAssembly.instantiate\\` which is slower. Original error:\\\\n\", e);\n\n                } else {\n                    throw e;\n                }\n            }\n        }\n\n        const bytes = await module.arrayBuffer();\n        return await WebAssembly.instantiate(bytes, imports);\n\n    } else {\n        const instance = await WebAssembly.instantiate(module, imports);\n\n        if (instance instanceof WebAssembly.Instance) {\n            return { instance, module };\n\n        } else {\n            return instance;\n        }\n    }\n}\n\nasync function init(input) {\n    if (typeof input === 'undefined') {    }\n    const imports = {};\n    imports.wbg = {};\n    imports.wbg.__wbg_new_55259b13834a484c = function(arg0, arg1) {\n        var ret = new Error(getStringFromWasm0(arg0, arg1));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_string_new = function(arg0, arg1) {\n        var ret = getStringFromWasm0(arg0, arg1);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_memory = function() {\n        var ret = wasm.memory;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_buffer_5e74a88a1424a2e0 = function(arg0) {\n        var ret = getObject(arg0).buffer;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_newwithbyteoffsetandlength_278ec7532799393a = function(arg0, arg1, arg2) {\n        var ret = new Uint8Array(getObject(arg0), arg1 >>> 0, arg2 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_object_drop_ref = function(arg0) {\n        takeObject(arg0);\n    };\n    imports.wbg.__wbg_newwithlength_9c398a17849b31ce = function(arg0) {\n        var ret = new Array(arg0 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_set_a42efa3c7f01c8b1 = function(arg0, arg1, arg2) {\n        getObject(arg0)[arg1 >>> 0] = takeObject(arg2);\n    };\n    imports.wbg.__wbg_newwithu8arraysequence_07e51a2fd34aba25 = function() { return handleError(function (arg0) {\n        var ret = new Blob(getObject(arg0));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_get_8bbb82393651dd9c = function() { return handleError(function (arg0, arg1) {\n        var ret = Reflect.get(getObject(arg0), getObject(arg1));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_instanceof_ArrayBuffer_649f53c967aec9b3 = function(arg0) {\n        var ret = getObject(arg0) instanceof ArrayBuffer;\n        return ret;\n    };\n    imports.wbg.__wbindgen_is_object = function(arg0) {\n        const val = getObject(arg0);\n        var ret = typeof(val) === 'object' && val !== null;\n        return ret;\n    };\n    imports.wbg.__wbg_new_e3b800e570795b3c = function(arg0) {\n        var ret = new Uint8Array(getObject(arg0));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_object_clone_ref = function(arg0) {\n        var ret = getObject(arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_keys_2d148611a251964d = function(arg0) {\n        var ret = Object.keys(getObject(arg0));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_length_7b60f47bde714631 = function(arg0) {\n        var ret = getObject(arg0).length;\n        return ret;\n    };\n    imports.wbg.__wbg_get_f45dff51f52d7222 = function(arg0, arg1) {\n        var ret = getObject(arg0)[arg1 >>> 0];\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_string_get = function(arg0, arg1) {\n        const obj = getObject(arg1);\n        var ret = typeof(obj) === 'string' ? obj : undefined;\n        var ptr0 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len0;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n    };\n    imports.wbg.__wbg_new0_57a6a2c2aaed3fc5 = function() {\n        var ret = new Date();\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_getTime_f8ce0ff902444efb = function(arg0) {\n        var ret = getObject(arg0).getTime();\n        return ret;\n    };\n    imports.wbg.__wbg_transaction_060621a1204d5aca = function() { return handleError(function (arg0, arg1, arg2, arg3) {\n        var ret = getObject(arg0).transaction(getStringFromWasm0(arg1, arg2), takeObject(arg3));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_setoncomplete_3dc0ba554a7d164a = function(arg0, arg1) {\n        getObject(arg0).oncomplete = getObject(arg1);\n    };\n    imports.wbg.__wbg_setonerror_2e5cc1fe79f2a88f = function(arg0, arg1) {\n        getObject(arg0).onerror = getObject(arg1);\n    };\n    imports.wbg.__wbg_setonabort_2811e18214489a91 = function(arg0, arg1) {\n        getObject(arg0).onabort = getObject(arg1);\n    };\n    imports.wbg.__wbg_item_4d1fae0dfa05b190 = function(arg0, arg1, arg2) {\n        var ret = getObject(arg1).item(arg2 >>> 0);\n        var ptr0 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len0;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n    };\n    imports.wbg.__wbg_objectStore_d9403814ec4c771a = function() { return handleError(function (arg0, arg1, arg2) {\n        var ret = getObject(arg0).objectStore(getStringFromWasm0(arg1, arg2));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_target_e560052e31e4567c = function(arg0) {\n        var ret = getObject(arg0).target;\n        return isLikeNone(ret) ? 0 : addHeapObject(ret);\n    };\n    imports.wbg.__wbg_readyState_6eeefefa9aee540b = function(arg0) {\n        var ret = getObject(arg0).readyState;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_setonsuccess_b87f9950da9e0a5b = function(arg0, arg1) {\n        getObject(arg0).onsuccess = getObject(arg1);\n    };\n    imports.wbg.__wbg_setonerror_71f38880fbcb2f32 = function(arg0, arg1) {\n        getObject(arg0).onerror = getObject(arg1);\n    };\n    imports.wbg.__wbindgen_cb_drop = function(arg0) {\n        const obj = takeObject(arg0).original;\n        if (obj.cnt-- == 1) {\n            obj.a = 0;\n            return true;\n        }\n        var ret = false;\n        return ret;\n    };\n    imports.wbg.__wbg_next_dd1a890d37e38d73 = function() { return handleError(function (arg0) {\n        var ret = getObject(arg0).next();\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_done_982b1c7ac0cbc69d = function(arg0) {\n        var ret = getObject(arg0).done;\n        return ret;\n    };\n    imports.wbg.__wbg_value_2def2d1fb38b02cd = function(arg0) {\n        var ret = getObject(arg0).value;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_iterator_4b9cedbeda0c0e30 = function() {\n        var ret = Symbol.iterator;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_is_function = function(arg0) {\n        var ret = typeof(getObject(arg0)) === 'function';\n        return ret;\n    };\n    imports.wbg.__wbg_call_89558c3e96703ca1 = function() { return handleError(function (arg0, arg1) {\n        var ret = getObject(arg0).call(getObject(arg1));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_next_c7a2a6b012059a5e = function(arg0) {\n        var ret = getObject(arg0).next;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_self_e23d74ae45fb17d1 = function() { return handleError(function () {\n        var ret = self.self;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_window_b4be7f48b24ac56e = function() { return handleError(function () {\n        var ret = window.window;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_globalThis_d61b1f48a57191ae = function() { return handleError(function () {\n        var ret = globalThis.globalThis;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_global_e7669da72fd7f239 = function() { return handleError(function () {\n        var ret = global.global;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbindgen_is_undefined = function(arg0) {\n        var ret = getObject(arg0) === undefined;\n        return ret;\n    };\n    imports.wbg.__wbg_newnoargs_f579424187aa1717 = function(arg0, arg1) {\n        var ret = new Function(getStringFromWasm0(arg0, arg1));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_set_5b8081e9d002f0df = function(arg0, arg1, arg2) {\n        getObject(arg0).set(getObject(arg1), arg2 >>> 0);\n    };\n    imports.wbg.__wbg_length_30803400a8f15c59 = function(arg0) {\n        var ret = getObject(arg0).length;\n        return ret;\n    };\n    imports.wbg.__wbg_set_c42875065132a932 = function() { return handleError(function (arg0, arg1, arg2) {\n        var ret = Reflect.set(getObject(arg0), getObject(arg1), getObject(arg2));\n        return ret;\n    }, arguments) };\n    imports.wbg.__wbg_self_86b4b13392c7af56 = function() { return handleError(function () {\n        var ret = self.self;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_crypto_b8c92eaac23d0d80 = function(arg0) {\n        var ret = getObject(arg0).crypto;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_msCrypto_9ad6677321a08dd8 = function(arg0) {\n        var ret = getObject(arg0).msCrypto;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_static_accessor_MODULE_452b4680e8614c81 = function() {\n        var ret = module;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_require_f5521a5b85ad2542 = function(arg0, arg1, arg2) {\n        var ret = getObject(arg0).require(getStringFromWasm0(arg1, arg2));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_getRandomValues_dd27e6b0652b3236 = function(arg0) {\n        var ret = getObject(arg0).getRandomValues;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_newwithlength_5f4ce114a24dfe1e = function(arg0) {\n        var ret = new Uint8Array(arg0 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_randomFillSync_d2ba53160aec6aba = function(arg0, arg1, arg2) {\n        getObject(arg0).randomFillSync(getArrayU8FromWasm0(arg1, arg2));\n    };\n    imports.wbg.__wbg_subarray_a68f835ca2af506f = function(arg0, arg1, arg2) {\n        var ret = getObject(arg0).subarray(arg1 >>> 0, arg2 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_getRandomValues_e57c9b75ddead065 = function(arg0, arg1) {\n        getObject(arg0).getRandomValues(getObject(arg1));\n    };\n    imports.wbg.__wbindgen_number_new = function(arg0) {\n        var ret = arg0;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_is_null = function(arg0) {\n        var ret = getObject(arg0) === null;\n        return ret;\n    };\n    imports.wbg.__wbindgen_boolean_get = function(arg0) {\n        const v = getObject(arg0);\n        var ret = typeof(v) === 'boolean' ? (v ? 1 : 0) : 2;\n        return ret;\n    };\n    imports.wbg.__wbindgen_number_get = function(arg0, arg1) {\n        const obj = getObject(arg1);\n        var ret = typeof(obj) === 'number' ? obj : undefined;\n        getFloat64Memory0()[arg0 / 8 + 1] = isLikeNone(ret) ? 0 : ret;\n        getInt32Memory0()[arg0 / 4 + 0] = !isLikeNone(ret);\n    };\n    imports.wbg.__wbg_instanceof_Uint8Array_8a8537f46e056474 = function(arg0) {\n        var ret = getObject(arg0) instanceof Uint8Array;\n        return ret;\n    };\n    imports.wbg.__wbg_String_c8baaa0740def8c6 = function(arg0, arg1) {\n        var ret = String(getObject(arg1));\n        var ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len0;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n    };\n    imports.wbg.__wbg_objectStoreNames_1ffe882c543c8e87 = function(arg0) {\n        var ret = getObject(arg0).objectStoreNames;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_createObjectStore_65e7a072edacfa31 = function() { return handleError(function (arg0, arg1, arg2) {\n        var ret = getObject(arg0).createObjectStore(getStringFromWasm0(arg1, arg2));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_setonversionchange_0b223c05a23d2aeb = function(arg0, arg1) {\n        getObject(arg0).onversionchange = getObject(arg1);\n    };\n    imports.wbg.__wbg_setTimeout_1c75092906446b91 = function() { return handleError(function (arg0, arg1, arg2) {\n        var ret = getObject(arg0).setTimeout(getObject(arg1), arg2);\n        return ret;\n    }, arguments) };\n    imports.wbg.__wbg_clearTimeout_0ca9612f07e1cdae = function(arg0, arg1) {\n        getObject(arg0).clearTimeout(arg1);\n    };\n    imports.wbg.__wbg_new_d3138911a89329b0 = function() {\n        var ret = new Object();\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_newwithstrandinit_c07f0662ece15bc6 = function() { return handleError(function (arg0, arg1, arg2) {\n        var ret = new Request(getStringFromWasm0(arg0, arg1), getObject(arg2));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_headers_1a60dec7fbd28a3b = function(arg0) {\n        var ret = getObject(arg0).headers;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_set_f9448486a94c9aef = function() { return handleError(function (arg0, arg1, arg2, arg3, arg4) {\n        getObject(arg0).set(getStringFromWasm0(arg1, arg2), getStringFromWasm0(arg3, arg4));\n    }, arguments) };\n    imports.wbg.__wbg_fetch_427498e0ccea81f4 = function(arg0, arg1) {\n        var ret = getObject(arg0).fetch(getObject(arg1));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_instanceof_Response_ea36d565358a42f7 = function(arg0) {\n        var ret = getObject(arg0) instanceof Response;\n        return ret;\n    };\n    imports.wbg.__wbg_text_aeba5a5bbfef7f15 = function() { return handleError(function (arg0) {\n        var ret = getObject(arg0).text();\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_status_3a55bb50e744b834 = function(arg0) {\n        var ret = getObject(arg0).status;\n        return ret;\n    };\n    imports.wbg.__wbg_url_6e564c9e212456f8 = function(arg0, arg1) {\n        var ret = getObject(arg1).url;\n        var ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len0;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n    };\n    imports.wbg.__wbg_new_9d38005ad72b669a = function() { return handleError(function (arg0, arg1) {\n        var ret = new WebSocket(getStringFromWasm0(arg0, arg1));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_newwithstr_40ffb5985f57e166 = function() { return handleError(function (arg0, arg1, arg2, arg3) {\n        var ret = new WebSocket(getStringFromWasm0(arg0, arg1), getStringFromWasm0(arg2, arg3));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_setonmessage_7b6b02a417012ab3 = function(arg0, arg1) {\n        getObject(arg0).onmessage = getObject(arg1);\n    };\n    imports.wbg.__wbg_setonopen_c398a1a152e85bb6 = function(arg0, arg1) {\n        getObject(arg0).onopen = getObject(arg1);\n    };\n    imports.wbg.__wbg_setonerror_5b2b08538f86d976 = function(arg0, arg1) {\n        getObject(arg0).onerror = getObject(arg1);\n    };\n    imports.wbg.__wbg_send_2bad75269a8cc966 = function() { return handleError(function (arg0, arg1, arg2) {\n        getObject(arg0).send(getStringFromWasm0(arg1, arg2));\n    }, arguments) };\n    imports.wbg.__wbg_data_44aaea098b9f4c6b = function(arg0) {\n        var ret = getObject(arg0).data;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_is_string = function(arg0) {\n        var ret = typeof(getObject(arg0)) === 'string';\n        return ret;\n    };\n    imports.wbg.__wbg_setonupgradeneeded_20f0ca679878c9ef = function(arg0, arg1) {\n        getObject(arg0).onupgradeneeded = getObject(arg1);\n    };\n    imports.wbg.__wbg_setonblocked_41d9c99eb22760b9 = function(arg0, arg1) {\n        getObject(arg0).onblocked = getObject(arg1);\n    };\n    imports.wbg.__wbg_message_ed16bb8f4ce69db9 = function(arg0, arg1) {\n        var ret = getObject(arg1).message;\n        var ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len0;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n    };\n    imports.wbg.__wbg_put_7bd8bc65ebed9efa = function() { return handleError(function (arg0, arg1, arg2) {\n        var ret = getObject(arg0).put(getObject(arg1), getObject(arg2));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_Window_e2d90a08fe8bf335 = function(arg0) {\n        var ret = getObject(arg0).Window;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_WorkerGlobalScope_e36777b81ac97fe3 = function(arg0) {\n        var ret = getObject(arg0).WorkerGlobalScope;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_indexedDB_1f37e0a6280bf986 = function() { return handleError(function (arg0) {\n        var ret = getObject(arg0).indexedDB;\n        return isLikeNone(ret) ? 0 : addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_indexedDB_cb329d5c940ebec9 = function() { return handleError(function (arg0) {\n        var ret = getObject(arg0).indexedDB;\n        return isLikeNone(ret) ? 0 : addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_open_ae7f237eca208633 = function() { return handleError(function (arg0, arg1, arg2) {\n        var ret = getObject(arg0).open(getStringFromWasm0(arg1, arg2));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_get_4448787e42b51551 = function() { return handleError(function (arg0, arg1) {\n        var ret = getObject(arg0).get(getObject(arg1));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_stringify_f8bfc9e2d1e8b6a0 = function() { return handleError(function (arg0) {\n        var ret = JSON.stringify(getObject(arg0));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_delete_56e326dee0e4f01f = function() { return handleError(function (arg0, arg1) {\n        var ret = getObject(arg0).delete(getObject(arg1));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_instanceof_Error_4287ce7d75f0e3a2 = function(arg0) {\n        var ret = getObject(arg0) instanceof Error;\n        return ret;\n    };\n    imports.wbg.__wbg_message_1dfe93b595be8811 = function(arg0) {\n        var ret = getObject(arg0).message;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_getTimezoneOffset_41211a984662508b = function(arg0) {\n        var ret = getObject(arg0).getTimezoneOffset();\n        return ret;\n    };\n    imports.wbg.__wbg_isSafeInteger_91192d88df6f12b9 = function(arg0) {\n        var ret = Number.isSafeInteger(getObject(arg0));\n        return ret;\n    };\n    imports.wbg.__wbg_isArray_8480ed76e5369634 = function(arg0) {\n        var ret = Array.isArray(getObject(arg0));\n        return ret;\n    };\n    imports.wbg.__wbg_values_71935f80778b5113 = function(arg0) {\n        var ret = getObject(arg0).values();\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_has_3850edde6df9191b = function() { return handleError(function (arg0, arg1) {\n        var ret = Reflect.has(getObject(arg0), getObject(arg1));\n        return ret;\n    }, arguments) };\n    imports.wbg.__wbg_entries_38f300d4350c7466 = function(arg0) {\n        var ret = Object.entries(getObject(arg0));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_coreresponsehandler_ba48eae32b1e9248 = function(arg0, arg1, arg2, arg3) {\n        core_response_handler(arg0 >>> 0, takeObject(arg1), arg2 >>> 0, arg3 !== 0);\n    };\n    imports.wbg.__wbg_new_16f24b0728c5e67b = function() {\n        var ret = new Array();\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_push_a72df856079e6930 = function(arg0, arg1) {\n        var ret = getObject(arg0).push(getObject(arg1));\n        return ret;\n    };\n    imports.wbg.__wbg_new_b563cacb0bf27b31 = function() {\n        var ret = new Map();\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_set_e543156a3c4d08a8 = function(arg0, arg1, arg2) {\n        var ret = getObject(arg0).set(getObject(arg1), getObject(arg2));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_set_f1a4ac8f3a605b11 = function(arg0, arg1, arg2) {\n        getObject(arg0)[takeObject(arg1)] = takeObject(arg2);\n    };\n    imports.wbg.__wbindgen_debug_string = function(arg0, arg1) {\n        var ret = debugString(getObject(arg1));\n        var ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len0;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n    };\n    imports.wbg.__wbindgen_throw = function(arg0, arg1) {\n        throw new Error(getStringFromWasm0(arg0, arg1));\n    };\n    imports.wbg.__wbg_then_a6860c82b90816ca = function(arg0, arg1) {\n        var ret = getObject(arg0).then(getObject(arg1));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_then_58a04e42527f52c6 = function(arg0, arg1, arg2) {\n        var ret = getObject(arg0).then(getObject(arg1), getObject(arg2));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_resolve_4f8f547f26b30b27 = function(arg0) {\n        var ret = Promise.resolve(getObject(arg0));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_result_86c5cd0515f694ca = function() { return handleError(function (arg0) {\n        var ret = getObject(arg0).result;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_error_ac777d8b2aa794c6 = function() { return handleError(function (arg0) {\n        var ret = getObject(arg0).error;\n        return isLikeNone(ret) ? 0 : addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_instanceof_Window_434ce1849eb4e0fc = function(arg0) {\n        var ret = true;\n        return ret;\n    };\n    imports.wbg.__wbg_close_dfed2f697da2eca4 = function() { return handleError(function (arg0) {\n        getObject(arg0).close();\n    }, arguments) };\n    imports.wbg.__wbindgen_closure_wrapper748 = function(arg0, arg1, arg2) {\n        var ret = makeClosure(arg0, arg1, 37, __wbg_adapter_34);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_closure_wrapper758 = function(arg0, arg1, arg2) {\n        var ret = makeClosure(arg0, arg1, 34, __wbg_adapter_37);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_closure_wrapper5404 = function(arg0, arg1, arg2) {\n        var ret = makeMutClosure(arg0, arg1, 173, __wbg_adapter_40);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_closure_wrapper5409 = function(arg0, arg1, arg2) {\n        var ret = makeMutClosure(arg0, arg1, 177, __wbg_adapter_43);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_closure_wrapper5414 = function(arg0, arg1, arg2) {\n        var ret = makeMutClosure(arg0, arg1, 181, __wbg_adapter_46);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_closure_wrapper5420 = function(arg0, arg1, arg2) {\n        var ret = makeMutClosure(arg0, arg1, 185, __wbg_adapter_49);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_closure_wrapper6289 = function(arg0, arg1, arg2) {\n        var ret = makeMutClosure(arg0, arg1, 1159, __wbg_adapter_52);\n        return addHeapObject(ret);\n    };\n    imports['env'] = {\n        malloc: function(size) {\n            return wasm.__wbindgen_malloc(size);\n        },\n        free: function(ptr) {\n            wasm.__wbindgen_free(ptr);\n        },\n        now: function() {\n            return new Date().getTime();\n        },\n    };\n\n    if (typeof input === 'string' || (typeof Request === 'function' && input instanceof Request) || (typeof URL === 'function' && input instanceof URL)) {\n        input = fetch(input);\n    }\n\n\n\n    const { instance, module } = await load(await input, imports);\n\n    wasm = instance.exports;\n    init.__wbindgen_wasm_module = module;\n\n    return wasm;\n}\n\n\n\n\nfunction replaceUndefinedWithNulls(value) {\n    if (value === undefined) {\n        return null;\n    }\n    if (value instanceof Blob) {\n        return value;\n    }\n    if (typeof value === \"object\" && value !== null) {\n        const result = Array.isArray(value) ? [] : {};\n        for (const key in value) {\n            result[key] = replaceUndefinedWithNulls(value[key]);\n        }\n        return result;\n    }\n    return value;\n};\n\nfunction core_response_handler(request_id, params, response_type, finished) {\n    postMessage({\n        type: 'response',\n        requestId: request_id,\n        params: replaceUndefinedWithNulls(params),\n        responseType: response_type,\n        finished,\n    });\n}\n\nasync function replaceBlobsWithArrayBuffers(value) {\n    if (value instanceof Blob) {\n        return await value.arrayBuffer();\n    }\n    if (typeof value === \"bigint\") {\n        if (value < Number.MAX_SAFE_INTEGER && value > Number.MIN_SAFE_INTEGER) {\n            return Number(value);\n        } else {\n            return value.toString();\n        }\n    }\n    if (typeof value === \"object\" && value !== null) {\n        const result = Array.isArray(value) ? [] : {};\n        for (const key in value) {\n            result[key] = await replaceBlobsWithArrayBuffers(value[key]);\n        }\n        return result;\n    }\n    return value;\n}\n\nself.onmessage = (e) => {\n    const message = e.data;\n    switch (message.type) {\n    case 'init':\n        (async () => {\n            await init(message.wasmModule);\n            postMessage({ type: 'init' });\n        })();\n        break;\n\n    case 'createContext':\n        postMessage({\n            type: 'createContext',\n            result: core_create_context(message.configJson),\n            requestId: message.requestId,\n        });\n        break;\n\n    case 'destroyContext':\n        core_destroy_context(message.context);\n        postMessage({\n            type: 'destroyContext'\n        });\n        break;\n\n    case 'request':\n        (async () => {\n            core_request(\n                message.context,\n                message.functionName,\n                await replaceBlobsWithArrayBuffers(message.functionParams),\n                message.requestId,\n            );\n        })();\n        break;\n    }\n};\n`;\n\n\nlet options = null;\n\nfunction libWebSetup(libOptions) {\n    options = libOptions;\n}\n\nfunction libWeb() {\n    function debugLog(message) {\n        if (options && options.debugLog) {\n            options.debugLog(message);\n        }\n    }\n\n    const workerBlob = new Blob(\n        [workerScript],\n        { type: 'application/javascript' }\n    );\n    const workerUrl = URL.createObjectURL(workerBlob);\n    const worker = new Worker(workerUrl);\n\n\n    let nextCreateContextRequestId = 1;\n    const createContextRequests = new Map();\n    let initComplete = false;\n\n    let responseHandler = null;\n    const library = {\n        setResponseParamsHandler: (handler) => {\n            responseHandler = handler;\n        },\n        createContext: (configJson) => {\n            return new Promise((resolve) => {\n                const requestId = nextCreateContextRequestId;\n                nextCreateContextRequestId += 1;\n                createContextRequests.set(requestId, {\n                    configJson,\n                    resolve,\n                })\n                if (initComplete) {\n                    worker.postMessage({\n                        type: 'createContext',\n                        requestId,\n                        configJson,\n                    });\n                }\n            });\n        },\n        destroyContext: (context) => {\n            worker.postMessage({\n                type: 'destroyContext',\n                context,\n            })\n        },\n        sendRequestParams: (context, requestId, functionName, functionParams) => {\n            worker.postMessage({\n                type: 'request',\n                context,\n                requestId,\n                functionName,\n                functionParams\n            })\n        }\n    };\n\n    worker.onmessage = (evt) => {\n        const message = evt.data;\n        switch (message.type) {\n        case 'init':\n            initComplete = true;\n            for (const [requestId, request] of createContextRequests.entries()) {\n                worker.postMessage({\n                    type: 'createContext',\n                    requestId,\n                    configJson: request.configJson,\n                });\n            }\n            break;\n        case 'createContext':\n            const request = createContextRequests.get(message.requestId);\n            if (request) {\n                createContextRequests.delete(message.requestId);\n                request.resolve(message.result);\n            }\n            break;\n        case 'destroyContext':\n            break;\n        case 'response':\n            if (responseHandler) {\n                responseHandler(message.requestId, message.params, message.responseType, message.finished);\n            }\n            break;\n        }\n    }\n\n    worker.onerror = (evt) => {\n        console.log(`Error from Web Worker: ${evt.message}`);\n    };\n\n    const loadModule = async () => {\n        const fetched = fetch((options && options.binaryURL) || '/tonclient.wasm');\n        if (WebAssembly.compileStreaming) {\n            debugLog('compileStreaming binary');\n            return await WebAssembly.compileStreaming(fetched);\n        }\n        debugLog('compile binary');\n        return await WebAssembly.compile(await (await fetched).arrayBuffer());\n    };\n\n    (async () => {\n        const e = Date.now();\n        const wasmModule = await ((options && options.loadModule) || loadModule)();\n        worker.postMessage({\n            type: 'init',\n            wasmModule,\n        });\n        debugLog(`compile time ${Date.now() - e}`);\n    })();\n\n    return Promise.resolve(library);\n}\n\n\n//# sourceURL=webpack://simplepage/./node_modules/@tonclient/lib-web/index.js?");

/***/ }),

/***/ "./node_modules/everscale-inpage-provider/dist/api.js":
/*!************************************************************!*\
  !*** ./node_modules/everscale-inpage-provider/dist/api.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\n\n//# sourceURL=webpack://simplepage/./node_modules/everscale-inpage-provider/dist/api.js?");

/***/ }),

/***/ "./node_modules/everscale-inpage-provider/dist/contract.js":
/*!*****************************************************************!*\
  !*** ./node_modules/everscale-inpage-provider/dist/contract.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TvmException = exports.Contract = void 0;\nconst models_1 = __webpack_require__(/*! ./models */ \"./node_modules/everscale-inpage-provider/dist/models.js\");\n/**\n * @category Contract\n */\nclass Contract {\n    constructor(provider, abi, address) {\n        if (!Array.isArray(abi.functions)) {\n            throw new Error('Invalid abi. Functions array required');\n        }\n        if (!Array.isArray(abi.events)) {\n            throw new Error('Invalid abi. Events array required');\n        }\n        this._provider = provider;\n        this._abi = JSON.stringify(abi);\n        this._functions = abi.functions.reduce((functions, item) => {\n            functions[item.name] = { inputs: item.inputs || [], outputs: item.outputs || [] };\n            return functions;\n        }, {});\n        this._events = abi.events.reduce((events, item) => {\n            events[item.name] = { inputs: item.inputs || [] };\n            return events;\n        }, {});\n        this._address = address;\n        class ContractMethodImpl {\n            constructor(provider, functionAbi, abi, address, method, params) {\n                this.provider = provider;\n                this.functionAbi = functionAbi;\n                this.abi = abi;\n                this.address = address;\n                this.method = method;\n                this.params = (0, models_1.serializeTokensObject)(params);\n            }\n            async send(args) {\n                const { transaction } = await this.provider.rawApi.sendMessage({\n                    sender: args.from.toString(),\n                    recipient: this.address.toString(),\n                    amount: args.amount,\n                    bounce: args.bounce == null ? true : args.bounce,\n                    payload: {\n                        abi: this.abi,\n                        method: this.method,\n                        params: this.params,\n                    },\n                });\n                return (0, models_1.parseTransaction)(transaction);\n            }\n            async sendWithResult(args) {\n                const subscriber = this.provider.createSubscriber();\n                try {\n                    // Parent transaction from wallet\n                    let parentTransaction;\n                    // Child transaction promise\n                    let resolveChildTransactionPromise;\n                    const childTransactionPromise = new Promise((resolve) => {\n                        resolveChildTransactionPromise = (tx) => resolve(tx);\n                    });\n                    // Array for collecting transactions on target before parent transaction promise resolution\n                    const possibleChildren = [];\n                    // Subscribe to this account\n                    subscriber.transactions(this.address)\n                        .flatMap(batch => batch.transactions)\n                        // Listen only messages from sender\n                        .filter(item => { var _a; return ((_a = item.inMessage.src) === null || _a === void 0 ? void 0 : _a.equals(args.from)) || false; })\n                        .on((tx) => {\n                        if (parentTransaction == null) {\n                            // If we don't known whether the message was sent just collect all transactions from the sender\n                            possibleChildren.push(tx);\n                        }\n                        else if (parentTransaction.possibleMessages.findIndex((msg) => msg.hash == tx.inMessage.hash) >= 0) {\n                            // Resolve promise if transaction was found\n                            resolveChildTransactionPromise === null || resolveChildTransactionPromise === void 0 ? void 0 : resolveChildTransactionPromise(tx);\n                        }\n                    });\n                    // Send message\n                    const transaction = await this.send(args);\n                    // Extract all outgoing messages from the parent transaction to this contract\n                    const possibleMessages = transaction.outMessages.filter(msg => { var _a; return ((_a = msg.dst) === null || _a === void 0 ? void 0 : _a.equals(this.address)) || false; });\n                    // Update stream state\n                    parentTransaction = {\n                        transaction,\n                        possibleMessages,\n                    };\n                    // Check whether child transaction was already found\n                    const alreadyReceived = possibleChildren.find((tx) => {\n                        return possibleMessages.findIndex((msg) => msg.hash == tx.inMessage.hash) >= 0;\n                    });\n                    if (alreadyReceived != null) {\n                        resolveChildTransactionPromise === null || resolveChildTransactionPromise === void 0 ? void 0 : resolveChildTransactionPromise(alreadyReceived);\n                    }\n                    const childTransaction = await childTransactionPromise;\n                    // Parse output\n                    let output = undefined;\n                    try {\n                        const result = await this.provider.rawApi.decodeTransaction({\n                            transaction: (0, models_1.serializeTransaction)(childTransaction),\n                            abi: this.abi,\n                            method: this.method,\n                        });\n                        if (result != null) {\n                            output = this.functionAbi.outputs != null\n                                ? (0, models_1.parseTokensObject)(this.functionAbi.outputs, result.output)\n                                : {};\n                        }\n                    }\n                    catch (e) {\n                        console.error(e);\n                    }\n                    // Done\n                    return {\n                        parentTransaction: parentTransaction.transaction,\n                        childTransaction,\n                        output,\n                    };\n                }\n                finally {\n                    await subscriber.unsubscribe();\n                }\n            }\n            async estimateFees(args) {\n                const { fees } = await this.provider.rawApi.estimateFees({\n                    sender: args.from.toString(),\n                    recipient: this.address.toString(),\n                    amount: args.amount,\n                    payload: {\n                        abi: this.abi,\n                        method: this.method,\n                        params: this.params,\n                    },\n                });\n                return fees;\n            }\n            async sendExternal(args) {\n                let method = args.withoutSignature === true\n                    ? this.provider.rawApi.sendUnsignedExternalMessage\n                    : this.provider.rawApi.sendExternalMessage;\n                let { transaction, output } = await method({\n                    publicKey: args.publicKey,\n                    recipient: this.address.toString(),\n                    stateInit: args.stateInit,\n                    payload: {\n                        abi: this.abi,\n                        method: this.method,\n                        params: this.params,\n                    },\n                    local: args.local,\n                });\n                return {\n                    transaction: (0, models_1.parseTransaction)(transaction),\n                    output: output != null ? (0, models_1.parseTokensObject)(this.functionAbi.outputs, output) : undefined,\n                };\n            }\n            async call(args = {}) {\n                let { output, code } = await this.provider.rawApi.runLocal({\n                    address: this.address.toString(),\n                    cachedState: args.cachedState,\n                    responsible: args.responsible,\n                    functionCall: {\n                        abi: this.abi,\n                        method: this.method,\n                        params: this.params,\n                    },\n                });\n                if (output == null || code != 0) {\n                    throw new TvmException(code);\n                }\n                else {\n                    return (0, models_1.parseTokensObject)(this.functionAbi.outputs, output);\n                }\n            }\n        }\n        this._methods = new Proxy({}, {\n            get: (_object, method) => {\n                const rawAbi = this._functions[method];\n                return (params) => new ContractMethodImpl(this._provider, rawAbi, this._abi, this._address, method, params);\n            },\n        });\n    }\n    get methods() {\n        return this._methods;\n    }\n    get address() {\n        return this._address;\n    }\n    get abi() {\n        return this._abi;\n    }\n    async decodeTransaction(args) {\n        try {\n            const result = await this._provider.rawApi.decodeTransaction({\n                transaction: (0, models_1.serializeTransaction)(args.transaction),\n                abi: this._abi,\n                method: args.methods,\n            });\n            if (result == null) {\n                return undefined;\n            }\n            let { method, input, output } = result;\n            const rawAbi = this._functions[method];\n            return {\n                method,\n                input: rawAbi.inputs != null ? (0, models_1.parseTokensObject)(rawAbi.inputs, input) : {},\n                output: rawAbi.outputs != null ? (0, models_1.parseTokensObject)(rawAbi.outputs, output) : {},\n            };\n        }\n        catch (_) {\n            return undefined;\n        }\n    }\n    async decodeTransactionEvents(args) {\n        try {\n            const { events } = await this._provider.rawApi.decodeTransactionEvents({\n                transaction: (0, models_1.serializeTransaction)(args.transaction),\n                abi: this._abi,\n            });\n            const result = [];\n            for (const { event, data } of events) {\n                const rawAbi = this._events[event];\n                result.push({\n                    event,\n                    data: rawAbi.inputs != null ? (0, models_1.parseTokensObject)(rawAbi.inputs, data) : {},\n                });\n            }\n            return result;\n        }\n        catch (_) {\n            return [];\n        }\n    }\n    async decodeInputMessage(args) {\n        try {\n            const result = await this._provider.rawApi.decodeInput({\n                abi: this._abi,\n                body: args.body,\n                internal: args.internal,\n                method: args.methods,\n            });\n            if (result == null) {\n                return undefined;\n            }\n            let { method, input } = result;\n            const rawAbi = this._functions[method];\n            return {\n                method,\n                input: rawAbi.inputs != null ? (0, models_1.parseTokensObject)(rawAbi.inputs, input) : {},\n            };\n        }\n        catch (_) {\n            return undefined;\n        }\n    }\n    async decodeOutputMessage(args) {\n        try {\n            const result = await this._provider.rawApi.decodeOutput({\n                abi: this._abi,\n                body: args.body,\n                method: args.methods,\n            });\n            if (result == null) {\n                return undefined;\n            }\n            let { method, output } = result;\n            const rawAbi = this._functions[method];\n            return {\n                method,\n                output: rawAbi.outputs != null ? (0, models_1.parseTokensObject)(rawAbi.outputs, output) : {},\n            };\n        }\n        catch (_) {\n            return undefined;\n        }\n    }\n}\nexports.Contract = Contract;\n/**\n * @category Contract\n */\nclass TvmException extends Error {\n    constructor(code) {\n        super(`TvmException: ${code}`);\n        this.code = code;\n    }\n}\nexports.TvmException = TvmException;\n\n\n//# sourceURL=webpack://simplepage/./node_modules/everscale-inpage-provider/dist/contract.js?");

/***/ }),

/***/ "./node_modules/everscale-inpage-provider/dist/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/everscale-inpage-provider/dist/index.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ProviderNotInitializedException = exports.ProviderNotFoundException = exports.ProviderRpcClient = exports.hasEverscaleProvider = exports.mergeTransactions = exports.AddressLiteral = exports.Address = exports.Subscriber = void 0;\nconst models_1 = __webpack_require__(/*! ./models */ \"./node_modules/everscale-inpage-provider/dist/models.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"./node_modules/everscale-inpage-provider/dist/utils.js\");\nconst subscriber = __importStar(__webpack_require__(/*! ./stream */ \"./node_modules/everscale-inpage-provider/dist/stream.js\"));\nconst contract = __importStar(__webpack_require__(/*! ./contract */ \"./node_modules/everscale-inpage-provider/dist/contract.js\"));\n__exportStar(__webpack_require__(/*! ./api */ \"./node_modules/everscale-inpage-provider/dist/api.js\"), exports);\n__exportStar(__webpack_require__(/*! ./models */ \"./node_modules/everscale-inpage-provider/dist/models.js\"), exports);\n__exportStar(__webpack_require__(/*! ./contract */ \"./node_modules/everscale-inpage-provider/dist/contract.js\"), exports);\nvar stream_1 = __webpack_require__(/*! ./stream */ \"./node_modules/everscale-inpage-provider/dist/stream.js\");\nObject.defineProperty(exports, \"Subscriber\", ({ enumerable: true, get: function () { return stream_1.Subscriber; } }));\nvar utils_2 = __webpack_require__(/*! ./utils */ \"./node_modules/everscale-inpage-provider/dist/utils.js\");\nObject.defineProperty(exports, \"Address\", ({ enumerable: true, get: function () { return utils_2.Address; } }));\nObject.defineProperty(exports, \"AddressLiteral\", ({ enumerable: true, get: function () { return utils_2.AddressLiteral; } }));\nObject.defineProperty(exports, \"mergeTransactions\", ({ enumerable: true, get: function () { return utils_2.mergeTransactions; } }));\nlet ensurePageLoaded;\nif (document.readyState == 'complete') {\n    ensurePageLoaded = Promise.resolve();\n}\nelse {\n    ensurePageLoaded = new Promise((resolve) => {\n        window.addEventListener('load', () => {\n            resolve();\n        });\n    });\n}\n/**\n * @category Provider\n */\nasync function hasEverscaleProvider() {\n    await ensurePageLoaded;\n    return window.__hasEverscaleProvider === true ||\n        window.hasTonProvider === true;\n}\nexports.hasEverscaleProvider = hasEverscaleProvider;\n/**\n * @category Provider\n */\nclass ProviderRpcClient {\n    constructor(properties = {}) {\n        this._subscriptions = {};\n        this._contractSubscriptions = {};\n        const self = this;\n        // Create contract proxy type\n        class ProviderContract extends contract.Contract {\n            constructor(abi, address) {\n                super(self, abi, address);\n            }\n        }\n        this.Contract = ProviderContract;\n        // Create subscriber proxy type\n        class ProviderSubscriber extends subscriber.Subscriber {\n            constructor() {\n                super(self);\n            }\n        }\n        this.Subscriber = ProviderSubscriber;\n        this._properties = properties;\n        // Wrap provider requests\n        this._api = new Proxy({}, {\n            get: (_object, method) => (params) => {\n                if (this._provider != null) {\n                    return this._provider.request({ method, params: params });\n                }\n                else {\n                    throw new ProviderNotInitializedException();\n                }\n            },\n        });\n        // Initialize provider with injected object by default\n        this._provider = window.__ever || window.ton;\n        if (this._provider != null) {\n            // Provider as already injected\n            this._mainInitializationPromise = Promise.resolve();\n        }\n        else {\n            // Wait until page is loaded and initialization complete\n            this._mainInitializationPromise = hasEverscaleProvider().then((hasProvider) => new Promise((resolve, reject) => {\n                if (!hasProvider) {\n                    // Fully loaded page doesn't even contain provider flag\n                    reject(new ProviderNotFoundException());\n                    return;\n                }\n                // Wait injected provider initialization otherwise\n                this._provider = window.__ever || window.ton;\n                if (this._provider != null) {\n                    resolve();\n                }\n                else {\n                    const eventName = window.__hasEverscaleProvider === true ? 'ever#initialized' : 'ton#initialized';\n                    window.addEventListener(eventName, (_data) => {\n                        this._provider = window.__ever || window.ton;\n                        resolve();\n                    });\n                }\n            }));\n        }\n        // Will only register handlers for successfully loaded injected provider\n        this._mainInitializationPromise.then(() => {\n            if (this._provider != null) {\n                this._registerEventHandlers(this._provider);\n            }\n        });\n    }\n    /**\n     * Checks whether this page has injected Everscale provider\n     */\n    async hasProvider() {\n        return hasEverscaleProvider();\n    }\n    /**\n     * Waits until provider api will be available. Calls `fallback` if no provider was found\n     *\n     * @throws ProviderNotFoundException when no provider found\n     */\n    async ensureInitialized() {\n        try {\n            await this._mainInitializationPromise;\n        }\n        catch (e) {\n            if (this._properties.fallback == null) {\n                throw e;\n            }\n            if (this._additionalInitializationPromise == null) {\n                this._additionalInitializationPromise = this._properties.fallback().then(async (provider) => {\n                    this._provider = provider;\n                    this._registerEventHandlers(this._provider);\n                });\n            }\n            await this._additionalInitializationPromise;\n        }\n    }\n    /**\n     * Whether provider api is ready\n     */\n    get isInitialized() {\n        return this._provider != null;\n    }\n    /**\n     * Raw provider\n     */\n    get raw() {\n        if (this._provider != null) {\n            return this._provider;\n        }\n        else {\n            throw new ProviderNotInitializedException();\n        }\n    }\n    /**\n     * Raw provider api\n     */\n    get rawApi() {\n        return this._api;\n    }\n    /**\n     * Creates typed contract wrapper.\n     *\n     * @param abi Readonly object (must be declared with `as const`)\n     * @param address Default contract address\n     *\n     * @deprecated `new ever.Contract(abi, address)` should be used instead\n     */\n    createContract(abi, address) {\n        return new this.Contract(abi, address);\n    }\n    /**\n     * Creates subscriptions group\n     *\n     * @deprecated `new ever.Subscriber()` should be used instead\n     */\n    createSubscriber() {\n        return new this.Subscriber();\n    }\n    /**\n     * Requests new permissions for current origin.\n     * Shows an approval window to the user.\n     * Will overwrite already existing permissions\n     *\n     * ---\n     * Required permissions: none\n     */\n    async requestPermissions(args) {\n        const result = await this._api.requestPermissions({\n            permissions: args.permissions,\n        });\n        return (0, models_1.parsePermissions)(result);\n    }\n    /**\n     * Updates `accountInteraction` permission value\n     *\n     * ---\n     * Requires permissions: `accountInteraction`\n     */\n    async changeAccount() {\n        await this._api.changeAccount();\n    }\n    /**\n     * Removes all permissions for current origin and stops all subscriptions\n     */\n    async disconnect() {\n        await this._api.disconnect();\n    }\n    async subscribe(eventName, params) {\n        class SubscriptionImpl {\n            constructor(_subscribe, _unsubscribe) {\n                this._subscribe = _subscribe;\n                this._unsubscribe = _unsubscribe;\n                this._listeners = {\n                    ['data']: [],\n                    ['subscribed']: [],\n                    ['unsubscribed']: [],\n                };\n            }\n            on(eventName, listener) {\n                this._listeners[eventName].push(listener);\n                return this;\n            }\n            async subscribe() {\n                await this._subscribe(this);\n                for (const handler of this._listeners['subscribed']) {\n                    handler();\n                }\n            }\n            async unsubscribe() {\n                await this._unsubscribe();\n                for (const handler of this._listeners['unsubscribed']) {\n                    handler();\n                }\n            }\n            notify(data) {\n                for (const handler of this._listeners['data']) {\n                    handler(data);\n                }\n            }\n        }\n        let existingSubscriptions = this._getEventSubscriptions(eventName);\n        const id = (0, utils_1.getUniqueId)();\n        switch (eventName) {\n            case 'connected':\n            case 'disconnected':\n            case 'networkChanged':\n            case 'permissionsChanged':\n            case 'loggedOut': {\n                const subscription = new SubscriptionImpl(async (subscription) => {\n                    if (existingSubscriptions[id] != null) {\n                        return;\n                    }\n                    existingSubscriptions[id] = (data) => {\n                        subscription.notify(data);\n                    };\n                }, async () => {\n                    delete existingSubscriptions[id];\n                });\n                await subscription.subscribe();\n                return subscription;\n            }\n            case 'transactionsFound':\n            case 'contractStateChanged': {\n                const address = params.address.toString();\n                const subscription = new SubscriptionImpl(async (subscription) => {\n                    if (existingSubscriptions[id] != null) {\n                        return;\n                    }\n                    existingSubscriptions[id] = ((data) => {\n                        if (data.address.toString() == address) {\n                            subscription.notify(data);\n                        }\n                    });\n                    let contractSubscriptions = this._contractSubscriptions[address];\n                    if (contractSubscriptions == null) {\n                        contractSubscriptions = {};\n                        this._contractSubscriptions[address] = contractSubscriptions;\n                    }\n                    contractSubscriptions[id] = {\n                        state: eventName == 'contractStateChanged',\n                        transactions: eventName == 'transactionsFound',\n                    };\n                    const { total, withoutExcluded, } = foldSubscriptions(Object.values(contractSubscriptions), contractSubscriptions[id]);\n                    try {\n                        if (total.transactions != withoutExcluded.transactions || total.state != withoutExcluded.state) {\n                            await this.rawApi.subscribe({ address, subscriptions: total });\n                        }\n                    }\n                    catch (e) {\n                        delete existingSubscriptions[id];\n                        delete contractSubscriptions[id];\n                        throw e;\n                    }\n                }, async () => {\n                    delete existingSubscriptions[id];\n                    const contractSubscriptions = this._contractSubscriptions[address];\n                    if (contractSubscriptions == null) {\n                        return;\n                    }\n                    const updates = contractSubscriptions[id];\n                    const { total, withoutExcluded } = foldSubscriptions(Object.values(contractSubscriptions), updates);\n                    delete contractSubscriptions[id];\n                    if (!withoutExcluded.transactions && !withoutExcluded.state) {\n                        await this.rawApi.unsubscribe({ address });\n                    }\n                    else if (total.transactions != withoutExcluded.transactions || total.state != withoutExcluded.state) {\n                        await this.rawApi.subscribe({ address, subscriptions: withoutExcluded });\n                    }\n                });\n                await subscription.subscribe();\n                return subscription;\n            }\n            default: {\n                throw new Error(`Unknown event ${eventName}`);\n            }\n        }\n    }\n    /**\n     * Returns provider api state\n     *\n     * ---\n     * Required permissions: none\n     */\n    async getProviderState() {\n        const state = await this._api.getProviderState();\n        return {\n            ...state,\n            permissions: (0, models_1.parsePermissions)(state.permissions),\n        };\n    }\n    /**\n     * Requests contract data\n     *\n     * ---\n     * Required permissions: `basic`\n     */\n    async getFullContractState(args) {\n        return await this._api.getFullContractState({\n            address: args.address.toString(),\n        });\n    }\n    /**\n     * Requests accounts with specified code hash\n     *\n     * ---\n     * Required permissions: `basic`\n     */\n    async getAccountsByCodeHash(args) {\n        const { accounts, continuation } = await this._api.getAccountsByCodeHash({\n            ...args,\n        });\n        return {\n            accounts: accounts.map((address) => new utils_1.Address(address)),\n            continuation,\n        };\n    }\n    /**\n     * Requests contract transactions\n     *\n     * ---\n     * Required permissions: `basic`\n     */\n    async getTransactions(args) {\n        const { transactions, continuation, info } = await this._api.getTransactions({\n            ...args,\n            address: args.address.toString(),\n        });\n        return {\n            transactions: transactions.map(models_1.parseTransaction),\n            continuation,\n            info,\n        };\n    }\n    /**\n     * Searches transaction by hash\n     *\n     * ---\n     * Required permissions: `basic`\n     */\n    async getTransaction(args) {\n        const { transaction } = await this._api.getTransaction({\n            ...args,\n        });\n        return {\n            transaction: transaction ? (0, models_1.parseTransaction)(transaction) : undefined,\n        };\n    }\n    /**\n     * Calculates contract address from code and init params\n     *\n     * ---\n     * Required permissions: `basic`\n     */\n    async getExpectedAddress(abi, args) {\n        const { address } = await this._api.getExpectedAddress({\n            abi: JSON.stringify(abi),\n            ...args,\n            initParams: (0, models_1.serializeTokensObject)(args.initParams),\n        });\n        return new utils_1.Address(address);\n    }\n    /**\n     * Computes hash of base64 encoded BOC\n     *\n     * ---\n     * Required permissions: `basic`\n     */\n    async getBocHash(boc) {\n        return await this._api.getBocHash({\n            boc,\n        }).then(({ hash }) => hash);\n    }\n    /**\n     * Creates base64 encoded BOC\n     *\n     * ---\n     * Required permissions: `basic`\n     */\n    async packIntoCell(args) {\n        return await this._api.packIntoCell({\n            structure: args.structure,\n            data: (0, models_1.serializeTokensObject)(args.data),\n        });\n    }\n    /**\n     * Decodes base64 encoded BOC\n     *\n     * ---\n     * Required permissions: `basic`\n     */\n    async unpackFromCell(args) {\n        const { data } = await this._api.unpackFromCell({\n            ...args,\n            structure: args.structure,\n        });\n        return {\n            data: (0, models_1.parseTokensObject)(args.structure, data),\n        };\n    }\n    /**\n     * Extracts public key from raw account state\n     *\n     * **NOTE:** can only be used on contracts which are deployed and has `pubkey` header\n     *\n     * ---\n     * Required permissions: `basic`\n     */\n    async extractPublicKey(boc) {\n        const { publicKey } = await this._api.extractPublicKey({\n            boc,\n        });\n        return publicKey;\n    }\n    /**\n     * Converts base64 encoded contract code into tvc with default init data\n     *\n     * ---\n     * Required permissions: `basic`\n     */\n    async codeToTvc(code) {\n        const { tvc } = await this._api.codeToTvc({\n            code,\n        });\n        return tvc;\n    }\n    /**\n     * Splits base64 encoded state init into code and data\n     *\n     * ---\n     * Required permissions: `basic`\n     */\n    async splitTvc(tvc) {\n        return await this._api.splitTvc({\n            tvc,\n        });\n    }\n    /**\n     * Adds asset to the selected account\n     *\n     * ---\n     * Requires permissions: `accountInteraction`\n     */\n    async addAsset(args) {\n        let params;\n        switch (args.type) {\n            case 'tip3_token': {\n                params = {\n                    rootContract: args.params.rootContract.toString(),\n                };\n                break;\n            }\n            default:\n                throw new Error('Unknown asset type');\n        }\n        return await this._api.addAsset({\n            account: args.account.toString(),\n            type: args.type,\n            params,\n        });\n    }\n    async verifySignature(args) {\n        return await this._api.verifySignature(args);\n    }\n    /**\n     * Signs arbitrary data.\n     *\n     * NOTE: hashes data before signing. Use `signDataRaw` to sign without hash.\n     *\n     * ---\n     * Requires permissions: `accountInteraction`\n     */\n    async signData(args) {\n        return await this._api.signData(args);\n    }\n    /**\n     * Signs arbitrary data without hashing it\n     *\n     * ---\n     * Requires permissions: `accountInteraction`\n     */\n    async signDataRaw(args) {\n        return await this._api.signDataRaw(args);\n    }\n    /**\n     * Encrypts arbitrary data with specified algorithm for each specified recipient\n     *\n     * ---\n     * Requires permissions: `accountInteraction`\n     */\n    async encryptData(args) {\n        const { encryptedData } = await this._api.encryptData(args);\n        return encryptedData;\n    }\n    /**\n     * Decrypts encrypted data. Returns base64 encoded data\n     *\n     * ---\n     * Requires permissions: `accountInteraction`\n     */\n    async decryptData(encryptedData) {\n        const { data } = await this._api.decryptData({ encryptedData });\n        return data;\n    }\n    /**\n     * Sends internal message from user account.\n     * Shows an approval window to the user.\n     *\n     * ---\n     * Required permissions: `accountInteraction`\n     */\n    async sendMessage(args) {\n        const { transaction } = await this._api.sendMessage({\n            ...args,\n            sender: args.sender.toString(),\n            recipient: args.recipient.toString(),\n            payload: args.payload ? ({\n                abi: args.payload.abi,\n                method: args.payload.method,\n                params: (0, models_1.serializeTokensObject)(args.payload.params),\n            }) : undefined,\n        });\n        return {\n            transaction: (0, models_1.parseTransaction)(transaction),\n        };\n    }\n    _registerEventHandlers(provider) {\n        const knownEvents = {\n            'connected': (data) => data,\n            'disconnected': (data) => data,\n            'transactionsFound': (data) => ({\n                address: new utils_1.Address(data.address),\n                transactions: data.transactions.map(models_1.parseTransaction),\n                info: data.info,\n            }),\n            'contractStateChanged': (data) => ({\n                address: new utils_1.Address(data.address),\n                state: data.state,\n            }),\n            'networkChanged': data => data,\n            'permissionsChanged': (data) => ({\n                permissions: (0, models_1.parsePermissions)(data.permissions),\n            }),\n            'loggedOut': data => data,\n        };\n        for (const [eventName, extractor] of Object.entries(knownEvents)) {\n            provider.addListener(eventName, (data) => {\n                const handlers = this._subscriptions[eventName];\n                if (handlers == null) {\n                    return;\n                }\n                const parsed = extractor(data);\n                for (const handler of Object.values(handlers)) {\n                    handler(parsed);\n                }\n            });\n        }\n    }\n    _getEventSubscriptions(eventName) {\n        let existingSubscriptions = this._subscriptions[eventName];\n        if (existingSubscriptions == null) {\n            existingSubscriptions = {};\n            this._subscriptions[eventName] = existingSubscriptions;\n        }\n        return existingSubscriptions;\n    }\n}\nexports.ProviderRpcClient = ProviderRpcClient;\n/**\n * @category Provider\n */\nclass ProviderNotFoundException extends Error {\n    constructor() {\n        super('Everscale provider was not found');\n    }\n}\nexports.ProviderNotFoundException = ProviderNotFoundException;\n/**\n * @category Provider\n */\nclass ProviderNotInitializedException extends Error {\n    constructor() {\n        super('Everscale provider was not initialized yet');\n    }\n}\nexports.ProviderNotInitializedException = ProviderNotInitializedException;\nfunction foldSubscriptions(subscriptions, except) {\n    const total = { state: false, transactions: false };\n    const withoutExcluded = Object.assign({}, total);\n    for (const item of subscriptions) {\n        if (withoutExcluded.transactions && withoutExcluded.state) {\n            break;\n        }\n        total.state || (total.state = item.state);\n        total.transactions || (total.transactions = item.transactions);\n        if (item != except) {\n            withoutExcluded.state || (withoutExcluded.state = item.state);\n            withoutExcluded.transactions || (withoutExcluded.transactions = item.transactions);\n        }\n    }\n    return { total, withoutExcluded };\n}\n\n\n//# sourceURL=webpack://simplepage/./node_modules/everscale-inpage-provider/dist/index.js?");

/***/ }),

/***/ "./node_modules/everscale-inpage-provider/dist/models.js":
/*!***************************************************************!*\
  !*** ./node_modules/everscale-inpage-provider/dist/models.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.parseTokensObject = exports.serializeTokensObject = exports.parseAccountInteraction = exports.parsePermissions = exports.parseMessage = exports.serializeMessage = exports.parseTransaction = exports.serializeTransaction = void 0;\nconst utils_1 = __webpack_require__(/*! ./utils */ \"./node_modules/everscale-inpage-provider/dist/utils.js\");\n/**\n * @category Models\n */\nfunction serializeTransaction(transaction) {\n    return {\n        ...transaction,\n        inMessage: serializeMessage(transaction.inMessage),\n        outMessages: transaction.outMessages.map(serializeMessage),\n    };\n}\nexports.serializeTransaction = serializeTransaction;\n/**\n * @category Models\n */\nfunction parseTransaction(transaction) {\n    return {\n        ...transaction,\n        inMessage: parseMessage(transaction.inMessage),\n        outMessages: transaction.outMessages.map(parseMessage),\n    };\n}\nexports.parseTransaction = parseTransaction;\n/**\n * @category Models\n */\nfunction serializeMessage(message) {\n    return {\n        ...message,\n        src: message.src ? message.src.toString() : undefined,\n        dst: message.dst ? message.dst.toString() : undefined,\n    };\n}\nexports.serializeMessage = serializeMessage;\n/**\n * @category Models\n */\nfunction parseMessage(message) {\n    return {\n        ...message,\n        src: message.src ? new utils_1.Address(message.src) : undefined,\n        dst: message.dst ? new utils_1.Address(message.dst) : undefined,\n    };\n}\nexports.parseMessage = parseMessage;\n/**\n * @category Models\n */\nfunction parsePermissions(permissions) {\n    return {\n        ...permissions,\n        accountInteraction: permissions.accountInteraction ? parseAccountInteraction(permissions.accountInteraction) : undefined,\n    };\n}\nexports.parsePermissions = parsePermissions;\n/**\n * @category Models\n */\nfunction parseAccountInteraction(accountInteraction) {\n    return {\n        ...accountInteraction,\n        address: new utils_1.Address(accountInteraction.address),\n    };\n}\nexports.parseAccountInteraction = parseAccountInteraction;\n/**\n * @category Models\n */\nfunction serializeTokensObject(object) {\n    return serializeTokenValue(object);\n}\nexports.serializeTokensObject = serializeTokensObject;\nfunction serializeTokenValue(token) {\n    if (token instanceof utils_1.Address) {\n        return token.toString();\n    }\n    if (Array.isArray(token)) {\n        const result = [];\n        for (const item of token) {\n            result.push(serializeTokenValue(item));\n        }\n        return result;\n    }\n    else if (token != null && typeof token === 'object') {\n        const result = {};\n        for (const [key, value] of Object.entries(token)) {\n            result[key] = serializeTokenValue(value);\n        }\n        return result;\n    }\n    else {\n        return token;\n    }\n}\n/**\n * @category Models\n */\nfunction parseTokensObject(params, object) {\n    const result = {};\n    for (const param of params) {\n        result[param.name] = parseTokenValue(param, object[param.name]);\n    }\n    return result;\n}\nexports.parseTokensObject = parseTokensObject;\nfunction parseTokenValue(param, token) {\n    if (!param.type.startsWith('map')) {\n        const isArray = param.type.endsWith('[]');\n        const isOptional = !isArray && param.type.startsWith('optional');\n        const rawType = (isArray ?\n            param.type.slice(0, -2) :\n            isOptional ?\n                param.type.slice(9, -1) :\n                param.type);\n        if (isArray) {\n            const rawParam = { name: param.name, type: rawType, components: param.components };\n            const result = [];\n            for (const item of token) {\n                result.push(parseTokenValue(rawParam, item));\n            }\n            return result;\n        }\n        else if (isOptional) {\n            if (token == null) {\n                return null;\n            }\n            else {\n                const rawParam = { name: param.name, type: rawType, components: param.components };\n                return parseTokenValue(rawParam, token);\n            }\n        }\n        else if (rawType == 'tuple') {\n            const result = {};\n            if (param.components != null) {\n                for (const component of param.components) {\n                    result[component.name] = parseTokenValue(component, token[component.name]);\n                }\n            }\n            return result;\n        }\n        else if (rawType == 'address') {\n            return new utils_1.Address(token);\n        }\n        else {\n            return token;\n        }\n    }\n    else {\n        let [keyType, valueType] = param.type.split(',');\n        keyType = keyType.slice(4);\n        valueType = valueType.slice(0, -1);\n        const result = [];\n        for (const [key, value] of token) {\n            result.push([parseTokenValue({\n                    name: '',\n                    type: keyType,\n                }, key), parseTokenValue({\n                    name: '',\n                    type: valueType,\n                    components: param.components,\n                }, value)]);\n        }\n        return result;\n    }\n}\n\n\n//# sourceURL=webpack://simplepage/./node_modules/everscale-inpage-provider/dist/models.js?");

/***/ }),

/***/ "./node_modules/everscale-inpage-provider/dist/stream.js":
/*!***************************************************************!*\
  !*** ./node_modules/everscale-inpage-provider/dist/stream.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Subscriber = void 0;\nconst utils_1 = __webpack_require__(/*! ./utils */ \"./node_modules/everscale-inpage-provider/dist/utils.js\");\n/**\n * @category Stream\n */\nclass Subscriber {\n    constructor(provider) {\n        this.provider = provider;\n        this.subscriptions = {};\n        this.scanners = {};\n    }\n    /**\n     * Returns stream of new transactions\n     */\n    transactions(address) {\n        return this._addSubscription('transactionsFound', address);\n    }\n    /**\n     * Returns stream of old transactions\n     */\n    oldTransactions(address, filter) {\n        const id = (0, utils_1.getUniqueId)();\n        return new StreamImpl(async (onData, onEnd) => {\n            const scanner = new UnorderedTransactionsScanner(this.provider, {\n                address,\n                onData,\n                onEnd,\n                ...filter,\n            });\n            this.scanners[id] = scanner;\n            await scanner.start();\n        }, async () => {\n            const scanner = this.scanners[id];\n            delete this.scanners[id];\n            if (scanner != null) {\n                await scanner.stop();\n            }\n        }, identity);\n    }\n    states(address) {\n        return this._addSubscription('contractStateChanged', address);\n    }\n    async unsubscribe() {\n        const subscriptions = Object.assign({}, this.subscriptions);\n        for (const address of Object.keys(this.subscriptions)) {\n            delete this.subscriptions[address];\n        }\n        const scanners = Object.assign({}, this.scanners);\n        for (const id of Object.keys(this.scanners)) {\n            delete this.scanners[id];\n        }\n        await Promise.all(Object.values(subscriptions)\n            .map(async (item) => {\n            const events = Object.assign({}, item);\n            for (const event of Object.keys(events)) {\n                delete item[event];\n            }\n            await Promise.all(Object.values(events).map((eventData) => {\n                if (eventData == null) {\n                    return;\n                }\n                return eventData.subscription.then((item) => {\n                    return item.unsubscribe();\n                }).catch(() => {\n                    // ignore\n                });\n            }));\n        }).concat(Object.values(scanners).map((item) => item.stop())));\n    }\n    _addSubscription(event, address) {\n        const id = (0, utils_1.getUniqueId)();\n        return new StreamImpl((onData, onEnd) => {\n            let subscriptions = this.subscriptions[address.toString()];\n            let eventData = subscriptions === null || subscriptions === void 0 ? void 0 : subscriptions[event];\n            if (eventData == null) {\n                const handlers = {\n                    [id]: { onData, onEnd, queue: new PromiseQueue() },\n                };\n                eventData = {\n                    subscription: this.provider.subscribe(event, {\n                        address,\n                    }).then((subscription) => {\n                        subscription.on('data', (data) => {\n                            Object.values(handlers).forEach(({ onData, queue }) => {\n                                queue.enqueue(() => onData(data));\n                            });\n                        });\n                        subscription.on('unsubscribed', () => {\n                            Object.values(handlers).forEach(({ onEnd, queue }) => {\n                                delete handlers[id];\n                                queue.clear();\n                                queue.enqueue(async () => onEnd());\n                            });\n                        });\n                        return subscription;\n                    }).catch((e) => {\n                        console.error(e);\n                        Object.values(handlers).forEach(({ onEnd, queue }) => {\n                            delete handlers[id];\n                            queue.clear();\n                            queue.enqueue(() => onEnd());\n                        });\n                        throw e;\n                    }),\n                    handlers,\n                };\n                if (subscriptions == null) {\n                    subscriptions = {\n                        [event]: eventData,\n                    };\n                    this.subscriptions[address.toString()] = subscriptions;\n                }\n                else {\n                    subscriptions[event] = eventData;\n                }\n            }\n            else {\n                eventData.handlers[id] = { onData, onEnd, queue: new PromiseQueue() };\n            }\n        }, () => {\n            const subscriptions = this.subscriptions[address.toString()];\n            if (subscriptions == null) {\n                return;\n            }\n            const eventData = subscriptions[event];\n            if (eventData != null) {\n                delete eventData.handlers[id];\n                if (Object.keys(eventData.handlers).length === 0) {\n                    const subscription = eventData.subscription;\n                    delete subscriptions[event];\n                    subscription\n                        .then((subscription) => subscription.unsubscribe())\n                        .catch(console.debug);\n                }\n            }\n            if (Object.keys(subscriptions).length === 0) {\n                delete this.subscriptions[address.toString()];\n            }\n        }, identity);\n    }\n}\nexports.Subscriber = Subscriber;\nasync function identity(event, handler) {\n    await handler(event);\n}\nclass StreamImpl {\n    constructor(makeProducer, stopProducer, extractor) {\n        this.makeProducer = makeProducer;\n        this.stopProducer = stopProducer;\n        this.extractor = extractor;\n    }\n    first() {\n        return new Promise(async (resolve, reject) => {\n            this.makeProducer(async (event) => {\n                await this.extractor(event, (item) => {\n                    this.stopProducer();\n                    resolve(item);\n                });\n            }, () => reject(new Error('Subscription closed')));\n        });\n    }\n    on(handler) {\n        this.makeProducer(async (event) => {\n            await this.extractor(event, handler);\n        }, () => {\n        });\n    }\n    merge(other) {\n        return new StreamImpl(async (onEvent, onEnd) => {\n            const state = {\n                counter: 0,\n            };\n            const checkEnd = () => {\n                if (++state.counter == 2) {\n                    onEnd();\n                }\n            };\n            this.makeProducer(onEvent, checkEnd);\n            other.makeProducer(onEvent, checkEnd);\n        }, () => {\n            this.stopProducer();\n            other.stopProducer();\n        }, this.extractor);\n    }\n    filter(f) {\n        return new StreamImpl(this.makeProducer, this.stopProducer, (event, handler) => this.extractor(event, async (item) => {\n            if (await f(item)) {\n                await handler(item);\n            }\n        }));\n    }\n    filterMap(f) {\n        return new StreamImpl(this.makeProducer, this.stopProducer, (event, handler) => this.extractor(event, async (item) => {\n            const newItem = await f(item);\n            if (newItem !== undefined) {\n                await handler(newItem);\n            }\n        }));\n    }\n    map(f) {\n        return this.filterMap(f);\n    }\n    flatMap(f) {\n        return new StreamImpl(this.makeProducer, this.stopProducer, (event, handler) => this.extractor(event, async (item) => {\n            const items = await f(item);\n            for (const newItem of items) {\n                await handler(newItem);\n            }\n        }));\n    }\n    skip(n) {\n        const state = {\n            index: 0,\n        };\n        return new StreamImpl(this.makeProducer, this.stopProducer, (event, handler) => this.extractor(event, async (item) => {\n            if (state.index >= n) {\n                await handler(item);\n            }\n            else {\n                ++state.index;\n            }\n        }));\n    }\n    skipWhile(f) {\n        const state = {\n            shouldSkip: true,\n        };\n        return new StreamImpl(this.makeProducer, this.stopProducer, (event, handler) => this.extractor(event, async (item) => {\n            if (!state.shouldSkip || !(await f(item))) {\n                state.shouldSkip = false;\n                await handler(item);\n            }\n        }));\n    }\n}\nclass UnorderedTransactionsScanner {\n    constructor(provider, { address, onData, onEnd, fromLt, fromUtime, }) {\n        this.provider = provider;\n        this.queue = new PromiseQueue();\n        this.isRunning = false;\n        this.address = address;\n        this.onData = onData;\n        this.onEnd = onEnd;\n        this.fromLt = fromLt;\n        this.fromUtime = fromUtime;\n    }\n    async start() {\n        if (this.isRunning || this.promise != null) {\n            return;\n        }\n        this.isRunning = true;\n        this.promise = (async () => {\n            while (this.isRunning) {\n                try {\n                    const { transactions, continuation } = await this.provider.getTransactions({\n                        address: this.address,\n                        continuation: this.continuation,\n                    });\n                    if (!this.isRunning || transactions.length == null) {\n                        break;\n                    }\n                    const filteredTransactions = transactions.filter((item) => ((this.fromLt == null || item.id.lt > this.fromLt) && ((this.fromUtime == null || item.createdAt > this.fromUtime))));\n                    if (filteredTransactions.length == 0) {\n                        break;\n                    }\n                    const info = {\n                        maxLt: filteredTransactions[0].id.lt,\n                        minLt: filteredTransactions[filteredTransactions.length - 1].id.lt,\n                        batchType: 'old',\n                    };\n                    this.queue.enqueue(() => this.onData({\n                        address: this.address,\n                        transactions: filteredTransactions,\n                        info,\n                    }));\n                    if (continuation != null) {\n                        this.continuation = continuation;\n                    }\n                    else {\n                        break;\n                    }\n                }\n                catch (e) {\n                    console.error(e);\n                }\n            }\n            this.queue.enqueue(async () => this.onEnd());\n            this.isRunning = false;\n            this.continuation = undefined;\n        })();\n    }\n    async stop() {\n        this.isRunning = false;\n        this.queue.clear();\n        if (this.promise != null) {\n            await this.promise;\n        }\n        else {\n            this.onEnd();\n        }\n    }\n}\nclass PromiseQueue {\n    constructor() {\n        this.queue = [];\n        this.workingOnPromise = false;\n    }\n    enqueue(promise) {\n        this.queue.push(promise);\n        this._dequeue().catch(() => {\n        });\n    }\n    clear() {\n        this.queue.length = 0;\n    }\n    async _dequeue() {\n        if (this.workingOnPromise) {\n            return;\n        }\n        const item = this.queue.shift();\n        if (!item) {\n            return;\n        }\n        this.workingOnPromise = true;\n        item()\n            .then(() => {\n            this.workingOnPromise = false;\n            this._dequeue();\n        })\n            .catch(() => {\n            this.workingOnPromise = false;\n            this._dequeue();\n        });\n    }\n}\n\n\n//# sourceURL=webpack://simplepage/./node_modules/everscale-inpage-provider/dist/stream.js?");

/***/ }),

/***/ "./node_modules/everscale-inpage-provider/dist/utils.js":
/*!**************************************************************!*\
  !*** ./node_modules/everscale-inpage-provider/dist/utils.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getUniqueId = exports.mergeTransactions = exports.AddressLiteral = exports.Address = void 0;\n/**\n * @category Utils\n */\nclass Address {\n    constructor(address) {\n        this._address = address;\n    }\n    toString() {\n        return this._address;\n    }\n    equals(other) {\n        if (other instanceof Address) {\n            return this._address == other._address;\n        }\n        else {\n            return this._address == other;\n        }\n    }\n}\nexports.Address = Address;\n/**\n * @category Utils\n */\nclass AddressLiteral extends Address {\n    constructor(address) {\n        super(address);\n    }\n}\nexports.AddressLiteral = AddressLiteral;\n/**\n * Modifies knownTransactions array, merging it with new transactions.\n * All arrays are assumed to be sorted by descending logical time.\n *\n * > Note! This method does not remove duplicates.\n *\n * @param knownTransactions\n * @param newTransactions\n * @param info\n *\n * @category Utils\n */\nfunction mergeTransactions(knownTransactions, newTransactions, info) {\n    if (info.batchType == 'old') {\n        knownTransactions.push(...newTransactions);\n        return knownTransactions;\n    }\n    if (knownTransactions.length === 0) {\n        knownTransactions.push(...newTransactions);\n        return knownTransactions;\n    }\n    // Example:\n    // known lts: [N, N-1, N-2, N-3, (!) N-10,...]\n    // new lts: [N-4, N-5]\n    // batch info: { minLt: N-5, maxLt: N-4, batchType: 'new' }\n    // 1. Skip indices until known transaction lt is greater than the biggest in the batch\n    let i = 0;\n    while (i < knownTransactions.length &&\n        knownTransactions[i].id.lt.localeCompare(info.maxLt) >= 0) {\n        ++i;\n    }\n    // 2. Insert new transactions\n    knownTransactions.splice(i, 0, ...newTransactions);\n    return knownTransactions;\n}\nexports.mergeTransactions = mergeTransactions;\nconst MAX = 4294967295;\nlet idCounter = Math.floor(Math.random() * MAX);\nfunction getUniqueId() {\n    idCounter = (idCounter + 1) % MAX;\n    return idCounter;\n}\nexports.getUniqueId = getUniqueId;\n\n\n//# sourceURL=webpack://simplepage/./node_modules/everscale-inpage-provider/dist/utils.js?");

/***/ }),

/***/ "./src/contracts/RootTokenContract.js":
/*!********************************************!*\
  !*** ./src/contracts/RootTokenContract.js ***!
  \********************************************/
/***/ ((module) => {

eval("const abi = {\n  \"ABI version\": 2,\n  \"version\": \"2.2.0\",\n  \"header\": [\n    \"pubkey\",\n    \"time\",\n    \"expire\"\n  ],\n  \"functions\": [\n  {\n    \"name\": \"constructor\",\n    \"inputs\": [\n    { \"name\":\"name\", \"type\":\"string\" },\n    { \"name\":\"symbol\", \"type\":\"string\" },\n    { \"name\":\"decimals\", \"type\":\"uint8\" },\n    { \"name\":\"root_pubkey\", \"type\":\"uint256\" },\n    { \"name\":\"root_owner\", \"type\":\"optional(address)\" },\n    { \"name\":\"total_supply\", \"type\":\"uint128\" }\n    ],\n    \"outputs\": [\n    ],\n    \"id\": \"0xa\"\n  },\n  {\n    \"name\": \"setWalletCode\",\n    \"inputs\": [\n    { \"name\":\"_answer_id\", \"type\":\"uint32\" },\n    { \"name\":\"wallet_code\", \"type\":\"cell\" }\n    ],\n    \"outputs\": [\n    { \"name\":\"value0\", \"type\":\"bool\" }\n    ],\n    \"id\": \"0xb\"\n  },\n  {\n    \"name\": \"deployWallet\",\n    \"inputs\": [\n    { \"name\":\"_answer_id\", \"type\":\"uint32\" },\n    { \"name\":\"pubkey\", \"type\":\"uint256\" },\n    { \"name\":\"owner\", \"type\":\"optional(address)\" },\n    { \"name\":\"tokens\", \"type\":\"uint128\" },\n    { \"name\":\"evers\", \"type\":\"uint128\" }\n    ],\n    \"outputs\": [\n    { \"name\":\"value0\", \"type\":\"address\" }\n    ],\n    \"id\": \"0xc\"\n  },\n  {\n    \"name\": \"deployEmptyWallet\",\n    \"inputs\": [\n    { \"name\":\"_answer_id\", \"type\":\"uint32\" },\n    { \"name\":\"pubkey\", \"type\":\"uint256\" },\n    { \"name\":\"owner\", \"type\":\"optional(address)\" },\n    { \"name\":\"evers\", \"type\":\"uint128\" }\n    ],\n    \"outputs\": [\n    { \"name\":\"value0\", \"type\":\"address\" }\n    ],\n    \"id\": \"0xd\"\n  },\n  {\n    \"name\": \"grant\",\n    \"inputs\": [\n    { \"name\":\"_answer_id\", \"type\":\"uint32\" },\n    { \"name\":\"dest\", \"type\":\"address\" },\n    { \"name\":\"tokens\", \"type\":\"uint128\" },\n    { \"name\":\"evers\", \"type\":\"uint128\" }\n    ],\n    \"outputs\": [\n    ],\n    \"id\": \"0xe\"\n  },\n  {\n    \"name\": \"mint\",\n    \"inputs\": [\n    { \"name\":\"_answer_id\", \"type\":\"uint32\" },\n    { \"name\":\"tokens\", \"type\":\"uint128\" }\n    ],\n    \"outputs\": [\n    { \"name\":\"value0\", \"type\":\"bool\" }\n    ],\n    \"id\": \"0xf\"\n  },\n  {\n    \"name\": \"requestTotalGranted\",\n    \"inputs\": [\n    { \"name\":\"_answer_id\", \"type\":\"uint32\" }\n    ],\n    \"outputs\": [\n    { \"name\":\"value0\", \"type\":\"uint128\" }\n    ],\n    \"id\": \"0x10\"\n  },\n  {\n    \"name\": \"getName\",\n    \"inputs\": [\n    ],\n    \"outputs\": [\n    { \"name\":\"value0\", \"type\":\"string\" }\n    ],\n    \"id\": \"0x11\"\n  },\n  {\n    \"name\": \"getSymbol\",\n    \"inputs\": [\n    ],\n    \"outputs\": [\n    { \"name\":\"value0\", \"type\":\"string\" }\n    ],\n    \"id\": \"0x12\"\n  },\n  {\n    \"name\": \"getDecimals\",\n    \"inputs\": [\n    ],\n    \"outputs\": [\n    { \"name\":\"value0\", \"type\":\"uint8\" }\n    ],\n    \"id\": \"0x13\"\n  },\n  {\n    \"name\": \"getRootKey\",\n    \"inputs\": [\n    ],\n    \"outputs\": [\n    { \"name\":\"value0\", \"type\":\"uint256\" }\n    ],\n    \"id\": \"0x14\"\n  },\n  {\n    \"name\": \"getTotalSupply\",\n    \"inputs\": [\n    ],\n    \"outputs\": [\n    { \"name\":\"value0\", \"type\":\"uint128\" }\n    ],\n    \"id\": \"0x15\"\n  },\n  {\n    \"name\": \"getTotalGranted\",\n    \"inputs\": [\n    ],\n    \"outputs\": [\n    { \"name\":\"value0\", \"type\":\"uint128\" }\n    ],\n    \"id\": \"0x16\"\n  },\n  {\n    \"name\": \"hasWalletCode\",\n    \"inputs\": [\n    ],\n    \"outputs\": [\n    { \"name\":\"value0\", \"type\":\"bool\" }\n    ],\n    \"id\": \"0x17\"\n  },\n  {\n    \"name\": \"getWalletCode\",\n    \"inputs\": [\n    ],\n    \"outputs\": [\n    { \"name\":\"value0\", \"type\":\"cell\" }\n    ],\n    \"id\": \"0x18\"\n  },\n  {\n    \"name\": \"getWalletAddress\",\n    \"inputs\": [\n    { \"name\":\"pubkey\", \"type\":\"uint256\" },\n    { \"name\":\"owner\", \"type\":\"optional(address)\" }\n    ],\n    \"outputs\": [\n    { \"name\":\"value0\", \"type\":\"address\" }\n    ],\n    \"id\": \"0x19\"\n  },\n  {\n    \"name\": \"getWalletCodeHash\",\n    \"inputs\": [\n    ],\n    \"outputs\": [\n    { \"name\":\"value0\", \"type\":\"uint256\" }\n    ],\n    \"id\": \"0x1a\"\n  }\n  ],\n  \"fields\": [\n    { \"name\":\"__uninitialized\", \"type\":\"bool\" },\n    { \"name\":\"__replay\", \"type\":\"uint64\" },\n    { \"name\":\"name_\", \"type\":\"string\" },\n    { \"name\":\"symbol_\", \"type\":\"string\" },\n    { \"name\":\"decimals_\", \"type\":\"uint8\" },\n    { \"name\":\"root_pubkey_\", \"type\":\"uint256\" },\n    { \"name\":\"root_owner_\", \"type\":\"optional(address)\" },\n    { \"name\":\"total_supply_\", \"type\":\"uint128\" },\n    { \"name\":\"total_granted_\", \"type\":\"uint128\" },\n    { \"name\":\"wallet_code_\", \"type\":\"optional(cell)\" }\n  ],\n  \"events\": [\n  ]\n};\n\nconst contractPackageRoot = {\n  abi,\n  tvc:''\n}\nmodule.exports = contractPackageRoot;\n\n\n//# sourceURL=webpack://simplepage/./src/contracts/RootTokenContract.js?");

/***/ }),

/***/ "./src/contracts/TONTokenWallet.js":
/*!*****************************************!*\
  !*** ./src/contracts/TONTokenWallet.js ***!
  \*****************************************/
/***/ ((module) => {

eval("const abi = {\n  \"ABI version\": 2,\n  \"version\": \"2.2.0\",\n  \"header\": [\n    \"pubkey\",\n    \"time\",\n    \"expire\"\n  ],\n  \"functions\": [\n  {\n    \"name\": \"transfer\",\n    \"inputs\": [\n    { \"name\":\"answer_addr\", \"type\":\"address\" },\n    { \"name\":\"to\", \"type\":\"address\" },\n    { \"name\":\"tokens\", \"type\":\"uint128\" },\n    { \"name\":\"evers\", \"type\":\"uint128\" },\n    { \"name\":\"return_ownership\", \"type\":\"uint128\" }\n    ],\n    \"outputs\": [\n    ],\n    \"id\": \"0xa\"\n  },\n  {\n    \"name\": \"transferWithNotify\",\n    \"inputs\": [\n    { \"name\":\"_answer_id\", \"type\":\"uint32\" },\n    { \"name\":\"answer_addr\", \"type\":\"address\" },\n    { \"name\":\"to\", \"type\":\"address\" },\n    { \"name\":\"tokens\", \"type\":\"uint128\" },\n    { \"name\":\"evers\", \"type\":\"uint128\" },\n    { \"name\":\"return_ownership\", \"type\":\"uint128\" },\n    { \"name\":\"payload\", \"type\":\"cell\" }\n    ],\n    \"outputs\": [\n    ],\n    \"id\": \"0xb\"\n  },\n  {\n    \"name\": \"transferToRecipient\",\n    \"inputs\": [\n    { \"name\":\"answer_addr\", \"type\":\"address\" },\n    { \"name\":\"recipient_pubkey\", \"type\":\"uint256\" },\n    { \"name\":\"recipient_owner\", \"type\":\"optional(address)\" },\n    { \"name\":\"tokens\", \"type\":\"uint128\" },\n    { \"name\":\"evers\", \"type\":\"uint128\" },\n    { \"name\":\"deploy\", \"type\":\"bool\" },\n    { \"name\":\"return_ownership\", \"type\":\"uint128\" }\n    ],\n    \"outputs\": [\n    ],\n    \"id\": \"0xc\"\n  },\n  {\n    \"name\": \"transferToRecipientWithNotify\",\n    \"inputs\": [\n    { \"name\":\"_answer_id\", \"type\":\"uint32\" },\n    { \"name\":\"answer_addr\", \"type\":\"address\" },\n    { \"name\":\"recipient_pubkey\", \"type\":\"uint256\" },\n    { \"name\":\"recipient_owner\", \"type\":\"optional(address)\" },\n    { \"name\":\"tokens\", \"type\":\"uint128\" },\n    { \"name\":\"evers\", \"type\":\"uint128\" },\n    { \"name\":\"deploy\", \"type\":\"bool\" },\n    { \"name\":\"return_ownership\", \"type\":\"uint128\" },\n    { \"name\":\"payload\", \"type\":\"cell\" }\n    ],\n    \"outputs\": [\n    ],\n    \"id\": \"0xd\"\n  },\n  {\n    \"name\": \"requestBalance\",\n    \"inputs\": [\n    { \"name\":\"_answer_id\", \"type\":\"uint32\" }\n    ],\n    \"outputs\": [\n    { \"name\":\"value0\", \"type\":\"uint128\" }\n    ],\n    \"id\": \"0xe\"\n  },\n  {\n    \"name\": \"accept\",\n    \"inputs\": [\n    { \"name\":\"_answer_id\", \"type\":\"uint32\" },\n    { \"name\":\"tokens\", \"type\":\"uint128\" },\n    { \"name\":\"answer_addr\", \"type\":\"address\" },\n    { \"name\":\"keep_evers\", \"type\":\"uint128\" }\n    ],\n    \"outputs\": [\n    { \"name\":\"value0\", \"type\":\"bool\" }\n    ],\n    \"id\": \"0xf\"\n  },\n  {\n    \"name\": \"internalTransfer\",\n    \"inputs\": [\n    { \"name\":\"_answer_id\", \"type\":\"uint32\" },\n    { \"name\":\"tokens\", \"type\":\"uint128\" },\n    { \"name\":\"answer_addr\", \"type\":\"address\" },\n    { \"name\":\"sender_pubkey\", \"type\":\"uint256\" },\n    { \"name\":\"sender_owner\", \"type\":\"optional(address)\" },\n    { \"name\":\"notify_receiver\", \"type\":\"bool\" },\n    { \"name\":\"payload\", \"type\":\"cell\" }\n    ],\n    \"outputs\": [\n    ],\n    \"id\": \"0x10\"\n  },\n  {\n    \"name\": \"destroy\",\n    \"inputs\": [\n    { \"name\":\"dest\", \"type\":\"address\" }\n    ],\n    \"outputs\": [\n    ],\n    \"id\": \"0x11\"\n  },\n  {\n    \"name\": \"getDetails\",\n    \"inputs\": [\n    ],\n    \"outputs\": [\n    { \"name\":\"name\", \"type\":\"string\" },\n    { \"name\":\"symbol\", \"type\":\"string\" },\n    { \"name\":\"decimals\", \"type\":\"uint8\" },\n    { \"name\":\"balance\", \"type\":\"uint128\" },\n    { \"name\":\"root_pubkey\", \"type\":\"uint256\" },\n    { \"name\":\"root_address\", \"type\":\"address\" },\n    { \"name\":\"wallet_pubkey\", \"type\":\"uint256\" },\n    { \"name\":\"owner_address\", \"type\":\"address\" },\n    { \"components\":[\n      { \"name\":\"lend_pubkey\", \"type\":\"uint256\" },\n      { \"name\":\"lend_finish_time\", \"type\":\"uint32\" }\n    ], \"name\":\"lend_pubkey\", \"type\":\"optional(tuple)\" },\n    { \"components\":[\n      { \"components\":[\n        { \"components\":[\n          { \"name\":\"workchain_id\", \"type\":\"int8\" },\n          { \"name\":\"address\", \"type\":\"uint256\" }\n        ], \"name\":\"dest\", \"type\":\"tuple\" }\n      ], \"name\":\"lend_key\", \"type\":\"tuple\" },\n      { \"name\":\"lend_balance\", \"type\":\"uint128\" },\n      { \"name\":\"lend_finish_time\", \"type\":\"uint32\" }\n    ], \"name\":\"lend_owners\", \"type\":\"tuple[]\" },\n    { \"name\":\"lend_balance\", \"type\":\"uint128\" },\n    { \"name\":\"code_hash\", \"type\":\"uint256\" },\n    { \"name\":\"code_depth\", \"type\":\"uint16\" },\n    { \"components\":[\n      { \"name\":\"spender\", \"type\":\"address\" },\n      { \"name\":\"remainingTokens\", \"type\":\"uint128\" }\n    ], \"name\":\"allowance\", \"type\":\"tuple\" },\n    { \"name\":\"workchain_id\", \"type\":\"int8\" }\n    ],\n    \"id\": \"0x16\"\n  },\n  {\n    \"name\": \"getBalance\",\n    \"inputs\": [\n    ],\n    \"outputs\": [\n    { \"name\":\"value0\", \"type\":\"uint128\" }\n    ],\n    \"id\": \"0x17\"\n  },\n  {\n    \"name\": \"approve\",\n    \"inputs\": [\n    { \"name\":\"spender\", \"type\":\"address\" },\n    { \"name\":\"remainingTokens\", \"type\":\"uint128\" },\n    { \"name\":\"tokens\", \"type\":\"uint128\" }\n    ],\n    \"outputs\": [\n    ],\n    \"id\": \"0x18\"\n  },\n  {\n    \"name\": \"transferFrom\",\n    \"inputs\": [\n    { \"name\":\"answer_addr\", \"type\":\"address\" },\n    { \"name\":\"from\", \"type\":\"address\" },\n    { \"name\":\"to\", \"type\":\"address\" },\n    { \"name\":\"tokens\", \"type\":\"uint128\" },\n    { \"name\":\"evers\", \"type\":\"uint128\" }\n    ],\n    \"outputs\": [\n    ],\n    \"id\": \"0x19\"\n  },\n  {\n    \"name\": \"transferFromWithNotify\",\n    \"inputs\": [\n    { \"name\":\"answer_addr\", \"type\":\"address\" },\n    { \"name\":\"from\", \"type\":\"address\" },\n    { \"name\":\"to\", \"type\":\"address\" },\n    { \"name\":\"tokens\", \"type\":\"uint128\" },\n    { \"name\":\"evers\", \"type\":\"uint128\" },\n    { \"name\":\"payload\", \"type\":\"cell\" }\n    ],\n    \"outputs\": [\n    ],\n    \"id\": \"0x1a\"\n  },\n  {\n    \"name\": \"internalTransferFrom\",\n    \"inputs\": [\n    { \"name\":\"answer_addr\", \"type\":\"address\" },\n    { \"name\":\"to\", \"type\":\"address\" },\n    { \"name\":\"tokens\", \"type\":\"uint128\" },\n    { \"name\":\"notify_receiver\", \"type\":\"bool\" },\n    { \"name\":\"payload\", \"type\":\"cell\" }\n    ],\n    \"outputs\": [\n    ],\n    \"id\": \"0x1b\"\n  },\n  {\n    \"name\": \"disapprove\",\n    \"inputs\": [\n    ],\n    \"outputs\": [\n    ],\n    \"id\": \"0x1c\"\n  }\n  ],\n  \"fields\": [\n    { \"name\":\"__uninitialized\", \"type\":\"bool\" },\n    { \"name\":\"__replay\", \"type\":\"uint64\" },\n    { \"name\":\"name_\", \"type\":\"string\" },\n    { \"name\":\"symbol_\", \"type\":\"string\" },\n    { \"name\":\"decimals_\", \"type\":\"uint8\" },\n    { \"name\":\"balance_\", \"type\":\"uint128\" },\n    { \"name\":\"root_pubkey_\", \"type\":\"uint256\" },\n    { \"name\":\"root_address_\", \"type\":\"address\" },\n    { \"name\":\"wallet_pubkey_\", \"type\":\"uint256\" },\n    { \"name\":\"owner_address_\", \"type\":\"optional(address)\" },\n    { \"name\":\"code_\", \"type\":\"cell\" },\n    { \"name\":\"code_hash_\", \"type\":\"uint256\" },\n    { \"name\":\"code_depth_\", \"type\":\"uint16\" },\n    { \"components\":[\n      { \"name\":\"spender\", \"type\":\"address\" },\n      { \"name\":\"remainingTokens\", \"type\":\"uint128\" }\n    ], \"name\":\"allowance_\", \"type\":\"optional(tuple)\" },\n    { \"name\":\"workchain_id_\", \"type\":\"int8\" }\n  ],\n  \"events\": [\n  ]\n};\n\nconst contractPackage = {\n  abi,\n  tvc:''\n}\nmodule.exports = contractPackage;\n\n\n//# sourceURL=webpack://simplepage/./src/contracts/TONTokenWallet.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _tonclient_appkit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tonclient/appkit */ \"./node_modules/@tonclient/appkit/dist/index.js\");\n/* harmony import */ var _tonclient_appkit__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_tonclient_appkit__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _contracts_TONTokenWallet_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./contracts/TONTokenWallet.js */ \"./src/contracts/TONTokenWallet.js\");\n/* harmony import */ var _contracts_TONTokenWallet_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_contracts_TONTokenWallet_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _contracts_RootTokenContract_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./contracts/RootTokenContract.js */ \"./src/contracts/RootTokenContract.js\");\n/* harmony import */ var _contracts_RootTokenContract_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_contracts_RootTokenContract_js__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var everscale_inpage_provider__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! everscale-inpage-provider */ \"./node_modules/everscale-inpage-provider/dist/index.js\");\n/* harmony import */ var everscale_inpage_provider__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(everscale_inpage_provider__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _tonclient_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @tonclient/core */ \"./node_modules/@tonclient/core/dist/index.js\");\n/* harmony import */ var _tonclient_core__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_tonclient_core__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _tonclient_lib_web__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @tonclient/lib-web */ \"./node_modules/@tonclient/lib-web/index.js\");\n//import { TONClient, setWasmOptions, abiContract } from 'ton-client-web-js';\n\n\n\n\n\n\nconst ever = new everscale_inpage_provider__WEBPACK_IMPORTED_MODULE_3__.ProviderRpcClient();\n\nasync function login(){\n  const { accountInteraction } = await ever.requestPermissions({\n    permissions: ['basic', 'accountInteraction'],\n  });\n  if (accountInteraction == null) {\n    throw new Error('Insufficient permissions');\n  }\n}\nwindow.login = login;\n\n\n\n\n\n_tonclient_core__WEBPACK_IMPORTED_MODULE_4__.TonClient.useBinaryLibrary(_tonclient_lib_web__WEBPACK_IMPORTED_MODULE_5__.libWeb);\n\n\nfunction addHTML(message) {\n  document.body.insertAdjacentHTML(\"beforeend\", `<p>${message}</p>`);\n}\n\n\n\nfunction submitform () {\n  (async () => {\n\n    const client = new _tonclient_core__WEBPACK_IMPORTED_MODULE_4__.TonClient({\n      network: {\n        endpoints: ['net.ton.dev']\n      }\n    });\n\n    var form = document.querySelector('#myform');\n    var formData = new FormData(form);\n    var address = formData.get('address');\n    var token = formData.get('token');\n    const tokenvalue = parseFloat(token) * 1000000000;\n    console.log(tokenvalue);\n    var seed = formData.get('seed');\n    const SEED_PHRASE_WORD_COUNT = 12;\n    const SEED_PHRASE_DICTIONARY_ENGLISH = 1;\n    const HD_PATH = \"m/44'/396'/0'/0/0\";\n    const keysgen = (await client.crypto.mnemonic_derive_sign_keys({\n      dictionary: SEED_PHRASE_DICTIONARY_ENGLISH,\n      word_count: SEED_PHRASE_WORD_COUNT,\n      phrase: seed,\n      path: HD_PATH,\n    }).catch(e => console.log(\"ERROR:\", e)));\n\n\n    //addHTML(`Ваши ключи:`);\n    //addHTML(`Публичный: ${keysgen[\"public\"]}`);\n    //addHTML(`Приватный: ${keysgen[\"secret\"]}`);\n\n    const TokenWallet = {\n      abi: (_contracts_TONTokenWallet_js__WEBPACK_IMPORTED_MODULE_1___default().abi),\n      tvc:(_contracts_TONTokenWallet_js__WEBPACK_IMPORTED_MODULE_1___default().tvc),\n    }\n    const TokenRoot = {\n      abi: (_contracts_RootTokenContract_js__WEBPACK_IMPORTED_MODULE_2___default().abi),\n      tvc:(_contracts_RootTokenContract_js__WEBPACK_IMPORTED_MODULE_2___default().tvc),\n    }\n\n    const accountroot = new _tonclient_appkit__WEBPACK_IMPORTED_MODULE_0__.Account(\n      TokenRoot,\n      {\n        signer: (0,_tonclient_core__WEBPACK_IMPORTED_MODULE_4__.signerKeys)(keysgen),\n        address: \"0:7f6225f4b84d9889593fb1d9366e12132b6b0c007db813f17897e33033e9a9ae\",\n        client\n      }\n    );\n    const wallet_address = await(accountroot.runLocal(\"getWalletAddress\",{pubkey:\"0x\"+keysgen[\"public\"]}).catch(e => console.log(\"ERROR:\", e)))\n    addHTML(`Ваш адрес токена кошелька: ${(wallet_address[\"decoded\"][\"output\"][\"value0\"])}`);\n    const wallet_address_f = wallet_address[\"decoded\"][\"output\"][\"value0\"]\n    const tip3create = new _tonclient_appkit__WEBPACK_IMPORTED_MODULE_0__.Account(\n      TokenWallet,\n      {\n        signer: (0,_tonclient_core__WEBPACK_IMPORTED_MODULE_4__.signerKeys)(keysgen),\n        address: wallet_address_f,\n        client\n      }\n    );\n    const balancedo1 = await(tip3create.runLocal(\"getBalance\",{}).catch(e => console.log(\"ERROR:\", e)))\n    addHTML(`Ваш баланс: ${(balancedo1[\"decoded\"][\"output\"][\"value0\"])} токенов EVR21`);\n    addHTML(`Переводим с вашего кошелька ${wallet_address_f } на кошелек: ${address} в количестве ${token}`);\n    const transfer = await(tip3create.run(\"transfer\",{\n      answer_addr:wallet_address_f,\n      to:address,\n      tokens:tokenvalue,\n      evers:500000000,\n      return_ownership:0,\n    }).catch(e => console.log(\"ERROR:\", e)))\n\n\n  })();\n};\nwindow.submitform = submitform;\n\nfunction balance_check () {\n  (async () => {\n\n    const client = new _tonclient_core__WEBPACK_IMPORTED_MODULE_4__.TonClient({\n      network: {\n        endpoints: ['net.ton.dev']\n      }\n    });\n\n    var form = document.querySelector('#myform');\n    var formData = new FormData(form);\n    var address = formData.get('address');\n    var token = formData.get('token');\n    const tokenvalue = parseFloat(token) * 1000000000;\n    console.log(tokenvalue);\n    var seed = formData.get('seed');\n    const SEED_PHRASE_WORD_COUNT = 12;\n    const SEED_PHRASE_DICTIONARY_ENGLISH = 1;\n    const HD_PATH = \"m/44'/396'/0'/0/0\";\n    const keysgen = (await client.crypto.mnemonic_derive_sign_keys({\n      dictionary: SEED_PHRASE_DICTIONARY_ENGLISH,\n      word_count: SEED_PHRASE_WORD_COUNT,\n      phrase: seed,\n      path: HD_PATH,\n    }).catch(e => console.log(\"ERROR:\", e)));\n\n\n    addHTML(`Ваши ключи:`);\n    addHTML(`Публичный: ${keysgen[\"public\"]}`);\n    addHTML(`Приватный: ${keysgen[\"secret\"]}`);\n\n    const TokenWallet = {\n      abi: (_contracts_TONTokenWallet_js__WEBPACK_IMPORTED_MODULE_1___default().abi),\n      tvc:(_contracts_TONTokenWallet_js__WEBPACK_IMPORTED_MODULE_1___default().tvc),\n    }\n    const TokenRoot = {\n      abi: (_contracts_RootTokenContract_js__WEBPACK_IMPORTED_MODULE_2___default().abi),\n      tvc:(_contracts_RootTokenContract_js__WEBPACK_IMPORTED_MODULE_2___default().tvc),\n    }\n\n    const accountroot = new _tonclient_appkit__WEBPACK_IMPORTED_MODULE_0__.Account(\n      TokenRoot,\n      {\n        signer: (0,_tonclient_core__WEBPACK_IMPORTED_MODULE_4__.signerKeys)(keysgen),\n        address: \"0:7f6225f4b84d9889593fb1d9366e12132b6b0c007db813f17897e33033e9a9ae\",\n        client\n      }\n    );\n    const wallet_address = await(accountroot.runLocal(\"getWalletAddress\",{pubkey:\"0x\"+keysgen[\"public\"]}).catch(e => console.log(\"ERROR:\", e)))\n    addHTML(`Ваш адрес токена кошелька: ${(wallet_address[\"decoded\"][\"output\"][\"value0\"])}`);\n    const wallet_address_f = wallet_address[\"decoded\"][\"output\"][\"value0\"]\n    const tip3create = new _tonclient_appkit__WEBPACK_IMPORTED_MODULE_0__.Account(\n      TokenWallet,\n      {\n        signer: (0,_tonclient_core__WEBPACK_IMPORTED_MODULE_4__.signerKeys)(keysgen),\n        address: wallet_address_f,\n        client\n      }\n    );\n    const balancedo1 = await(tip3create.runLocal(\"getBalance\",{}).catch(e => console.log(\"ERROR:\", e)))\n    addHTML(`Ваш баланс: ${(balancedo1[\"decoded\"][\"output\"][\"value0\"])/1000000000} токенов EVR21`);\n  })();\n};\nwindow.balance_check = balance_check;\n\n\n//# sourceURL=webpack://simplepage/./src/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;